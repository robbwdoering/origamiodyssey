[{"/home/bbor/dev/origamiodyssey/src/index.js":"1","/home/bbor/dev/origamiodyssey/src/layout/Header.js":"2","/home/bbor/dev/origamiodyssey/src/layout/Body.js":"3","/home/bbor/dev/origamiodyssey/src/layout/Footer.js":"4","/home/bbor/dev/origamiodyssey/src/layout/pages/Splash.js":"5","/home/bbor/dev/origamiodyssey/src/layout/pages/Lesson.js":"6","/home/bbor/dev/origamiodyssey/src/infra/constants.js":"7","/home/bbor/dev/origamiodyssey/src/anim/Scene.js":"8","/home/bbor/dev/origamiodyssey/src/infra/appReducer.js":"9","/home/bbor/dev/origamiodyssey/src/style/theme.js":"10","/home/bbor/dev/origamiodyssey/src/anim/Paper.js":"11","/home/bbor/dev/origamiodyssey/src/infra/actions.js":"12","/home/bbor/dev/origamiodyssey/src/layout/NavDrawer.js":"13","/home/bbor/dev/origamiodyssey/src/layout/pages/ModelSelect.js":"14","/home/bbor/dev/origamiodyssey/src/layout/pages/FoldControls.js":"15","/home/bbor/dev/origamiodyssey/src/layout/pages/User.js":"16","/home/bbor/dev/origamiodyssey/src/static/lettering.js":"17","/home/bbor/dev/origamiodyssey/src/layout/pages/FoldEditorCards.js":"18","/home/bbor/dev/origamiodyssey/src/infra/utils.js":"19","/home/bbor/dev/origamiodyssey/src/layout/pages/InstructionalHierarchy.js":"20"},{"size":1910,"mtime":1615737829551,"results":"21","hashOfConfig":"22"},{"size":2597,"mtime":1615744000165,"results":"23","hashOfConfig":"22"},{"size":5839,"mtime":1616554445305,"results":"24","hashOfConfig":"22"},{"size":442,"mtime":1613020514188,"results":"25","hashOfConfig":"22"},{"size":0,"mtime":1613010789852,"results":"26","hashOfConfig":"22"},{"size":131,"mtime":1613020940457,"results":"27","hashOfConfig":"22"},{"size":3613,"mtime":1616551406169,"results":"28","hashOfConfig":"22"},{"size":3309,"mtime":1616350047617,"results":"29","hashOfConfig":"22"},{"size":1261,"mtime":1616521674655,"results":"30","hashOfConfig":"22"},{"size":4897,"mtime":1616558018152,"results":"31","hashOfConfig":"22"},{"size":21213,"mtime":1616552687889,"results":"32","hashOfConfig":"22"},{"size":561,"mtime":1615941337229,"results":"33","hashOfConfig":"22"},{"size":4689,"mtime":1614982480281,"results":"34","hashOfConfig":"22"},{"size":7781,"mtime":1616458529307,"results":"35","hashOfConfig":"22"},{"size":2816,"mtime":1616551434490,"results":"36","hashOfConfig":"22"},{"size":1514,"mtime":1615046315306,"results":"37","hashOfConfig":"22"},{"size":14422,"mtime":1615155376973,"results":"38","hashOfConfig":"22"},{"size":9360,"mtime":1616362967374,"results":"39","hashOfConfig":"22"},{"size":2513,"mtime":1616555836113,"results":"40","hashOfConfig":"22"},{"size":6310,"mtime":1616558729256,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"eii7vj",{"filePath":"45","messages":"46","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/bbor/dev/origamiodyssey/src/index.js",[],["95","96"],"/home/bbor/dev/origamiodyssey/src/layout/Header.js",["97","98","99","100","101","102","103","104"],"/**\n * FILENAME: Header.js\n *\n * DESCRIPTION: Renders the basic of the animation.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n\tAppBar,\n\tClickAwayListener,\n\tToolbar,\n\tIconButton,\n\tTypography,\n\tMenu,\n\tMenuItem,\n\tInputBase\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\n\n// import OriDomi from \"oridomi\";\nimport { setShowNavDrawer, setFoldState, setLayoutState } from './../infra/actions';\nimport useStyles from './../style/theme.js';\nimport Lettering from './../static/lettering.js';\n\nexport const Header = props => {\n\tconst { setShowNavDrawer, setFoldState, setLayoutState } = props;\n\n\tconst [showMenu, setShowMenu] = useState(false);\n\n\tconst styles = useStyles();\n\tconst fold = useRef(null);\n\n\tconst toggleMenu = e => {\n\t\tconsole.log('toggleMenu');\n\t\tsetShowNavDrawer();\n\t};\n\n\tconst handleClickAway = e => {\n\t\tsetShowNavDrawer(false);\n\t};\n\n\tconst handleClickLogo = e => {\n\t\tsetFoldState(null);\n\t\tsetLayoutState(null);\n\t};\n\n\tconsole.log(styles);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<AppBar className={styles.appBarContainer}>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\tclassName=\"menu-button\"\n\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\taria-label=\"open drawer\"\n\t\t\t\t\t\tonClick={toggleMenu}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName={styles.appLogo}\n\t\t\t\t\t\theight=\"28px\"\n\t\t\t\t\t\tsrc={window.location.origin + '/logo512x256.png'}\n\t\t\t\t\t\tonClick={handleClickLogo}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<div className={styles.appLettering}>\n\t\t\t\t\t\t<Lettering />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={styles.searchContainer}>\n\t\t\t\t\t\t<div className={styles.searchIcon}>\n\t\t\t\t\t\t\t<SearchIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<InputBase\n\t\t\t\t\t\t\tplaceholder=\"Search Modelsâ€¦\"\n\t\t\t\t\t\t\tclasses={{ root: styles.inputRoot, input: styles.inputInput }}\n\t\t\t\t\t\t\tinputProps={{ 'aria-label': 'search' }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t<Menu\n\t\t\t\televation={0}\n\t\t\t\tgetContentAnchorEl={null}\n\t\t\t\tanchorOrigin={{\n\t\t\t\t\tvertical: 'bottom',\n\t\t\t\t\thorizontal: 'center'\n\t\t\t\t}}\n\t\t\t\ttransformOrigin={{\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'center'\n\t\t\t\t}}\n\t\t\t\tanchorEl={showMenu}\n\t\t\t\topen={Boolean(showMenu)}\n\t\t\t\tkeepMounted\n\t\t\t\tonClose={toggleMenu}\n\t\t\t>\n\t\t\t\t<MenuItem> A Menu without options </MenuItem>\n\t\t\t\t<MenuItem> is no menu at all </MenuItem>\n\t\t\t</Menu>\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {};\n};\n\nexport default connect(mapStateToProps, { setShowNavDrawer, setFoldState, setLayoutState })(Header);\n","/home/bbor/dev/origamiodyssey/src/layout/Body.js",["105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122"],"/home/bbor/dev/origamiodyssey/src/layout/Footer.js",["123","124","125","126","127"],"/**\n * FILENAME: Scene.js \n *\n * DESCRIPTION: Renders the basic of the animation. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nexport const Footer = props => {\n\tconst { } = props;\n\n\treturn (\n\t\t<div className=\"footer\">\n\t\t</div>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {};\n};\n\nexport default connect(mapStateToProps, {})(Footer);\n","/home/bbor/dev/origamiodyssey/src/layout/pages/Splash.js",[],"/home/bbor/dev/origamiodyssey/src/layout/pages/Lesson.js",[],["128","129"],"/home/bbor/dev/origamiodyssey/src/infra/constants.js",["130","131","132","133"],"/**\n * FILENAME: Constants.js \n *\n * DESCRIPTION: Contains constants for use accross the app. \n */\n\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport ClassIcon from \"@material-ui/icons/Class\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport GroupAddIcon from \"@material-ui/icons/GroupAdd\";\n\n// The FOLD files \nimport BirdBase from \"./../folds/BirdBase.json\";\nimport BoatBase from \"./../folds/BoatBase.json\";\nimport FrogBase from \"./../folds/FrogBase.json\";\n\nexport const Pages = {\n\tSplash: \"Splash\",\n\tModelSelect: \"ModelSelect\",\n\tFold: \"Fold\",\n\tUser: \"User\",\n\n\t// Used but undefined\n\tLesson: \"Lesson\",\n\tHistory: \"History\",\n\tLearnDashboard: \"LearnDashboard\",\n\tTeachDashboard: \"TeachDashboard\"\n};\n\nexport const Folds = {\n\tBirdBase: {\n\t\tname: \"Bird Base\",\n\t\tdescription: \"The first base many learn, this is perfect for winged creations such as birds and dragons.\",\n\t\ttags: [],\n\t\tauthor: \"Traditional\",\n\t\tjson: BirdBase\n\t},\n\tBoatBase: {\n\t\tname: \"Boat Base\",\n\t\tdescription: \"A more specific base for blocky models, such as boats and frames.\",\n\t\ttags: [],\n\t\tauthor: \"Traditional\",\n\t\tjson: BoatBase\n\t},\n\tFrogBase: {\n\t\tname: \"Frog Base\",\n\t\tdescription: \"A complex base used for models with length-wise asymmetry, like flowers and animals.\",\n\t\ttags: [],\n\t\tauthor: \"Traditional\",\n\t\tjson: FrogBase \n\t}\n};\n\nexport const initAppReducerState = {\n\tlayoutState: {\n\t\thash: 0,\n\t\tpage: Pages.ModelSelect,\n\t\tcurFold: null,\n\t\tfoldHash: 0,\n\t\tuseImages: false,\n\t\tshowEditor: true,\n\t\texpandHierarchy: false \n\t},\n\tfoldState: {\n\t\thash: 0,\n\t\tselectedLevel: 0,\n\t\tstepIndex: -1, // Depends on selected level\n\t\toverrideWithEditor: false \n\t},\n\teditorState: {\n\t\thash: 0,\n\t\tedgeHighlights: [],\n\t\tvertexHighlights: [],\n\t\tfaceHighlights: [],\n\t\tshowEdges: true,\n\t\tshowVertices: true,\n\t\tshowFaces: true,\n\t\tshowTriangulations: false\n\t},\n\tshowNavDrawer: false\n\n};\n\nexport const Actions = {\n\tSET_LAYOUT_STATE: \"SET_LAYOUT_STATE\",\n\tSET_SHOW_NAV_DRAWER: \"SET_SHOW_NAV_DRAWER\",\n\tSET_PAGE_CONFIG: \"SET_PAGE_CONFIG\",\n\tSET_FOLD_STATE: \"SET_FOLD_STATE\",\n\tSET_EDITOR_STATE: \"SET_EDITOR_STATE\",\n};\n\nexport const initNavTree = [\n\t{\t\n\t\ttext: \"What is Origami?\",\n\t\tkey: \"context_root\",\n\t\tchildren: [\n\t\t\t{\n\t\t\t\ttext: \"History\",\n\t\t\t\tkey: \"history\"\t\t\t\t\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: \"Origami Today\",\n\t\t\t\tkey: \"current_origami\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: \"Practical Origami\",\n\t\t\t\tkey: \"practical\"\n\t\t\t}\n\t\t]\n\t},\n\t{\t\n\t\ttext: \"Learn Origami\",\n\t\tkey: \"learn_root\",\n\t\tchildren: [\n\t\t\t{\n\t\t\t\ticon: <DashboardIcon />,\n\t\t\t\ttext: \"Dashboard\",\n\t\t\t\tkey: \"learn_dashboard\"\t\t\t\t\n\t\t\t},\n\t\t\t{\n\t\t\t\ticon: <GroupAddIcon />,\n\t\t\t\ttext: \"Join Class\",\n\t\t\t\tkey: \"join_class\"\n\t\t\t}\n\t\t]\n\t},\n\t{\t\n\t\ttext: \"Teach Origami\",\n\t\tkey: \"teach_root\",\n\t\tchildren: [\n\t\t\t{\n\t\t\t\ticon: <DashboardIcon />,\n\t\t\t\ttext: \"Lesson Plans\",\n\t\t\t\tkey: \"lesson_plan_dashboard\"\t\t\t\t\n\t\t\t},\n\t\t\t{\n\t\t\t\ticon: <SchoolIcon />,\n\t\t\t\ttext: \"Read Research Paper\",\n\t\t\t\tkey: \"google_scholar\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ticon: <ClassIcon />,\n\t\t\t\ttext: \"Origami in the Classroom\",\n\t\t\t\tkey: \"teaching_tips\"\n\t\t\t}\n\t\t]\n\t},\n\t{\t\n\t\ticon: <GitHubIcon />,\n\t\ttext: \"Source Code\",\n\t\tkey: \"github\"\n\t},\n];\n\nexport const initFoldState = {\n\t//place to store buffer geo vertex data\n\tpositions: [],\n\t//place to store buffer geo vertex colors\n\tcolors: [],\n\tindices: [],\n\tnodes: [], \n\tfaces: [], \n\tedges: [], \n\tcreases: [], \n\tvertices: [], //indexed vertices array\n\tfold: null,\n\tcreaseParams: null\n}\n\n/*\nexport const Lines = {\n    U: hingeLines,\n    M: mountainLines,\n    V: valleyLines,\n    C: cutLines,\n    F: facetLines,\n    B: borderLines\n};\n*/\n","/home/bbor/dev/origamiodyssey/src/anim/Scene.js",["134","135","136","137","138","139","140","141","142","143","144"],"/**\n * FILENAME: Scene.js \n *\n * DESCRIPTION: Renders the basic of the animation. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\n// Threejs - 3D Animation\nimport { Canvas, useFrame, useThree, useLoader, extend } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n// React Spring - animation\nimport { useUpdate, useSpring, useSprings, animated, config }  from 'react-spring';\n// import { a, useTransition, Transition } from '@react-spring/three';\n\nimport { Paper } from \"./Paper\";\nimport { Folds } from \"./../infra/constants\";\nimport { setLayoutState, setFoldState } from \"./../infra/actions\";\n\n// Extend will make OrbitControls available as a JSX element called orbitControls for us to use.\nextend({ OrbitControls });\n\nconst CameraControls = () => {\n\t// Get a reference to the Three.js Camera, and the canvas html element.\n\t// We need these to setup the OrbitControls class.\n\t// https://threejs.org/docs/#examples/en/controls/OrbitControls\n\tconst {\n\t\tcamera,\n\t\tgl: { domElement }\n\t} = useThree();\n\n\tconst controls = useRef();\n\n\tuseFrame(({ gl }) => {\n\t\tgl.setClearColor(0xf1f4f4, 1);\n\t\treturn controls.current.update();\n\t});\n\n\treturn (\n\t\t<orbitControls\n\t\t\tref={controls}\n\t\t\targs={[camera, domElement]}\n\t\t\tenableZoom={false}\n\t\t\tenableRotate={true}\n\t\t\tenableDolly={false}\n\t\t\tmouseButtons={{\n\t\t\t\tRIGHT: THREE.MOUSE.ROTATE\n\t\t\t}}\n\t\t\t// maxAzimuthAngle={Math.PI / 4}\n\t\t\tmaxPolarAngle={Math.PI * 3 / 4}\n\t\t\t// minAzimuthAngle={-Math.PI / 4}\n\t\t\tminPolarAngle={-Math.PI * 3 / 4}\n\t\t/>\n\t);\n};\n\n/**\n * Main component.\n */\nexport const Scene = props => {\n\tconst { initFold, foldLastUpdated, paperSize, layoutState, layoutStateHash, foldState, foldStateHash, setFoldState, editorState, editorStateHash } = props;\n\tconst [overlays, setOverlays] = useState({});\n\n\tconst ctrlOverlay = ({ show, name, component }) => {\n\t\tconst newObj = Object.assign({}, overlays);\n\t\tif (show && !newObj[name]) {\n\t\t\tnewObj[name] = component;\n\t\t} else if (!show && newObj[name]) {\n\t\t\tdelete newObj[name];\n\t\t}\n\n\t\tsetOverlays(newObj);\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Canvas camera={{fov: 100, position: [0, 1.8, 0]}} onCreated={state => state.gl.setClearColor(\"red\")} >\n\t\t\t\t<spotLight position={[5, 10, 0]} color='#f1f1ff' distance={100} penumbra={0.75} decay={2} />\n\t\t\t\t<CameraControls />\n\n\t\t\t\t<Paper\n\t\t\t\t\tposition={[0, 0, 0]}\n\t\t\t\t\tscale={10}\n\t\t\t\t\tinitFold={initFold}\n\t\t\t\t\tfoldLastUpdated={foldLastUpdated}\n\t\t\t\t\tfoldKey={layoutState.curFold}\n\t\t\t\t\tfoldState={foldState}\n\t\t\t\t\tfoldStateHash={foldStateHash}\n\t\t\t\t\teditorState={editorState}\n\t\t\t\t\teditorStateHash={editorStateHash}\n\t\t\t\t\tsetFoldState={setFoldState}\n\t\t\t\t\tinitStep={-1}\n\t\t\t\t\tctrlOverlay={ctrlOverlay}\n\t\t\t\t/>\n\t\t\t</Canvas>\n\t\t\t{Object.values(overlays)}\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState,\n\t\tlayoutStateHash: state.appReducer.layoutState.hash,\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash,\n\t\teditorState: state.appReducer.editorState,\n\t\teditorStateHash: state.appReducer.editorState.hash,\n\t};\n};\n\nexport default connect(mapStateToProps, { setLayoutState, setFoldState })(Scene);\n","/home/bbor/dev/origamiodyssey/src/infra/appReducer.js",["145"],"/**\n * FILENAME: appReducer.js \n *\n * DESCRIPTION: Handles state update for all layout actions.\n */\n\nimport { initAppReducerState, Actions } from \"./constants\";\n\nconst finalInitState = JSON.parse(JSON.stringify(initAppReducerState));\n\nexport const appReducer = (state = finalInitState, action) => {\n\tlet newState = Object.assign({}, state);\n\n\tswitch (action.type) {\n\t\tcase Actions.SET_SHOW_NAV_DRAWER:\n\t\t\t// If passed a val set to that, otherwise toggle\n\t\t\tnewState.showNavDrawer = (action.payload !== undefined) ? action.payload : !newState.showNavDrawer;\n\t\t\tbreak;\n\t\tcase Actions.SET_LAYOUT_STATE:\n\t\t\tconsole.log(\"[SET_LAYOUT_STATE]\", action.payload, initAppReducerState);\n\t\t\tObject.assign(newState.layoutState, action.payload || initAppReducerState.layoutState);\n\t\t\tnewState.layoutState.hash++;\n\t\t\tbreak;\n\t\tcase Actions.SET_FOLD_STATE:\n\t\t\tconsole.log(\"[SET_FOLD_STATE]\", action.payload);\n\t\t\tObject.assign(newState.foldState, action.payload || initAppReducerState.foldState);\n\t\t\tnewState.foldState.hash++;\n\t\t\tbreak;\n\t\tcase Actions.SET_EDITOR_STATE:\n\t\t\tconsole.log(\"[SET_EDITOR_STATE]\", action.payload);\n\t\t\tObject.assign(newState.editorState, action.payload || initAppReducerState.editorState);\n\t\t\tnewState.editorState.hash++;\n\t\t\tbreak;\n\t}\n\n\treturn newState;\n}","/home/bbor/dev/origamiodyssey/src/style/theme.js",["146"],"/home/bbor/dev/origamiodyssey/src/anim/Paper.js",["147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163"],"/**\n * FILENAME: Paper.js\n *\n * DESCRIPTION: Simulates a piece of paper.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\n\n// Threejs - 3D Animation\nimport { Canvas, useFrame, useThree, useLoader, extend } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { Line } from '@react-three/drei';\n\n// React Spring - animation\nimport { a, useSpring } from '@react-spring/three';\n// import { a, useTransition, Transition } from '@react-spring/three';\nimport { Chip } from '@material-ui/core';\n\nimport useStyles from './../style/theme';\nimport { collectStepsForLevel } from './../infra/utils';\n\n\nexport const Paper = props => {\n\tconst {\n\t\tposition,\n\t\tscale,\n\t\tctrlOverlay,\n\t\tinitStep,\n\t\tinitFold,\n\t\tfoldLastUpdated,\n\t\tfoldKey,\n\t\tfoldState,\n\t\tfoldStateHash,\n\t\tsetFoldState,\n\t\teditorState,\n\t\teditorStateHash\n\t} = props;\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\tconst [instructions, setInstructions] = useState(null);\n\tconst [prevStep, setPrevStep] = useState(initStep);\n\n\tconst rotation = useRef([0, 0, 0]);\n\tconst faceGeometry = useRef(null);\n\tconst creasedEdges = useRef(new Set());\n\tconst fold = useRef(null);\n\tconst classes = useStyles();\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\tconst recursiveTriangulation = (curFace, foldObj) => {\n\t\t// If this is a triangle (or invalid...), just push it as is\n\t\tif (curFace.length <= 3) {\n\t\t\tfoldObj.faces_vertices.push(curFace);\n\t\t\t// Else push a new triangle, and call this function again on the new shape\n\t\t} else {\n\t\t\tconst [cutIdx] = curFace.splice(1, 1);\n\t\t\tfoldObj.faces_vertices.push([curFace[0], cutIdx, curFace[1]]);\n\t\t\tfoldObj.edges_vertices.push([curFace[0], curFace[1]]);\n\t\t\trecursiveTriangulation(curFace, foldObj);\n\t\t}\n\t};\n\n\tconst setFoldObj = newFold => {\n\t\tlet foldObj = JSON.parse(JSON.stringify(newFold));\n\t\t// Calculate the boundaries of the 2D shape\n\t\tconst maxes = [0, 2].map(i =>\n\t\t\tfoldObj.vertices_coords.reduce((max, coords) => (Math.abs(coords[i]) > max ? Math.abs(coords[i]) : max), 0)\n\t\t);\n\n\t\t// Re-scale the model to a unit square (1 unit x 1 unit)\n\t\tfoldObj.vertices_coords = foldObj.vertices_coords.map(\n\t\t\tcoords => new THREE.Vector3(coords[0] / maxes[0], 0, coords[2] / maxes[1])\n\t\t);\n\n\t\tfoldObj.edges_foldAngle = foldObj.edges_vertices.map(() => 180);\n\n\t\t// TODO: Validate that all the angles in every face are acute\n\n\t\t// Triangulate all faces\n\t\tfoldObj.faces_vertices = [];\n\t\tnewFold.faces_vertices.forEach((face, faceIdx) => {\n\t\t\tlet curFace = [...face];\n\t\t\trecursiveTriangulation(curFace, foldObj);\n\t\t});\n\n\n\t\tfoldObj.faces_normals = foldObj.faces_vertices.map(face => new THREE.Vector3(0, 1, 0));\n\n\t\tconsole.log('[setFoldObj]', { maxes, foldObj });\n\t\tfold.current = foldObj;\n\t};\n\n\t// Nested recursive function to calculate the depth of the instruction tree\n\tconst calcMaxLevel = inst => {\n\t\tif (!inst.length) {\n\t\t\t// Error case\n\t\t\treturn 0;\n\t\t} else if (Array.isArray(inst[0])) {\n\t\t\t// Recursive case: Return 1 plus the height of the tallest subtree\n\t\t\treturn 1 + Math.max(...inst.map(childInst => calcMaxLevel(childInst)));\n\t\t} else {\n\t\t\t// Base case: leaf node\n\t\t\treturn 1;\n\t\t}\n\t};\n\n\t/*\n\t * Reads the hierarchical instructions, collecting some descriptive values and initializing state.\n\t * This task is greatly simplified by mandating that any one node of the instructional tree\n\t * contain EITHER two integer values, or 1+ subnodes. Any node with subnodes may not have integer values.\n\t */\n\tconst readInstructionsIntoState = inst => {\n\t\treturn {\n\t\t\tmaxLevel: calcMaxLevel(inst),\n\t\t\tselectedLevel: 0,\n\t\t\tstepIndex: -1,\n\t\t\tmaxSteps: stepArray.length\n\t\t};\n\t};\n\n\tconst refreshFaceVertices = () => {\n\t\tif (!fold.current) {\n\t\t\treturn;\n\t\t}\n\n\t\t// NOTE: 9 = 3 coords per vert * 3 vals per coord (such as x,y,z or r,g,b)\n\t\tlet vertices = new Float32Array(9 * fold.current.faces_vertices.length);\n\n\t\tfold.current.faces_vertices.forEach((face, faceIdx) => {\n\t\t\tface.forEach((vertIdx, faceVertIdx) => {\n\t\t\t\tconst coords = fold.current.vertices_coords[vertIdx];\n\t\t\t\tconst startIdx = (faceIdx * 9) + (faceVertIdx * 3);\n\n\t\t\t\t// Copy over one vertex\n\t\t\t\tvertices[startIdx] = coords.x;\n\t\t\t\tvertices[startIdx + 1] = coords.y;\n\t\t\t\tvertices[startIdx + 2] = coords.z;\n\t\t\t});\n\t\t});\n\n\t\tfaceGeometry.current.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\t}\n\n\t/*\n\t * Initializes the fold state if possible, which involves reading the instructional hierarchy shape.\n\t */\n\tconst initFoldState = () => {\n\t\tconsole.log('[initFoldState]', initFold);\n\t\tif (!initFold) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetFoldObj(initFold);\n\n\t\t// NOTE: 9 = 3 coords per vert * 3 vals per coord (such as x,y,z or r,g,b)\n\t\tfaceGeometry.current = new THREE.BufferGeometry();\n\t\tlet vertices = new Float32Array(9 * fold.current.faces_vertices.length);\n\t\tlet normals = new Float32Array(9 * fold.current.faces_vertices.length);\n\t\tlet colors = new Float32Array(9 * fold.current.faces_vertices.length);\n\n\t\tfold.current.faces_vertices.forEach((face, faceIdx) => {\n\t\t\tface.forEach((vertIdx, faceVertIdx) => {\n\t\t\t\tconst coords = fold.current.vertices_coords[vertIdx];\n\t\t\t\tconst startIdx = (faceIdx * 9) + (faceVertIdx * 3);\n\n\t\t\t\t// Copy over one vertex\n\t\t\t\tvertices[startIdx] = coords.x;\n\t\t\t\tvertices[startIdx + 1] = coords.y;\n\t\t\t\tvertices[startIdx + 2] = coords.z;\n\n\t\t\t\tnormals[startIdx] = 0;\n\t\t\t\tnormals[startIdx + 1] = -1;\n\t\t\t\tnormals[startIdx + 2] = 0;\n\n\t\t\t\tcolors[startIdx] = 300;\n\t\t\t\tcolors[startIdx + 1] = 100;\n\t\t\t\tcolors[startIdx + 2] = 100;\n\t\t\t});\n\t\t});\n\n\t\tconsole.log({ vertices, normals, colors });\n\n\t\t// OPTIONALL DEBUGS\n\t\t// for (let i = 0; i < vertices.length; i += 9) {\n\t\t// \tconsole.log(\n\t\t// \t\t`TRI: [(${vertices[i]}, ${vertices[i] + 2}), (${vertices[i + 3]}, ${vertices[i] + 5}), (${\n\t\t// \t\t\tvertices[i] + 6\n\t\t// \t\t}, ${vertices[i] + 8})]`\n\t\t// \t);\n\t\t// }\n\n\t\tfaceGeometry.current.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\t\tfaceGeometry.current.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n\t\tfaceGeometry.current.setAttribute('color', new THREE.BufferAttribute(colors, 3, true));\n\n\t\tif (fold.current.instructions) {\n\t\t\tsetFoldState(readInstructionsIntoState(fold.current.instructions));\n\t\t}\n\t};\n\n\tconst createMaterial = () => {\n\t\treturn new THREE.MeshNormalMaterial({\n\t\t\tflatShading: true,\n\t\t\t// roughness: 1,\n\t\t\tattach: 'material',\n\t\t\t// color: '#ef626c',\n\t\t\tside: THREE.DoubleSide\n\t\t});\n\t};\n\n\t/**\n\t * The ultimate goal of this function is to update vertex positions.\n\t * IDEA: Handle one folding edge at a time, then propagate out following neighbors\n\t */\n\tconst performInstructions = () => {\n\t\tlet curStep = foldState.stepIndex;\n\t\tif (curStep < -1 || curStep >= foldState.maxSteps) {\n\t\t\tcurStep = -1;\n\t\t}\n\t\tconst diff = curStep - prevStep;\n\t\tconsole.log('[performInstructions] ', `${prevStep} + ${diff} = ${curStep}`);\n\n\t\tif (diff > 0) {\n\t\t\tfor (let i = 1; i <= diff; i++) {\n\t\t\t\tperformCommands(fold.current, stepArray[prevStep + i], new Set(), );\n\t\t\t}\n\t\t} else {\n\n\t\t}\n\n\t\trefreshFaceVertices();\n\n\t\tsetPrevStep(curStep);\n\t};\n\n\tconst degToRad = degree => {\n\t\treturn degree * Math.PI / 180;\n\t}\n\t/**\n\t * Find the faces that include the given edge.\n\t * Note that this was built specifically for purposes of rotation (i.e. folding),\n\t * so it will use the isLhs parameter to decide which side of the edge to rotate\n\t */\n\tconst faceToFoldForEdge = (faces, edge, isLhs) => {\n\t\treturn faces.findIndex((face, faceIdx) => {\n\t\t\t// If this face doesn't include the edge, ignore it\n\t\t\tif (!face.includes(edge[0]) || !face.includes(edge[1])) {\n\t\t\t\treturn false;\t\n\t\t\t}\n\n\t\t\t// Else check if this face is on the right side \n\t\t\t// NOTE: this is using the initFold object, so it's looking at a flat version\n\t\t\tconst start = initFold.vertices_coords[edge[0]];\n\t\t\tconst end = initFold.vertices_coords[edge[1]];\n\t\t\tconst third = initFold.vertices_coords[face.find(vertIdx => !edge.includes(vertIdx))];\n\n\t\t\tconst d = (third[0] - start[0]) * (end[2] - start[2]) - (third[2] - start[2]) * (end[0] - start[0]);\n\t\t\treturn isLhs ? d > 0 : d < 0;\n\t\t});\n\t};\n\n\t/**\n\t * Helper function to check if the two vectors are within the same line.\n\t */\n\tconst isSameLine = (lhs, rhs) => {\n\t\tconst crossLen = new THREE.Vector3().crossVectors(lhs, rhs);\n\t\treturn crossLen.length() < 0.0001; // Account for floating point errors\n\t}\n\n\n\t/**\n\t * This is a very complex step, and best understood by just reading the comments and section titles.\n\t * his is taking in an existing triangle (positioned as it actually is in the model\n\t * at the moment), the vertex of some triangle that's adjacent to it, and finally an angle in degrees. With this,\n\t * this function will figure out where the point would be if you folded this edge completly flat, then rotating the\n\t * new triangle by the amount given.\n\t *\n\t * To make a long story short, this is placing a vertex based on existing ones that we know are in the right place already.\n\t * \n\t * @props fold - the fold object, which will be mutated by this method\n\t * @props vertIdx - the index of the vertex that's being placed\n\t * @props edge - array of the two vertIdxs that make up the edge b/w the two faces\n\t * @props angle - the angle to rotate the second face around the edge by. \n\t */\n\tconst rotateVertAroundEdge = (fold, vertIdx, edge, angle) => {\n\t\tconst actualXAxis = new THREE.Vector3(1, 0, 0);\n\n\t\t// Read in the positions of the vertices of the edge that we're rotating around \n\t\tconst start = fold.vertices_coords[edge[0]];\n\t\tconst end = fold.vertices_coords[edge[1]];\n\n\t\t// ------------------------------------------------------------------------------------------\n\t\t// SECTION 1: Figure out where this point would be if the angle were 0 (like in initial fold)\n\t\t// ------------------------------------------------------------------------------------------\n\t\t// Find the plane formed by the other side of this edge\n\t\tconst otherFace = fold.faces_vertices.find(face => face.includes(edge[0]) && face.includes(edge[1]) && !face.includes(vertIdx));\n\t\tconst otherVert = otherFace.find(otherVertIdx => !edge.includes(otherVertIdx));\n\t\tif (otherFace === null || otherVert === null) {\n\t\t\tconsole.log(\"[rotateVertAroundEdge] ERR: Couldn't find other plane to base rotation in.\");\n\t\t\treturn;\n\t\t}\n\t\tconst plane = new THREE.Plane().setFromCoplanarPoints(start, end, fold.vertices_coords[otherVert]);\n\n\t\tconst planeOrigin = new THREE.Vector3().copy(plane.normal).multiplyScalar(plane.constant);\n\t\tconst norm = new THREE.Vector3().copy(plane.normal);\n\n\t\t// Get the translation vector from the original plane (i.e. 0,1,0)\n\t\tconst initStart = new THREE.Vector3(...initFold.vertices_coords[edge[0]]);\n\t\tconst initThird = new THREE.Vector3(...initFold.vertices_coords[vertIdx]);\n\t\tconst diffInPlane = new THREE.Vector3().subVectors(initThird, initStart);\n\n\t\t// Before we use the initStart for figuring out angle, check if this vector is the X axis - \n\t\t// we can use any other vector, we crossproduct with this exact vector later\n\t\t// Figure out which of the other two points we can use - it's a triangle, so one will work\n\t\tconst vecInTransformedPlane = new THREE.Vector3(); \n\n\t\tif (!isSameLine(start, actualXAxis)) {\n\t\t\t// Just use first one we found\n\t\t\tvecInTransformedPlane.copy(start);\n\t\t} else if (!isSameLine(fold.vertices_coords[otherVert], actualXAxis)) {\n\t\t\t// Set to the third point\n\t\t\tvecInTransformedPlane.copy(fold.vertices_coords[otherVert]);\n\t\t} else {\n\t\t\t// Set to end of the edge\n\t\t\tvecInTransformedPlane.copy(end);\n\t\t}\n\n\t\t// Get the angle between the X axis ([1, 0, 0]) and the vector from the origin to the start vertex\n\t\tlet axisRotation = initStart.angleTo(actualXAxis);\n\n\t\t// If it's in the back quadrants, `angleTo` gets lazy and measures the wrong direction (to the line, not the vector)\n\t\tif (initStart.z < 0) {\n\t\t\taxisRotation = (2 * Math.PI) - axisRotation;\n\t\t\t// axisRotation = -axisRotation;\n\t\t}\n\n\t\t// We know the start is in the plane, so the x Axis starts as that\n\t\tconst xAxis = new THREE.Vector3().subVectors(vecInTransformedPlane, planeOrigin).normalize();\n\n\t\t// Use this fake x Axis to get a Z axis\n\t\tconst zAxis = new THREE.Vector3().crossVectors(xAxis, plane.normal).normalize();\n\n\t\t// console.log(`(${xAxis.x}, ${xAxis.y}, ${xAxis.z}), (${zAxis.x}, ${zAxis.y}, ${zAxis.z})`);\n\n\t\t// Rotate both the X and Z axiis around the Y (the normal) to get correct vals\n\t\txAxis.applyAxisAngle(plane.normal, axisRotation);\n\t\tzAxis.applyAxisAngle(plane.normal, axisRotation);\n\n\t\t// We don't care about the y axis, since the paper is flat during this step\n\n\t\t// Transform this translation vector to the new coordinate system \n\t\tconst newCoords = new THREE.Matrix3().set(\n\t\t\txAxis.x, plane.normal.x, zAxis.x,\n\t\t\txAxis.y, plane.normal.y, zAxis.y,\n\t\t\txAxis.z, plane.normal.z, zAxis.z\n\t\t);\n\n\t\t// Invert the matrix, so we can use it to translate from fake coords to real ones \n\t\t// newCoords.invert();\n\n\t\t// NORMAL1 = [0, 1, 0]\n\t\t// Add the transformed vector to the start point to \n\t\tconst actualDiff = new THREE.Vector3().copy(diffInPlane).applyMatrix3(newCoords);\n\t\t// const actualDiff = new THREE.Vector3().copy(diffInPlane);\n\n\t\t// The third point starts off assuming no rotation\n\t\t// const third = new THREE.Vector3().addVectors(start, actualDiff).add(planeOrigin);\n\t\tconst third = new THREE.Vector3().addVectors(start, actualDiff);\n\n\t\tconsole.log(\"[rotateVertAroundEdge]\", {edge, planeOrigin, vecInTransformedPlane, initStart, initThird, diffInPlane, actualDiff, axisRotation, xAxis, zAxis, newCoords, norm, third, angle, start, end, otherVert})\n\n\t\t// ----------------------------------------------------\n\t\t// SECTION 2: Rotate an existing point around this edge\n\t\t// ----------------------------------------------------\n\t\tlet targetVec;\n\n\t\t// If the paper is flat, we can skip this step\n\t\tif (Math.abs(angle) === 180) {\n\t\t\ttargetVec = third;\n\t\t} else {\n\t\t\t// Setup vectors for edge (start --> end), and the target (start --> third)\n\t\t\tconst edgeDirection = new THREE.Vector3(end.x - start.x, end.y - start.y, end.z - start.z);\n\t\t    edgeDirection.normalize();\n\t\t    targetVec = new THREE.Vector3(third.x - start.x, third.y - start.x, third.z - start.z);\n\n\t\t    // Rotate the target vector around the edge\n\t\t   \ttargetVec.applyAxisAngle(edgeDirection, degToRad(180 - angle));\n\n\t\t   \t// Add the start back to the target, giving us the actual final location\n\t\t   \ttargetVec.add(start);\n\t\t}\n\n\t    // Store the vertex coords for edges + vertices\n\t    fold.vertices_coords[vertIdx] = targetVec;\n\t};\n\n\t/*\n\t * Applies steps to fold the paper iteratively. The crux of this component - see Paper Engine design document.\n\t * @param fold - the object to be modified\n\t * @param steps - array of instructions\n\t */\n\tconst performCommands = (fold, cmds, vertsMoved = new Set(), edgesMoved = new Set(), level = 0) => {\n\t\tconsole.log(\"[performCommands] RUN: \", fold && fold.vertices_coords, cmds, level)\n\t\tif (!fold || cmds === undefined || level > 2) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet todoEdges = [];\n\t\tif (!Array.isArray(cmds)) {\n\t\t\tcmds = [ cmds ];\n\t\t}\n\n\t\tcmds.forEach((cmd, cmdIdx) => {\n\t\t\t// Parse the command - 0 & 1 are verts, 2 is foldAngle, and 3 is optional args\n\t\t\tconst args = cmd.length === 4 ? cmd[3] : {};\n\t\t\tconst edgeVerts = [cmd[0], cmd[1]];\n\t\t\tconst edgeIdx = fold.edges_vertices.find(edge => edge.includes(cmd[0]) && edge.includes(cmd[1]));\n\n\t\t\t// Get the face that includes this edge on the right or left hand side, depending on the cmd args\n\t\t\tconst faceIdx = faceToFoldForEdge(fold.faces_vertices, edgeVerts, args.lhs);\n\n\t\t\t// Find the index of the the third point in this triangle\n\t\t\tconst thirdIdx = fold.faces_vertices[faceIdx].find(vertIdx => !edgeVerts.includes(vertIdx));\n\n\t\t\t// Stop if we should not move this edge, because it's at the end of the paper, or\n\t\t\t// we've already processed it during this step\n\t\t\tif (faceIdx === -1 || edgesMoved.has(edgeIdx) || vertsMoved.has(thirdIdx)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Remember to not move this edge or vertex again\n\t\t\tedgesMoved.add(edgeIdx);\n\t\t\tvertsMoved.add(edgeVerts[0]);\n\t\t\tvertsMoved.add(edgeVerts[1]);\n\t\t\tvertsMoved.add(thirdIdx);\n\n\t\t\t// Rotate the third vertex around this edge \n\t\t\tconsole.log(`Rotating ${thirdIdx} around (${edgeVerts[0]}, ${edgeVerts[1]} by ${cmd[2]})`)\n\t\t\trotateVertAroundEdge(fold, thirdIdx, edgeVerts, -cmd[2]);\n\n\t\t\t// Store the fold angle\n\t\t\tfold.edges_foldAngle[edgeIdx] = cmd[2];\n\n\t\t\t// Store the two other edges of the triangle\n\t\t\tconst edgeIndices = fold.edges_vertices.reduce((acc, edge, idx) => {\n\t\t\t\tif (edge.includes(edgeVerts[0]) && edge.includes(thirdIdx)) {\n\t\t\t\t\tacc[0] = idx;\n\t\t\t\t} else if (edge.includes(edgeVerts[1]) && edge.includes(thirdIdx)) {\n\t\t\t\t\tacc[1] = idx;\n\t\t\t\t}\n\t\t\t\treturn acc;\n\t\t\t}, [-1, -1]);\n\n\t\t\t// Get the angle to rotate these edges (last used, or default to 180)\n\t\t\tconst foldAngleOne = edgeIndices[0] < fold.edges_foldAngle.length ? fold.edges_foldAngle[edgeIndices[0]] : 180;\n\t\t\tconst foldAngleTwo = edgeIndices[1] < fold.edges_foldAngle.length ? fold.edges_foldAngle[edgeIndices[1]] : 180;\n\n\t\t\tconst edges = [\n\t\t\t\t[edgeVerts[0], thirdIdx, foldAngleOne],\n\t\t\t\t[thirdIdx, edgeVerts[1], foldAngleTwo]\n\t\t\t];\n\n\t\t\t// Inspect both of the other edges - if they're novel, fold them as well\n\t\t\t// NOTE: the edge pointed to by the associated edgeIdx might be reversed\n\t\t\t// from what we're looking at; this is okay, since we're just using the indices\n\t\t\t// to ensure uniqueness here, we don't care about that value\n\t\t\tedgeIndices.forEach((edgeIdx, triIdx) => {\n\t\t\t\tif (!edgesMoved.has(edgeIdx) && !isEdgeOfPaper(edgeIdx)) {\n\t\t\t\t\t// Mark this edge to be moved next \n\t\t\t\t\ttodoEdges.push(edges[triIdx]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t   \t// Remember that we folded this edge, to simulate paper creases\n\t\t   \tfold.edges_foldAngle[edgeIdx] = cmd[2];\n\t\t   \tif (cmd[2] !== 180) {\n\t\t\t   \tcreasedEdges.current.add(edgeIdx);\n\t\t   \t}\n\t\t});\n\n\t\t// Do recursive call for every edge in the todo list\n\t\tperformCommands(fold, todoEdges, vertsMoved, edgesMoved, level + 1);\n\t};\n\n\t/**\n\t * Returns true if this vertex is on the very edge of the paper, false otherwise.\n\t */\n\tconst vertIsOnEdge = vertCoords => (\n\t\tMath.abs(vertCoords[0]) === 1 || Math.abs(vertCoords[2]) === 1\n\t);\n\n\t/**\n\t * Returns true if this edge is on the very edge of the paper, false otherwise.\n\t */\n\tconst isEdgeOfPaper = (edgeIdx) => {\n\t\tconsole.log(\"[isEdgeOfPaper]\", edgeIdx);\n\t\t// If this edge was created during triangulization, it can't be an edge\n\t\tif (!initFold || edgeIdx >= initFold.edges_vertices.length) {\n\t\t\treturn false\n\t\t}\n\n\t\t// Find the coordinates of the vertices for this edge\n\t\tconst edge = initFold.edges_vertices[edgeIdx];\n\t\tconst coordsArr = edge.map(vertIdx => initFold.vertices_coords[vertIdx]);\n\n\t\t// If both vertices are on the edge, this edge is on the edge\n\t\treturn vertIsOnEdge(coordsArr[0]) && vertIsOnEdge(coordsArr[1]);\n\t};\n\n\t/**\n\t * Prints a THREE.Vector3 object.\n\t */\n\tconst printVect = vect => `${vect.x.toFixed(2)}, ${vect.y.toFixed(2)}, ${vect.z.toFixed(2)}`;\n\n\tconst hoverVert = (idx, event, show) => {\n\t\tctrlOverlay({\n\t\t\tshow,\n\t\t\tname: 'vert_' + idx,\n\t\t\tcomponent: (\n\t\t\t\t<Chip\n\t\t\t\t\tclassName={classes.vertLabel}\n\t\t\t\t\tstyle={{ left: event.pageX + 10, top: event.pageY + 10 + 64 }}\n\t\t\t\t\tlabel={fold.current && `${idx}: ${printVect(fold.current.vertices_coords[idx])}`}\n\t\t\t\t/>\n\t\t\t)\n\t\t});\n\t};\n\n\tconst buildStepArray = () => collectStepsForLevel(fold.current, foldState.selectedLevel);\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\tuseFrame(() => {\n\t\t// rotation.current = [0, rotation.current[1] + 1, 0];\n\t});\n\n\tconst material = useMemo(createMaterial, []);\n\tconst stepArray = useMemo(buildStepArray, [\n\t\t!fold.current || !fold.current.instructions,\n\t\tfoldKey,\n\t\tfoldState.selectedLevel\n\t]);\n\tuseEffect(performInstructions, [foldState.stepIndex]);\n\tuseEffect(initFoldState, [foldKey, stepArray.length]);\n\n\t// console.log('[Paper]', { stepArray, fold: fold.current });\n\n\tif (!initFold) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<group>\n\t\t\t{editorState.showEdges &&\n\t\t\t\tfold.current &&\n\t\t\t\tfold.current.edges_vertices.map((line, idx) => \n\t\t\t\t\t(\n\t\t\t\t\t\t(idx >= initFold.edges_vertices.length && !editorState.showTriangulations) || \n\t\t\t\t\t\t(creasedEdges.current.length > 0 && !creasedEdges.current.has(idx))\n\t\t\t\t\t) ? null : (\n\t\t\t\t\t\t<Line\n\t\t\t\t\t\t\tpoints={line.map(index => fold.current.vertices_coords[index])}\n\t\t\t\t\t\t\tcolor={(idx < initFold.edges_vertices.length) ? editorState.edgeHighlights.includes(idx) ? 'red' : 'black' : 'yellow'}\n\t\t\t\t\t\t\tlineWidth={1}\n\t\t\t\t\t\t\tdashed={idx >= initFold.edges_vertices.length}\n\t\t\t\t\t\t\tmaterial={material}\n\t\t\t\t\t\t\tdashSize={0.1}\n\t\t\t\t\t\t\tgapSize={0.1}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t{editorState.showVertices &&\n\t\t\t\tfold.current &&\n\t\t\t\tfold.current.vertices_coords.map((vert, idx) => (\n\t\t\t\t\t<a.mesh\n\t\t\t\t\t\tposition={vert}\n\t\t\t\t\t\tonPointerEnter={e => hoverVert(idx, e, true)}\n\t\t\t\t\t\tonPointerLeave={e => hoverVert(idx, e, false)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<sphereBufferGeometry attach=\"geometry\" args={[0.02, 8, 8]} />\n\t\t\t\t\t\t<meshStandardMaterial\n\t\t\t\t\t\t\tattach=\"material\"\n\t\t\t\t\t\t\troughness={0.5}\n\t\t\t\t\t\t\tcolor={editorState.vertexHighlights.includes(idx) ? 'red' : 'black'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</a.mesh>\n\t\t\t\t))}\n\t\t\t{editorState.showFaces && fold.current && faceGeometry.current && (\n\t\t\t\t<a.mesh\n\t\t\t\t\tgeometry={faceGeometry.current}\n\t\t\t\t\tmaterial={material}\n\t\t\t\t\t>\n\t\t\t\t</a.mesh>\n\t\t\t)}\n\t\t</group>\n\t);\n};\n\n/*\nFOLDING ENGINE\n1. Description\n\tThe function of this \"engine\", which basically means a stateful algo here, is to manipulate three.js objects.\n\tThus, the output of all of this are the props used in the return statement of the <Paper/> component.\n\tThe initial input is the initFold object, which is a FOLD json object with special step components.\n\tAn index into the step array is maintained, and any transitions result in \n2. Function Structure\n\t1.1. stepTo\n\n*/\n","/home/bbor/dev/origamiodyssey/src/infra/actions.js",[],"/home/bbor/dev/origamiodyssey/src/layout/NavDrawer.js",["164","165","166","167","168","169","170"],"/**\n * FILENAME: NavDrawer.js \n *\n * DESCRIPTION: A sidebar-based nav tree, custom built to take advantage of react-spring.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { SwipeableDrawer, Button, List, Divider, ListItem, } from '@material-ui/core';\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\n\nimport { Pages, initNavTree } from \"./../infra/constants\";\nimport { setShowNavDrawer, setLayoutState } from \"./../infra/actions\";\nimport useStyles from \"./../style/theme\";\n\nexport const NavDrawer = props => {\n\tconst { page, showNavDrawer, setShowNavDrawer, setLayoutState } = props;\n\n\tconst [navTreeData, setNavTree] = useState(initNavTree);\n\tconst styles = useStyles();\n\n\tconst findNode = (key, node = navTreeData, path = []) => {\n\t\t// Root case - recurse into array of subtrees\n\t\tif (Array.isArray(node)) {\n\t\t\treturn node.reduce((acc, childNode) => {\n\t\t\t\tif (!acc) {\n\t\t\t\t\tconst ret = findNode(key, childNode, path);\n\n\t\t\t\t\tif (ret && ret[1]) {\n\t\t\t\t\t\tacc = ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn acc;\n\t\t\t}, null) || [null, null];\n\n\t\t// Success case - we found the node\n\t\t} else if (node.key === key) {\n\t\t\treturn [[node.key, ...path], node];\n\n\t\t// Child case - recurse into children\n\t\t} else if (node.children) {\n\t\t\treturn node.children.reduce((acc, childNode) => {\n\t\t\t\tif (!acc) {\n\t\t\t\t\tconst [foundPath, foundNode] = findNode(key, childNode, path);\n\n\t\t\t\t\tif (foundNode) {\n\t\t\t\t\t\tacc = [[key, ...foundPath], foundNode];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, null) || [null, null];\n\t\t}\n\n\t\t// Failure case - return null\n\t\treturn [[], null];\n\t}\n\n\tconst setNode = (path, field, val, node = navTreeData) => {\n\t\tlet newNavTree = [...navTreeData];\n\n\t\t// Nested function that recurses through the tree to modify a node\n\t\tconst recursiveSet = (path, node = newNavTree) => {\n\t\t\tif (!path || path.length === 0) {\n\t\t\t\tnode[field] = val; \n\t\t\t} else if (Array.isArray(node)) {\n\t\t\t\tlet child = node.find(e => e.key === path[0]);\n\t\t\t\trecursiveSet(path.slice(1), child);\n\t\t\t} else if (node.children) {\n\t\t\t\tlet child = node.children.find(e => e.key === path[0]);\n\t\t\t\trecursiveSet(path.slice(1), child);\n\t\t\t}\n\t\t}\n\n\t\trecursiveSet(path);\n\t\tsetNavTree(newNavTree);\n\t}\n\n\tconst handleNavDrawerSelect = (event, key) => {\n\t\tif (!key) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the key is a page ID, just take us to that page\n\t\tif (Object.keys(Pages).includes(key)) {\n\t\t\tsetLayoutState({ curPage: key });\n\t\t\treturn;\n\t\t} \n\n\t\t// If the node has children, show or hide them on parent click\n\t\tconst [path, node] = findNode(key);\n\t\tif (node.children) {\n\t\t\tsetNode(path, \"expanded\", !node.expanded);\n\t\t\treturn;\n\t\t}\n\n\t\t// Else handle key-specific behavior (i.e. everything else)\n\t\tswitch (key) {\n\t\t\tcase \"github\":\n\t\t\t\twindow.open('https://github.com/robbwdoering/origamiodyssey', '_blank');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unhandled navDrawer option\", key);\n\t\t}\n\n\t}\n\n\tconst renderNavNode = (node, nestedLevel = 0) => {\n\t\tif (!node || node.hidden) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Nested component that just renders one node, with no regard for hierarchy beyond tracking nestedLevel\n\t\tconst Node = ({ node, nestedLevel }) => {\n\t\t\tconst icon = node.icon || (node.children ? (node.expanded ? <ArrowDropDownIcon /> : <ArrowRightIcon />) : null );\n\t\t\tconsole.log(\"Key: \", node.key)\n\n\t\t\treturn (\n\t\t\t\t<ListItem \n\t\t\t\t\tclassName={`nested-level-${nestedLevel}`}\n\t\t\t\t\tkey={node.key}\n\t\t\t\t\tbutton\n\t\t\t\t\tonClick={e => handleNavDrawerSelect(e, node.key)}\n\t\t\t\t>\n\t\t\t\t\t{icon && <ListItemIcon> {icon} </ListItemIcon>}\n\t\t\t\t\t<ListItemText> {node.text} </ListItemText>\n\t\t\t\t</ListItem>\n\t\t\t);\n\t\t};\n\n\t\tlet ret = [<Node key={\"node_\"+node.key} node={node} nestedLevel={nestedLevel} />];\n\n\t\tif (node.children && node.expanded) {\n\t\t\tnode.children.forEach(child => {\n\t\t\t\tret = ret.concat(renderNavNode(child, nestedLevel + 1));\n\t\t\t});\n\t\t};\n\n\t\treturn ret;\n\t};\n\n\treturn (\n\t\t<SwipeableDrawer\n\t\t\tanchor='left'\n\t\t\tkey=\"swipable-drawer\"\n\t\t\tclasses={{\n\t\t\t\troot: styles.navDrawerRoot,\n\t\t\t\tpaper: styles.navDrawerPaper\n\t\t\t}}\n\t\t\topen={showNavDrawer}\n\t\t\tonOpen={() => setShowNavDrawer(true)}\n\t\t\tonClose={() => setShowNavDrawer(false)}\n\t\t>\n\t\t\t<List key=\"main-list\">\n\t\t\t\t{navTreeData.reduce((acc, node) => {\n\t\t\t\t\tacc = acc.concat(renderNavNode(node));\n\t\t\t\t\treturn acc;\n\t\t\t\t}, [])}\n\t\t\t</List>\n\t\t</SwipeableDrawer>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tshowNavDrawer: state.appReducer.showNavDrawer \n\t};\n};\n\nexport default connect(mapStateToProps, {setShowNavDrawer})(NavDrawer);","/home/bbor/dev/origamiodyssey/src/layout/pages/ModelSelect.js",["171","172","173","174","175","176","177","178","179","180"],"/**\n * FILENAME: ModelSelect.js\n *\n * DESCRIPTION: This page allows the user to browse through cards, read details on models, and select one to fold.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config } from 'react-spring';\n\nimport {\n\tDivider,\n\tTypography,\n\tCardMedia,\n\tCardActionArea,\n\tCardActions,\n\tCardContent,\n\tButton,\n\tCard,\n\tChip\n} from '@material-ui/core';\n\nimport useStyles from './../../style/theme';\nimport { Folds, Pages } from './../../infra/constants';\nimport { setLayoutState } from './../../infra/actions';\nconst AnimatedCard = animated(Card);\n\nexport const ModelSelect = props => {\n\tconst { layoutState, setLayoutState } = props;\n\tconst classes = useStyles();\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\t// Used to track each \"placeholder\" element\t\n\t// const [cardRefs, setCardRefs] = useState([]);\n\n\t// Used to track which card is currently open\n\tconst [activeIndex, setActiveIndex] = useState(-1);\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\n\t/**\n\t * Reads the list of all cards, and decides which to include.\n\t * Note that this is likely to grow suddenly and quickly in complexity as soon as we start\n\t * including folds from other sources, or, god forbid, external REST sources.\n\t * @return an array of Fold objects - see constants.js for format\n\t */\n\tconst filterCardList = () => {\n\t\treturn Object.keys(Folds).filter(() => true);\n\t};\n\n\t/**\n\t * Handles a click on one of the cards - just prompts update and relies on hooks to do actual work.\n\t */\n\tconst handleCardClick = (event, index) => {\n\t\tsetActiveIndex(activeIndex === index ? -1 : index);\n\t};\n\n\t/**\n\t * Open the fold page with the supplied model name, closing this page.\n\t */\n\tconst openFold = foldKey => {\n\t\tsetLayoutState({\n\t\t\tpage: Pages.Fold,\n\t\t\tcurFold: foldKey\n\t\t});\n\t};\n\n\t/**\n\t * Recreate the refs array, reusing elements. Note that this algo doesn't support reordering\n\t */\n\t// const updateCardRefs = () => {\n\t// \tsetCardRefs(elRefs =>\n\t// \t\tArray(cardList.length)\n\t// \t\t\t.fill()\n\t// \t\t\t.map((el, i) => cardRefs[i] || createRef())\n\t// \t);\n\t// };\n\n\t/**\n\t * A subcomponent that displays one card. This component needs to grow and shrink without affecting html\n\t * layout styling, so it relies on a placeholder div that only suggests a shape to the actual, absolute, Card.\n\t */\n\tconst ModelCard = props => {\n\t\tconst { foldEntry, name, cardKey, index, isActive } = props;\n\t\tconst [posHash, setPosHash] = useState(0);\n\t\tconst ref = useRef();\n\n\t\t/**\n\t\t * Pass the click event on to the parent function to open a fold page.\n\t\t */\n\t\tconst handleFoldClick = e => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\n\t\t\topenFold(cardKey);\n\t\t};\n\n\t\t/**\n\t\t * Sub-subcomponent to show the label for a row on this card. This probably could be abstracted out, but it \n\t\t * doesn't seem worth it.\n\t\t */\n\t\tconst CardLabel = ({ text }) => (\n\t\t\t<React.Fragment>\n\t\t\t\t<Typography className={classes.modelCard_label} variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\t{text}\n\t\t\t\t</Typography>\n\t\t\t\t<Divider />\n\t\t\t</React.Fragment>\n\t\t);\n\n\t\t// INNER LIFECYCLE\n\n\t\t// Dynamically calculate the target size of the card\n\t\tconst style = useMemo(\n\t\t\t() => ({\n\t\t\t\theight: isActive ? '400px' : '180px',\n\t\t\t\twidth: isActive ? '400px' : '200px',\n\t\t\t\ttop: ref.current ? ref.current.offsetTop : 0,\n\t\t\t\tleft: ref.current ? ref.current.offsetLeft : 0\n\t\t\t}),\n\t\t\t[isActive, ref.current && ref.current.offsetTop, ref.current && ref.current.offsetLeft]\n\t\t);\n\n\t\t// Update hash when style changes so we can inform children\n\t\tuseEffect(() => setPosHash(cur => cur + 1), [style]);\n\n\t\t// Get the location of the current image using webpack  - probably only done once per card\n\t\tconst imagePath = useMemo(() => (layoutState.useImages ? require(`./../../static/${name}.png`) : undefined), [\n\t\t\tname,\n\t\t\tlayoutState.useImages\n\t\t]);\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{/* This is the \"anchor\" that positions the card, takes advantage of CSS */}\n\t\t\t\t<div ref={ref} className={classes.modelCard_placeholder} />\n\n\t\t\t\t{/* This is the actual card: an `absolute` element so it can grow or shrink in place without affecting others' positioning */}\n\t\t\t\t<Card\n\t\t\t\t\tclassName={`${classes.modelCard} ${isActive ? classes.modelCard__active : ''}`}\n\t\t\t\t\tname={index}\n\t\t\t\t\tonClick={event => handleCardClick(event, index)}\n\t\t\t\t\tstyle={style}\n\t\t\t\t>\n\t\t\t\t\t<CardActionArea\n\t\t\t\t\t\tclassName={`${classes.modelCard_rail_container} ${\n\t\t\t\t\t\t\tisActive ? classes.modelCard_rail_container__active : ''\n\t\t\t\t\t\t}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className={classes.modelCard_rail}>\n\t\t\t\t\t\t\t{/* Picture / Preview Model */}\n\t\t\t\t\t\t\t<CardMedia\n\t\t\t\t\t\t\t\tcomponent=\"img\"\n\t\t\t\t\t\t\t\talt={'Folded Model Picture'}\n\t\t\t\t\t\t\t\ttitle=\"Folded Model Picture\"\n\t\t\t\t\t\t\t\theight=\"120\"\n\t\t\t\t\t\t\t\timage={imagePath}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t{/* Title */}\n\t\t\t\t\t\t\t\t<Typography className={classes.modelCard_title} variant=\"h5\" component=\"h2\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t{/* Tags */}\n\t\t\t\t\t\t\t\t{props.isActive && (\n\t\t\t\t\t\t\t\t\t<div className={classes.tags} variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t\t\t\t\t\t{foldEntry.tags && foldEntry.tags.length\n\t\t\t\t\t\t\t\t\t\t\t? foldEntry.tags.map(({ name, category }, i) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={cardKey + '_' + name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclickable\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={category ? classes[`tags__${category}`] : undefined}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t  ))\n\t\t\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Details rail */}\n\t\t\t\t\t\t{isActive && (\n\t\t\t\t\t\t\t<div className={classes.modelCard_rail}>\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t{props.isActive && (\n\t\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t{/* Attribution */}\n\t\t\t\t\t\t\t\t\t\t\t<CardLabel text=\"Creator\" />\n\t\t\t\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.modelCard_bodyText}\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"body2\"\n\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"textSecondary\"\n\t\t\t\t\t\t\t\t\t\t\t\tcomponent=\"p\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{foldEntry.author}\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t\t\t\t<br />\n\n\t\t\t\t\t\t\t\t\t\t\t<CardLabel text=\"Description\" />\n\t\t\t\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.modelCard_bodyText}\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"body2\"\n\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"textSecondary\"\n\t\t\t\t\t\t\t\t\t\t\t\tcomponent=\"p\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{foldEntry.description}\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</CardActionArea>\n\n\t\t\t\t\t{/* Actions */}\n\t\t\t\t\t{isActive && (\n\t\t\t\t\t\t<CardActions classes={classes.modelCard_footer}>\n\t\t\t\t\t\t\t<Button size=\"small\" color=\"primary\">\n\t\t\t\t\t\t\t\tShare\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button size=\"small\" color=\"primary\">\n\t\t\t\t\t\t\t\tLearn More\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<div className={classes.modelCard_foldButton}>\n\t\t\t\t\t\t\t\t<Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={handleFoldClick}>\n\t\t\t\t\t\t\t\t\tFold\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t)}\n\t\t\t\t</Card>\n\t\t\t</React.Fragment>\n\t\t);\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\n\t// Get the list of all cards to display\n\tconst cardList = useMemo(filterCardList, []);\n\n\t// Update our list of refs for each card\n\t// useEffect(updateCardRefs, [cardList.length]);\n\n\treturn (\n\t\t<div className={classes.page_ModelSelect_container}>\n\t\t\t{cardList.map((cardKey, i) => (\n\t\t\t\t<ModelCard\n\t\t\t\t\tname={Folds[cardKey].name}\n\t\t\t\t\tkey={cardKey}\n\t\t\t\t\tcardKey={cardKey}\n\t\t\t\t\tfoldEntry={Folds[cardKey]}\n\t\t\t\t\tindex={i}\n\t\t\t\t\tisActive={activeIndex === i}\n\t\t\t\t\tshouldOpenFlipped={false}\n\t\t\t\t>\n\t\t\t\t\t<span> mainChild! </span>\n\t\t\t\t</ModelCard>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState\n\t};\n};\n\nexport default connect(mapStateToProps, { setLayoutState })(ModelSelect);\n","/home/bbor/dev/origamiodyssey/src/layout/pages/FoldControls.js",["181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199"],"/**\n * FILENAME: FoldControls.js \n *\n * DESCRIPTION: These are piecemeal controls for the fold state. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config }  from 'react-spring';\n\nimport { SwipeableDrawer, Button,  ButtonGroup, List, Divider, ListItem, Card } from '@material-ui/core';\nimport SkipPrevious from \"@material-ui/icons/SkipPrevious\";\nimport SkipNext from \"@material-ui/icons/SkipNext\";\n\nimport useStyles from \"./../../style/theme\";\nimport { Folds } from \"./../../infra/constants\";\nimport { setFoldState } from \"./../../infra/actions\";\n// const AnimatedCard = animated(Card);\n\nexport const FoldControls = props => {\n\tconst { windowHeight, foldState, foldStateHash, setFoldState } = props;\n\n\t// ----------\n\t// STATE INIT \n\t// ----------\n\tconst classes = useStyles();\n\tconst [cardRefs, setCardRefs] = useState([]);\n\tconst [curHash, setHash] = useState(0);\n\n\t// ----------------\n\t// MEMBER FUNCTIONS \n\t// ----------------\n\n\t// Changes the current instructional sequential step, prompting animation.\n\tconst changeStep = (delta) => {\n\t\tlet newStepIndex = Math.min(Math.max(foldState.stepIndex + delta, -1), foldState.maxSteps);\n\t\tsetFoldState({\n\t\t\tstepIndex: newStepIndex\n\t\t});\n\t};\n\n\tconst calcControlsPosition = () => {\n\t\treturn (window.innerWidth - 128) / 2;\n\t}\n\n\tconst triggerRerender = () => {\n\t\tsetHash(cur => cur + 1);\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\n\tconst buttonClasses = useMemo(() => ({\n\t\troot: classes.fold_controls_button,\n\t\tlabel: classes.fold_controls_button_label\n\t}), []);\n\n\t// Rerender whenever the page resizes\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", triggerRerender);\n\t}, []);\n\n\tconst ctrlLeft = useMemo(calcControlsPosition, [window.innerWidth]);\n\n    return (\n    \t<React.Fragment>\n\t\t\t<Card className={classes.fold_controls} style={{left: ctrlLeft}} >\n\t\t\t\t<ButtonGroup className={classes.fold_controls_button_container} color=\"primary\" variant=\"text\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses={buttonClasses}\n\t\t\t\t\t\tonClick={() => changeStep(-1)}\n\t\t\t\t\t\tdisabled={foldState.stepIndex < 0}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SkipPrevious className={classes.fold_controls_button_icon} />\n\t\t\t\t\t\tPrev\t\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses={buttonClasses}\n\t\t\t\t\t\tonClick={() => changeStep(1)}\n\t\t\t\t\t\tdisabled={foldState.stepIndex >= foldState.maxSteps - 1}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SkipNext className={classes.fold_controls_button_icon} />\n\t\t\t\t\t\tNext\t\n\t\t\t\t\t</Button>\n\t\t\t\t</ButtonGroup>\n    \t\t</Card>\n    \t</React.Fragment>\n    );\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setFoldState })(FoldControls);\n","/home/bbor/dev/origamiodyssey/src/layout/pages/User.js",["200","201","202","203","204","205","206","207","208","209","210","211","212","213"],"/**\n * FILENAME: User.js \n *\n * DESCRIPTION: This page allows the user to browser through cards, read details on models, and select one to fold. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config }  from 'react-spring';\n\nimport { SwipeableDrawer, Button, List, Divider, ListItem, Card } from '@material-ui/core';\n\nimport useStyles from \"./../../style/theme\";\nimport { Folds } from \"./../../infra/constants\";\n// const AnimatedCard = animated(Card);\n\nexport const User = () => {\n\tconst classes = useStyles();\n\n\t// ----------\n\t// STATE INIT \n\t// ----------\n\tconst [cardRefs, setCardRefs] = useState([]);\n\n\t// ----------------\n\t// MEMBER FUNCTIONS \n\t// ----------------\n\n\tconst selectCardList = () => {\n\t\treturn Folds.filter(() => true);\n\t};\n\n\n\tconst createCard = () => {\n\n\t}\n\n\n\tconst updateCardRefs = () => {\n\t\t// Recreate the refs array, reusing elements. Note that this algo doesn't support reordering\n\t\tsetCardRefs(elRefs => (\n\t\t\tArray(cardList.length).fill().map((el, i) => cardRefs[i] || createRef())\n\t\t));\n\t};\n\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\n\tconst cardList = useMemo(selectCardList, []);\n\n\tuseEffect(updateCardRefs, [cardList.length]);\n\n    return (\n        <div className={classes.User.container}>\n        </div>\n    );\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t};\n};\n\nexport default connect(mapStateToProps, {})(User);\n","/home/bbor/dev/origamiodyssey/src/static/lettering.js",[],"/home/bbor/dev/origamiodyssey/src/layout/pages/FoldEditorCards.js",["214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235"],"/**\n * FILENAME: FoldEditorCards.js\n *\n * DESCRIPTION: These cards are shown on either side of the model, and allow realtime editing of .fold files.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config } from 'react-spring';\nimport { JsonEditor } from 'jsoneditor-react';\nimport 'jsoneditor-react/es/editor.min.css';\nimport Downloader from 'js-file-downloader';\n\nimport {\n\tButton,\n\tTypography,\n\tButtonGroup,\n\tChip,\n\tInput,\n\tSelect,\n\tMenuItem,\n\tGrid,\n\tList,\n\tDivider,\n\tListItem,\n\tCard\n} from '@material-ui/core';\nimport SkipPrevious from '@material-ui/icons/SkipPrevious';\nimport SkipNext from '@material-ui/icons/SkipNext';\nimport { ToggleButton } from '@material-ui/lab';\n\nimport useStyles from './../../style/theme';\nimport { Folds } from './../../infra/constants';\nimport { setFoldState, setEditorState } from './../../infra/actions';\n// const AnimatedCard = animated(Card);\n\nexport const FoldEditorCards = props => {\n\tconst {\n\t\tcurFold,\n\t\tinitFold,\n\t\tfoldLastUpdated,\n\t\twindowHeight,\n\t\tfoldOverrideCallback,\n\t\tfoldState,\n\t\tfoldStateHash,\n\t\tsetFoldState,\n\t\teditorState,\n\t\teditorStateHash,\n\t\tsetEditorState\n\t} = props;\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\tconst classes = useStyles();\n\tconst [curHash, setHash] = useState(0);\n\tconst localFold = useRef();\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\tconst calcControlsPosition = () => {\n\t\treturn (window.innerWidth - 128) / 2;\n\t};\n\n\tconst CardLabel = ({ text }) => (\n\t\t<React.Fragment>\n\t\t\t<Typography className={classes.modelCard_label} variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t{text}\n\t\t\t</Typography>\n\t\t\t<Divider />\n\t\t</React.Fragment>\n\t);\n\n\tconst ControlRow = ({ name, text, width, children }) => (\n\t\t<Grid item xs={width || 12} className={classes.editor_row}>\n\t\t\t{/* Title */}\n\t\t\t<CardLabel text={name} />\n\t\t\t{text !== undefined && (\n\t\t\t\t<Typography className={classes.editor_bodyText} variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t<strong>{text}</strong>\n\t\t\t\t</Typography>\n\t\t\t)}\n\n\t\t\t{children}\n\t\t</Grid>\n\t);\n\n\tconst resetLocalFold = () => {\n\t\tconsole.log('[resetLocalFold]', initFold);\n\t\tlocalFold.current = JSON.parse(JSON.stringify(initFold));\n\t};\n\n\tconst handleFoldChange = e => {\n\t\tObject.assign(localFold.current, e);\n\t};\n\n\tconst handleSaveClick = () => {\n\t\tif (!localFold.current || !curFold) {\n\t\t\tconsole.error(\"Couldn't save file; no current value.\");\n\t\t\treturn;\n\t\t}\n\n\t\tfoldOverrideCallback(localFold.current);\n\t};\n\n\tconst handleExportClick = async () => {\n\t\tif (!localFold.current || !curFold) {\n\t\t\tconsole.error(\"Couldn't export file; no current value.\");\n\t\t\treturn;\n\t\t}\n\n\t\tlet fileDownloadUrl = `data:application/json,${encodeURIComponent(JSON.stringify(localFold.current, null, 2))}`;\n\t\t// fileDownloadUrl = URL.createObjectURL(fileDownloadUrl)\n\n\t\tnew Downloader({\n\t\t\turl: fileDownloadUrl,\n\t\t\tfilename: `${curFold}.json`\n\t\t}).then(() => {\n\t\t\tconsole.log('finished download.');\n\t\t});\n\t};\n\n\tconst handleEditorFormChange = (field, value) => {\n\t\tsetEditorState({ [field]: value });\n\t};\n\n\tconst handleSelectionChange = event => {\n\t\tconsole.log('GOT EVENT! ', event.target);\n\t\tconst field = event.target.name;\n\t\tconst value = event.target.value;\n\n\t\tsetEditorState({ [field]: value });\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\tconst buttonClasses = useMemo(\n\t\t() => ({\n\t\t\troot: classes.fold_controls_button,\n\t\t\tlabel: classes.fold_controls_button_label\n\t\t}),\n\t\t[]\n\t);\n\n\tuseEffect(resetLocalFold, [initFold]);\n\n\tconst ctrlLeft = useMemo(calcControlsPosition, [window.innerWidth]);\n\n\t// If we don't have any fold file loaded yet, don't show these\n\tif (!initFold) {\n\t\treturn <div />;\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{/* Details on the fold state */}\n\t\t\t<Card className={classes.editorState}>\n\t\t\t\t<Typography className={classes.editor_cardTitle} variant=\"h4\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\tFold State\n\t\t\t\t</Typography>\n\t\t\t\t<Grid container>\n\t\t\t\t\t<ControlRow name=\"Selected Level\" text={foldState.selectedLevel} width={6} />\n\t\t\t\t\t<ControlRow name=\"Step Index\" text={`${foldState.stepIndex}/${foldState.maxSteps - 1}`} width={6} />\n\t\t\t\t</Grid>\n\t\t\t</Card>\n\n\t\t\t{/* Details on the current instruction */}\n\t\t\t<Card className={classes.editorDetails}>\n\t\t\t\t<Typography className={classes.editor_cardTitle} variant=\"h4\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\tEditor Controls\n\t\t\t\t</Typography>\n\t\t\t\t<Grid container>\n\t\t\t\t\t<ControlRow name=\"Highlighted Edges\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tname=\"edgeHighlights\"\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\tvalue={editorState.edgeHighlights}\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\n\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\t\trenderValue={selected => (\n\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t{selected.map(idx => (\n\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\t\tlabel={initFold.edges_vertices[idx].toString()}\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tclassName={classes.editor_select}\n\t\t\t\t\t\t\t// MenuProps={MenuProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{initFold.edges_vertices.map((edge, index) => {\n\t\t\t\t\t\t\t\tconst name = edge.toString();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={index}>\n\t\t\t\t\t\t\t\t\t\t{index}: {name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"vertexHighlights\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tname=\"vertexHighlights\"\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\tvalue={editorState.vertexHighlights}\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\n\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\t\trenderValue={selected => (\n\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t{selected.map(idx => (\n\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\t\tlabel={`${idx}: ${initFold.vertices_coords[idx].toString()}`}\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tclassName={classes.editor_select}\n\t\t\t\t\t\t\t// MenuProps={MenuProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{initFold.vertices_coords.map((coords, index) => {\n\t\t\t\t\t\t\t\tconst name = coords.toString();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={index}>\n\t\t\t\t\t\t\t\t\t\t{index}: {name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"faceHighlights\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tname=\"faceHighlights\"\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\tvalue={editorState.faceHighlights}\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\n\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\t\trenderValue={selected => (\n\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t{selected.map(idx => (\n\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\t\tlabel={`${idx}: ${initFold.faces_vertices[idx].toString()}`}\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tclassName={classes.editor_select}\n\t\t\t\t\t\t\t// MenuProps={MenuProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{initFold.faces_vertices.map((face, index) => {\n\t\t\t\t\t\t\t\tconst name = face.toString();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={index}>\n\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Edges\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showEdges}\n\t\t\t\t\t\t\tonChange={() => handleEditorFormChange('showEdges', !editorState.showEdges)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Vertices\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showVertices}\n\t\t\t\t\t\t\tonChange={() => handleEditorFormChange('showVertices', !editorState.showVertices)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Faces\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showFaces}\n\t\t\t\t\t\t\tonChange={() => handleEditorFormChange('showFaces', !editorState.showFaces)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Triangulations\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showTriangulations}\n\t\t\t\t\t\t\tonChange={() =>\n\t\t\t\t\t\t\t\thandleEditorFormChange('showTriangulations', !editorState.showTriangulations)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t</Grid>\n\t\t\t</Card>\n\n\t\t\t{/* Entry box for direct JSON manipulation */}\n\t\t\t<Card className={classes.editorEntry}>\n\t\t\t\t<Typography className={classes.editor_cardTitle} variant=\"h4\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\t<code>.fold</code> file\n\t\t\t\t</Typography>\n\t\t\t\t<ButtonGroup className={classes.editor_floatAction} color=\"primary\" variant=\"text\" size=\"large\">\n\t\t\t\t\t<Button onClick={handleSaveClick}> Local Save </Button>\n\t\t\t\t\t<Button onClick={handleExportClick}> Export To Disk </Button>\n\t\t\t\t</ButtonGroup>\n\t\t\t\t<JsonEditor\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\tfaces_vertices: initFold.faces_vertices,\n\t\t\t\t\t\tvertices_coords: initFold.vertices_coords,\n\t\t\t\t\t\tedges_vertices: initFold.edges_vertices,\n\t\t\t\t\t\tinstructions: initFold.instructions\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleFoldChange}\n\t\t\t\t\thtmlElementProps={{ class: classes.editor_jsonTextArea }}\n\t\t\t\t\tallowedModes={['tree', 'form']}\n\t\t\t\t\tnavigationBar={false}\n\t\t\t\t\thistory={true}\n\t\t\t\t/>\n\t\t\t</Card>\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash,\n\t\teditorState: state.appReducer.editorState,\n\t\teditorStateHash: state.appReducer.editorState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setFoldState, setEditorState })(FoldEditorCards);\n","/home/bbor/dev/origamiodyssey/src/infra/utils.js",[],"/home/bbor/dev/origamiodyssey/src/layout/pages/InstructionalHierarchy.js",["236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263"],{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","severity":1,"message":"269","line":8,"column":35,"nodeType":"270","messageId":"271","endLine":8,"endColumn":42},{"ruleId":"268","severity":1,"message":"272","line":8,"column":44,"nodeType":"270","messageId":"271","endLine":8,"endColumn":53},{"ruleId":"268","severity":1,"message":"273","line":13,"column":2,"nodeType":"270","messageId":"271","endLine":13,"endColumn":19},{"ruleId":"268","severity":1,"message":"274","line":16,"column":2,"nodeType":"270","messageId":"271","endLine":16,"endColumn":12},{"ruleId":"268","severity":1,"message":"275","line":32,"column":19,"nodeType":"270","messageId":"271","endLine":32,"endColumn":30},{"ruleId":"268","severity":1,"message":"276","line":35,"column":8,"nodeType":"270","messageId":"271","endLine":35,"endColumn":12},{"ruleId":"268","severity":1,"message":"277","line":42,"column":8,"nodeType":"270","messageId":"271","endLine":42,"endColumn":23},{"ruleId":"278","severity":1,"message":"279","line":66,"column":6,"nodeType":"280","endLine":71,"endColumn":8},{"ruleId":"268","severity":1,"message":"281","line":11,"column":10,"nodeType":"270","messageId":"271","endLine":11,"endColumn":25},{"ruleId":"268","severity":1,"message":"282","line":11,"column":27,"nodeType":"270","messageId":"271","endLine":11,"endColumn":33},{"ruleId":"268","severity":1,"message":"283","line":11,"column":35,"nodeType":"270","messageId":"271","endLine":11,"endColumn":39},{"ruleId":"268","severity":1,"message":"284","line":11,"column":41,"nodeType":"270","messageId":"271","endLine":11,"endColumn":48},{"ruleId":"268","severity":1,"message":"285","line":11,"column":50,"nodeType":"270","messageId":"271","endLine":11,"endColumn":58},{"ruleId":"268","severity":1,"message":"286","line":12,"column":8,"nodeType":"270","messageId":"271","endLine":12,"endColumn":20},{"ruleId":"268","severity":1,"message":"287","line":13,"column":8,"nodeType":"270","messageId":"271","endLine":13,"endColumn":20},{"ruleId":"268","severity":1,"message":"288","line":14,"column":8,"nodeType":"270","messageId":"271","endLine":14,"endColumn":22},{"ruleId":"268","severity":1,"message":"289","line":15,"column":8,"nodeType":"270","messageId":"271","endLine":15,"endColumn":25},{"ruleId":"268","severity":1,"message":"290","line":18,"column":24,"nodeType":"270","messageId":"271","endLine":18,"endColumn":35},{"ruleId":"268","severity":1,"message":"291","line":32,"column":3,"nodeType":"270","messageId":"271","endLine":32,"endColumn":18},{"ruleId":"268","severity":1,"message":"292","line":35,"column":3,"nodeType":"270","messageId":"271","endLine":35,"endColumn":16},{"ruleId":"268","severity":1,"message":"293","line":38,"column":3,"nodeType":"270","messageId":"271","endLine":38,"endColumn":18},{"ruleId":"294","severity":1,"message":"295","line":156,"column":5,"nodeType":"296","endLine":156,"endColumn":7,"suggestions":"297"},{"ruleId":"294","severity":1,"message":"298","line":160,"column":5,"nodeType":"296","endLine":160,"endColumn":57,"suggestions":"299"},{"ruleId":"294","severity":1,"message":"300","line":163,"column":24,"nodeType":"296","endLine":163,"endColumn":45,"suggestions":"301"},{"ruleId":"294","severity":1,"message":"302","line":169,"column":5,"nodeType":"296","endLine":169,"endColumn":14,"suggestions":"303"},{"ruleId":"294","severity":1,"message":"304","line":172,"column":45,"nodeType":"296","endLine":172,"endColumn":77,"suggestions":"305"},{"ruleId":"268","severity":1,"message":"306","line":8,"column":17,"nodeType":"270","messageId":"271","endLine":8,"endColumn":25},{"ruleId":"268","severity":1,"message":"307","line":8,"column":27,"nodeType":"270","messageId":"271","endLine":8,"endColumn":33},{"ruleId":"268","severity":1,"message":"269","line":8,"column":35,"nodeType":"270","messageId":"271","endLine":8,"endColumn":42},{"ruleId":"268","severity":1,"message":"272","line":8,"column":44,"nodeType":"270","messageId":"271","endLine":8,"endColumn":53},{"ruleId":"308","severity":1,"message":"309","line":12,"column":8,"nodeType":"310","messageId":"311","endLine":12,"endColumn":11},{"ruleId":"264","replacedBy":"312"},{"ruleId":"266","replacedBy":"313"},{"ruleId":"268","severity":1,"message":"306","line":7,"column":17,"nodeType":"270","messageId":"271","endLine":7,"endColumn":25},{"ruleId":"268","severity":1,"message":"307","line":7,"column":27,"nodeType":"270","messageId":"271","endLine":7,"endColumn":33},{"ruleId":"268","severity":1,"message":"269","line":7,"column":35,"nodeType":"270","messageId":"271","endLine":7,"endColumn":42},{"ruleId":"268","severity":1,"message":"272","line":7,"column":44,"nodeType":"270","messageId":"271","endLine":7,"endColumn":53},{"ruleId":"268","severity":1,"message":"269","line":8,"column":35,"nodeType":"270","messageId":"271","endLine":8,"endColumn":42},{"ruleId":"268","severity":1,"message":"272","line":8,"column":44,"nodeType":"270","messageId":"271","endLine":8,"endColumn":53},{"ruleId":"268","severity":1,"message":"314","line":12,"column":38,"nodeType":"270","messageId":"271","endLine":12,"endColumn":47},{"ruleId":"268","severity":1,"message":"315","line":17,"column":10,"nodeType":"270","messageId":"271","endLine":17,"endColumn":19},{"ruleId":"268","severity":1,"message":"316","line":17,"column":21,"nodeType":"270","messageId":"271","endLine":17,"endColumn":30},{"ruleId":"268","severity":1,"message":"317","line":17,"column":32,"nodeType":"270","messageId":"271","endLine":17,"endColumn":42},{"ruleId":"268","severity":1,"message":"318","line":17,"column":44,"nodeType":"270","messageId":"271","endLine":17,"endColumn":52},{"ruleId":"268","severity":1,"message":"319","line":17,"column":54,"nodeType":"270","messageId":"271","endLine":17,"endColumn":60},{"ruleId":"268","severity":1,"message":"320","line":21,"column":10,"nodeType":"270","messageId":"271","endLine":21,"endColumn":15},{"ruleId":"268","severity":1,"message":"321","line":65,"column":37,"nodeType":"270","messageId":"271","endLine":65,"endColumn":46},{"ruleId":"268","severity":1,"message":"291","line":65,"column":61,"nodeType":"270","messageId":"271","endLine":65,"endColumn":76},{"ruleId":"322","severity":1,"message":"323","line":14,"column":2,"nodeType":"324","messageId":"325","endLine":34,"endColumn":3},{"ruleId":"326","severity":1,"message":"327","line":85,"column":3,"nodeType":"328","messageId":"311","endLine":85,"endColumn":8},{"ruleId":"268","severity":1,"message":"329","line":11,"column":10,"nodeType":"270","messageId":"271","endLine":11,"endColumn":16},{"ruleId":"268","severity":1,"message":"330","line":11,"column":28,"nodeType":"270","messageId":"271","endLine":11,"endColumn":36},{"ruleId":"268","severity":1,"message":"314","line":11,"column":38,"nodeType":"270","messageId":"271","endLine":11,"endColumn":47},{"ruleId":"268","severity":1,"message":"331","line":11,"column":49,"nodeType":"270","messageId":"271","endLine":11,"endColumn":55},{"ruleId":"268","severity":1,"message":"316","line":16,"column":13,"nodeType":"270","messageId":"271","endLine":16,"endColumn":22},{"ruleId":"268","severity":1,"message":"332","line":26,"column":3,"nodeType":"270","messageId":"271","endLine":26,"endColumn":11},{"ruleId":"268","severity":1,"message":"333","line":27,"column":3,"nodeType":"270","messageId":"271","endLine":27,"endColumn":8},{"ruleId":"268","severity":1,"message":"334","line":31,"column":3,"nodeType":"270","messageId":"271","endLine":31,"endColumn":18},{"ruleId":"268","severity":1,"message":"292","line":34,"column":3,"nodeType":"270","messageId":"271","endLine":34,"endColumn":16},{"ruleId":"268","severity":1,"message":"293","line":37,"column":3,"nodeType":"270","messageId":"271","endLine":37,"endColumn":18},{"ruleId":"268","severity":1,"message":"335","line":43,"column":9,"nodeType":"270","messageId":"271","endLine":43,"endColumn":21},{"ruleId":"268","severity":1,"message":"336","line":43,"column":23,"nodeType":"270","messageId":"271","endLine":43,"endColumn":38},{"ruleId":"268","severity":1,"message":"337","line":46,"column":8,"nodeType":"270","messageId":"271","endLine":46,"endColumn":16},{"ruleId":"294","severity":1,"message":"338","line":545,"column":44,"nodeType":"296","endLine":549,"endColumn":3,"suggestions":"339"},{"ruleId":"294","severity":1,"message":"340","line":546,"column":3,"nodeType":"341","endLine":546,"endColumn":46},{"ruleId":"294","severity":1,"message":"342","line":550,"column":33,"nodeType":"296","endLine":550,"endColumn":54,"suggestions":"343"},{"ruleId":"294","severity":1,"message":"344","line":551,"column":27,"nodeType":"296","endLine":551,"endColumn":54,"suggestions":"345"},{"ruleId":"268","severity":1,"message":"307","line":8,"column":27,"nodeType":"270","messageId":"271","endLine":8,"endColumn":33},{"ruleId":"268","severity":1,"message":"269","line":8,"column":35,"nodeType":"270","messageId":"271","endLine":8,"endColumn":42},{"ruleId":"268","severity":1,"message":"272","line":8,"column":44,"nodeType":"270","messageId":"271","endLine":8,"endColumn":53},{"ruleId":"268","severity":1,"message":"282","line":11,"column":27,"nodeType":"270","messageId":"271","endLine":11,"endColumn":33},{"ruleId":"268","severity":1,"message":"284","line":11,"column":41,"nodeType":"270","messageId":"271","endLine":11,"endColumn":48},{"ruleId":"268","severity":1,"message":"346","line":18,"column":28,"nodeType":"270","messageId":"271","endLine":18,"endColumn":42},{"ruleId":"268","severity":1,"message":"347","line":22,"column":10,"nodeType":"270","messageId":"271","endLine":22,"endColumn":14},{"ruleId":"268","severity":1,"message":"348","line":8,"column":55,"nodeType":"270","messageId":"271","endLine":8,"endColumn":64},{"ruleId":"268","severity":1,"message":"315","line":11,"column":10,"nodeType":"270","messageId":"271","endLine":11,"endColumn":19},{"ruleId":"268","severity":1,"message":"316","line":11,"column":21,"nodeType":"270","messageId":"271","endLine":11,"endColumn":30},{"ruleId":"268","severity":1,"message":"317","line":11,"column":32,"nodeType":"270","messageId":"271","endLine":11,"endColumn":42},{"ruleId":"268","severity":1,"message":"319","line":11,"column":54,"nodeType":"270","messageId":"271","endLine":11,"endColumn":60},{"ruleId":"268","severity":1,"message":"349","line":28,"column":7,"nodeType":"270","messageId":"271","endLine":28,"endColumn":19},{"ruleId":"268","severity":1,"message":"350","line":91,"column":10,"nodeType":"270","messageId":"271","endLine":91,"endColumn":17},{"ruleId":"294","severity":1,"message":"340","line":127,"column":15,"nodeType":"341","endLine":127,"endColumn":51},{"ruleId":"294","severity":1,"message":"340","line":127,"column":53,"nodeType":"341","endLine":127,"endColumn":90},{"ruleId":"294","severity":1,"message":"351","line":134,"column":112,"nodeType":"296","endLine":137,"endColumn":4,"suggestions":"352"},{"ruleId":"268","severity":1,"message":"307","line":8,"column":27,"nodeType":"270","messageId":"271","endLine":8,"endColumn":33},{"ruleId":"268","severity":1,"message":"348","line":8,"column":55,"nodeType":"270","messageId":"271","endLine":8,"endColumn":64},{"ruleId":"268","severity":1,"message":"315","line":11,"column":10,"nodeType":"270","messageId":"271","endLine":11,"endColumn":19},{"ruleId":"268","severity":1,"message":"316","line":11,"column":21,"nodeType":"270","messageId":"271","endLine":11,"endColumn":30},{"ruleId":"268","severity":1,"message":"317","line":11,"column":32,"nodeType":"270","messageId":"271","endLine":11,"endColumn":42},{"ruleId":"268","severity":1,"message":"318","line":11,"column":44,"nodeType":"270","messageId":"271","endLine":11,"endColumn":52},{"ruleId":"268","severity":1,"message":"319","line":11,"column":54,"nodeType":"270","messageId":"271","endLine":11,"endColumn":60},{"ruleId":"268","severity":1,"message":"281","line":13,"column":10,"nodeType":"270","messageId":"271","endLine":13,"endColumn":25},{"ruleId":"268","severity":1,"message":"283","line":13,"column":49,"nodeType":"270","messageId":"271","endLine":13,"endColumn":53},{"ruleId":"268","severity":1,"message":"284","line":13,"column":55,"nodeType":"270","messageId":"271","endLine":13,"endColumn":62},{"ruleId":"268","severity":1,"message":"285","line":13,"column":64,"nodeType":"270","messageId":"271","endLine":13,"endColumn":72},{"ruleId":"268","severity":1,"message":"320","line":18,"column":10,"nodeType":"270","messageId":"271","endLine":18,"endColumn":15},{"ruleId":"268","severity":1,"message":"353","line":23,"column":10,"nodeType":"270","messageId":"271","endLine":23,"endColumn":22},{"ruleId":"268","severity":1,"message":"292","line":23,"column":35,"nodeType":"270","messageId":"271","endLine":23,"endColumn":48},{"ruleId":"268","severity":1,"message":"354","line":29,"column":9,"nodeType":"270","messageId":"271","endLine":29,"endColumn":17},{"ruleId":"268","severity":1,"message":"355","line":29,"column":19,"nodeType":"270","messageId":"271","endLine":29,"endColumn":30},{"ruleId":"268","severity":1,"message":"356","line":30,"column":9,"nodeType":"270","messageId":"271","endLine":30,"endColumn":16},{"ruleId":"294","severity":1,"message":"357","line":59,"column":6,"nodeType":"296","endLine":59,"endColumn":8,"suggestions":"358"},{"ruleId":"294","severity":1,"message":"359","line":66,"column":49,"nodeType":"296","endLine":66,"endColumn":68,"suggestions":"360"},{"ruleId":"268","severity":1,"message":"307","line":8,"column":27,"nodeType":"270","messageId":"271","endLine":8,"endColumn":33},{"ruleId":"268","severity":1,"message":"315","line":11,"column":10,"nodeType":"270","messageId":"271","endLine":11,"endColumn":19},{"ruleId":"268","severity":1,"message":"316","line":11,"column":21,"nodeType":"270","messageId":"271","endLine":11,"endColumn":30},{"ruleId":"268","severity":1,"message":"317","line":11,"column":32,"nodeType":"270","messageId":"271","endLine":11,"endColumn":42},{"ruleId":"268","severity":1,"message":"318","line":11,"column":44,"nodeType":"270","messageId":"271","endLine":11,"endColumn":52},{"ruleId":"268","severity":1,"message":"319","line":11,"column":54,"nodeType":"270","messageId":"271","endLine":11,"endColumn":60},{"ruleId":"268","severity":1,"message":"281","line":13,"column":10,"nodeType":"270","messageId":"271","endLine":13,"endColumn":25},{"ruleId":"268","severity":1,"message":"282","line":13,"column":27,"nodeType":"270","messageId":"271","endLine":13,"endColumn":33},{"ruleId":"268","severity":1,"message":"283","line":13,"column":35,"nodeType":"270","messageId":"271","endLine":13,"endColumn":39},{"ruleId":"268","severity":1,"message":"284","line":13,"column":41,"nodeType":"270","messageId":"271","endLine":13,"endColumn":48},{"ruleId":"268","severity":1,"message":"285","line":13,"column":50,"nodeType":"270","messageId":"271","endLine":13,"endColumn":58},{"ruleId":"268","severity":1,"message":"361","line":13,"column":60,"nodeType":"270","messageId":"271","endLine":13,"endColumn":64},{"ruleId":"268","severity":1,"message":"362","line":36,"column":8,"nodeType":"270","messageId":"271","endLine":36,"endColumn":18},{"ruleId":"294","severity":1,"message":"363","line":55,"column":28,"nodeType":"296","endLine":55,"endColumn":45,"suggestions":"364"},{"ruleId":"268","severity":1,"message":"348","line":8,"column":55,"nodeType":"270","messageId":"271","endLine":8,"endColumn":64},{"ruleId":"268","severity":1,"message":"315","line":11,"column":10,"nodeType":"270","messageId":"271","endLine":11,"endColumn":19},{"ruleId":"268","severity":1,"message":"316","line":11,"column":21,"nodeType":"270","messageId":"271","endLine":11,"endColumn":30},{"ruleId":"268","severity":1,"message":"317","line":11,"column":32,"nodeType":"270","messageId":"271","endLine":11,"endColumn":42},{"ruleId":"268","severity":1,"message":"318","line":11,"column":44,"nodeType":"270","messageId":"271","endLine":11,"endColumn":52},{"ruleId":"268","severity":1,"message":"319","line":11,"column":54,"nodeType":"270","messageId":"271","endLine":11,"endColumn":60},{"ruleId":"268","severity":1,"message":"283","line":25,"column":2,"nodeType":"270","messageId":"271","endLine":25,"endColumn":6},{"ruleId":"268","severity":1,"message":"285","line":27,"column":2,"nodeType":"270","messageId":"271","endLine":27,"endColumn":10},{"ruleId":"268","severity":1,"message":"365","line":30,"column":8,"nodeType":"270","messageId":"271","endLine":30,"endColumn":20},{"ruleId":"268","severity":1,"message":"366","line":31,"column":8,"nodeType":"270","messageId":"271","endLine":31,"endColumn":16},{"ruleId":"268","severity":1,"message":"320","line":35,"column":10,"nodeType":"270","messageId":"271","endLine":35,"endColumn":15},{"ruleId":"268","severity":1,"message":"334","line":43,"column":3,"nodeType":"270","messageId":"271","endLine":43,"endColumn":18},{"ruleId":"268","severity":1,"message":"353","line":44,"column":3,"nodeType":"270","messageId":"271","endLine":44,"endColumn":15},{"ruleId":"268","severity":1,"message":"292","line":47,"column":3,"nodeType":"270","messageId":"271","endLine":47,"endColumn":16},{"ruleId":"268","severity":1,"message":"367","line":48,"column":3,"nodeType":"270","messageId":"271","endLine":48,"endColumn":15},{"ruleId":"268","severity":1,"message":"293","line":50,"column":3,"nodeType":"270","messageId":"271","endLine":50,"endColumn":18},{"ruleId":"268","severity":1,"message":"356","line":58,"column":9,"nodeType":"270","messageId":"271","endLine":58,"endColumn":16},{"ruleId":"268","severity":1,"message":"368","line":58,"column":18,"nodeType":"270","messageId":"271","endLine":58,"endColumn":25},{"ruleId":"268","severity":1,"message":"369","line":141,"column":8,"nodeType":"270","messageId":"271","endLine":141,"endColumn":21},{"ruleId":"294","severity":1,"message":"357","line":146,"column":3,"nodeType":"296","endLine":146,"endColumn":5,"suggestions":"370"},{"ruleId":"268","severity":1,"message":"371","line":151,"column":8,"nodeType":"270","messageId":"271","endLine":151,"endColumn":16},{"ruleId":"294","severity":1,"message":"359","line":151,"column":49,"nodeType":"296","endLine":151,"endColumn":68,"suggestions":"372"},{"ruleId":"268","severity":1,"message":"348","line":8,"column":55,"nodeType":"270","messageId":"271","endLine":8,"endColumn":64},{"ruleId":"268","severity":1,"message":"315","line":11,"column":10,"nodeType":"270","messageId":"271","endLine":11,"endColumn":19},{"ruleId":"268","severity":1,"message":"316","line":11,"column":21,"nodeType":"270","messageId":"271","endLine":11,"endColumn":30},{"ruleId":"268","severity":1,"message":"317","line":11,"column":32,"nodeType":"270","messageId":"271","endLine":11,"endColumn":42},{"ruleId":"268","severity":1,"message":"318","line":11,"column":44,"nodeType":"270","messageId":"271","endLine":11,"endColumn":52},{"ruleId":"268","severity":1,"message":"319","line":11,"column":54,"nodeType":"270","messageId":"271","endLine":11,"endColumn":60},{"ruleId":"268","severity":1,"message":"281","line":13,"column":10,"nodeType":"270","messageId":"271","endLine":13,"endColumn":25},{"ruleId":"268","severity":1,"message":"373","line":13,"column":27,"nodeType":"270","messageId":"271","endLine":13,"endColumn":34},{"ruleId":"268","severity":1,"message":"374","line":13,"column":41,"nodeType":"270","messageId":"271","endLine":13,"endColumn":52},{"ruleId":"268","severity":1,"message":"283","line":13,"column":54,"nodeType":"270","messageId":"271","endLine":13,"endColumn":58},{"ruleId":"268","severity":1,"message":"284","line":13,"column":60,"nodeType":"270","messageId":"271","endLine":13,"endColumn":67},{"ruleId":"268","severity":1,"message":"285","line":13,"column":69,"nodeType":"270","messageId":"271","endLine":13,"endColumn":77},{"ruleId":"268","severity":1,"message":"365","line":14,"column":8,"nodeType":"270","messageId":"271","endLine":14,"endColumn":20},{"ruleId":"268","severity":1,"message":"366","line":15,"column":8,"nodeType":"270","messageId":"271","endLine":15,"endColumn":16},{"ruleId":"268","severity":1,"message":"320","line":20,"column":10,"nodeType":"270","messageId":"271","endLine":20,"endColumn":15},{"ruleId":"268","severity":1,"message":"353","line":25,"column":10,"nodeType":"270","messageId":"271","endLine":25,"endColumn":22},{"ruleId":"268","severity":1,"message":"292","line":25,"column":62,"nodeType":"270","messageId":"271","endLine":25,"endColumn":75},{"ruleId":"268","severity":1,"message":"291","line":25,"column":104,"nodeType":"270","messageId":"271","endLine":25,"endColumn":119},{"ruleId":"268","severity":1,"message":"356","line":33,"column":9,"nodeType":"270","messageId":"271","endLine":33,"endColumn":16},{"ruleId":"268","severity":1,"message":"375","line":40,"column":8,"nodeType":"270","messageId":"271","endLine":40,"endColumn":18},{"ruleId":"268","severity":1,"message":"369","line":77,"column":8,"nodeType":"270","messageId":"271","endLine":77,"endColumn":21},{"ruleId":"294","severity":1,"message":"357","line":80,"column":6,"nodeType":"296","endLine":80,"endColumn":8,"suggestions":"376"},{"ruleId":"294","severity":1,"message":"377","line":87,"column":41,"nodeType":"296","endLine":87,"endColumn":109,"suggestions":"378"},{"ruleId":"268","severity":1,"message":"379","line":89,"column":8,"nodeType":"270","messageId":"271","endLine":89,"endColumn":17},{"ruleId":"294","severity":1,"message":"380","line":89,"column":44,"nodeType":"296","endLine":93,"endColumn":3,"suggestions":"381"},{"ruleId":"294","severity":1,"message":"340","line":90,"column":3,"nodeType":"341","endLine":90,"endColumn":38},{"ruleId":"294","severity":1,"message":"382","line":168,"column":70,"nodeType":"296","endLine":168,"endColumn":87,"suggestions":"383"},{"ruleId":"294","severity":1,"message":"384","line":170,"column":31,"nodeType":"296","endLine":170,"endColumn":73,"suggestions":"385"},"no-native-reassign",["386"],"no-negated-in-lhs",["387"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'ClickAwayListener' is defined but never used.","'Typography' is defined but never used.","'setShowMenu' is assigned a value but never used.","'fold' is assigned a value but never used.","'handleClickAway' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SwipeableDrawer' is defined but never used.","'Button' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'ArrowRightIcon' is defined but never used.","'ArrowDropDownIcon' is defined but never used.","'initNavTree' is defined but never used.","'layoutStateHash' is assigned a value but never used.","'foldStateHash' is assigned a value but never used.","'editorStateHash' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchStateFromCookies' and 'saveStateToCookies'. Either include them or remove the dependency array.","ArrayExpression",["388"],"React Hook useEffect has a missing dependency: 'saveStateToCookies'. Either include it or remove the dependency array.",["389"],"React Hook useEffect has a missing dependency: 'layoutState'. Either include it or remove the dependency array.",["390"],"React Hook useMemo has an unnecessary dependency: 'curHash'. Either exclude it or remove the dependency array.",["391"],"React Hook useMemo has missing dependencies: 'foldOverrideCallback', 'layoutState.curFold', and 'layoutState.showEditor'. Either include them or remove the dependency array.",["392"],"'useState' is defined but never used.","'useRef' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["386"],["387"],"'useLoader' is defined but never used.","'useUpdate' is defined but never used.","'useSpring' is defined but never used.","'useSprings' is defined but never used.","'animated' is defined but never used.","'config' is defined but never used.","'Folds' is defined but never used.","'paperSize' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-dupe-keys","Duplicate key 'width'.","ObjectExpression","'Canvas' is defined but never used.","'useThree' is defined but never used.","'extend' is defined but never used.","'position' is assigned a value but never used.","'scale' is assigned a value but never used.","'foldLastUpdated' is assigned a value but never used.","'instructions' is assigned a value but never used.","'setInstructions' is assigned a value but never used.","'rotation' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'foldKey'. Either exclude it or remove the dependency array.",["393"],"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","React Hook useEffect has missing dependencies: 'foldState.maxSteps', 'performCommands', 'prevStep', and 'stepArray'. Either include them or remove the dependency array.",["394"],"React Hook useEffect has missing dependencies: 'initFold', 'readInstructionsIntoState', 'setFoldObj', and 'setFoldState'. Either include them or remove the dependency array.",["395"],"'setLayoutState' is defined but never used.","'page' is assigned a value but never used.","'createRef' is defined but never used.","'AnimatedCard' is assigned a value but never used.","'posHash' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'layoutState.useImages'. Either exclude it or remove the dependency array. Outer scope values like 'layoutState.useImages' aren't valid dependencies because mutating them doesn't re-render the component.",["396"],"'windowHeight' is assigned a value but never used.","'cardRefs' is assigned a value but never used.","'setCardRefs' is assigned a value but never used.","'curHash' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'classes.fold_controls_button' and 'classes.fold_controls_button_label'. Either include them or remove the dependency array.",["397"],"React Hook useMemo has an unnecessary dependency: 'window.innerWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.innerWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["398"],"'Card' is defined but never used.","'createCard' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'cardRefs'. Either include it or remove the dependency array. You can also do a functional update 'setCardRefs(c => ...)' if you only need 'cardRefs' in the 'setCardRefs' call.",["399"],"'SkipPrevious' is defined but never used.","'SkipNext' is defined but never used.","'setFoldState' is assigned a value but never used.","'setHash' is assigned a value but never used.","'buttonClasses' is assigned a value but never used.",["400"],"'ctrlLeft' is assigned a value but never used.",["401"],"'Tooltip' is defined but never used.","'ButtonGroup' is defined but never used.","'changeStep' is assigned a value but never used.",["402"],"React Hook useMemo has unnecessary dependencies: 'window.innerHeight' and 'window.innerWidth'. Either exclude them or remove the dependency array. Outer scope values like 'window.innerWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["403"],"'stepArray' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'initFold'. Either include it or remove the dependency array.",["404"],"React Hook useMemo has a missing dependency: 'initFold.instructions'. Either include it or remove the dependency array.",["405"],"React Hook useEffect has missing dependencies: 'initFold', 'maxLevel', and 'renderNode'. Either include them or remove the dependency array.",["406"],"no-global-assign","no-unsafe-negation",{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"413","fix":"427"},{"desc":"428","fix":"429"},{"desc":"425","fix":"430"},{"desc":"413","fix":"431"},{"desc":"425","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},"Update the dependencies array to be: [fetchStateFromCookies, saveStateToCookies]",{"range":"441","text":"442"},"Update the dependencies array to be: [layoutState.hash, foldState.hash, editorState.hash, saveStateToCookies]",{"range":"443","text":"444"},"Update the dependencies array to be: [layoutState, layoutState.curFold]",{"range":"445","text":"446"},"Update the dependencies array to be: []",{"range":"447","text":"448"},"Update the dependencies array to be: [foldOverrideCallback, layoutState.curFold, layoutState.page, layoutState.showEditor, windowHeight]",{"range":"449","text":"450"},"Update the dependencies array to be: [foldState.selectedLevel]",{"range":"451","text":"452"},"Update the dependencies array to be: [foldState.maxSteps, foldState.stepIndex, performCommands, prevStep, stepArray]",{"range":"453","text":"454"},"Update the dependencies array to be: [foldKey, initFold, readInstructionsIntoState, setFoldObj, setFoldState, stepArray.length]",{"range":"455","text":"456"},"Update the dependencies array to be: [name]",{"range":"457","text":"458"},"Update the dependencies array to be: [classes.fold_controls_button, classes.fold_controls_button_label]",{"range":"459","text":"460"},{"range":"461","text":"448"},"Update the dependencies array to be: [cardList.length, cardRefs]",{"range":"462","text":"463"},{"range":"464","text":"460"},{"range":"465","text":"448"},{"range":"466","text":"460"},"Update the dependencies array to be: [layoutState.expandHierarchy]",{"range":"467","text":"468"},"Update the dependencies array to be: [initFold, foldState.selectedLevel]",{"range":"469","text":"470"},"Update the dependencies array to be: [initFold.instructions]",{"range":"471","text":"472"},"Update the dependencies array to be: [foldState.selectedLevel, foldLastUpdated, initFold, maxLevel, renderNode]",{"range":"473","text":"474"},[4268,4270],"[fetchStateFromCookies, saveStateToCookies]",[4321,4373],"[layoutState.hash, foldState.hash, editorState.hash, saveStateToCookies]",[4459,4480],"[layoutState, layoutState.curFold]",[4682,4691],"[]",[4794,4826],"[foldOverrideCallback, layoutState.curFold, layoutState.page, layoutState.showEditor, windowHeight]",[19500,19588],"[foldState.selectedLevel]",[19623,19644],"[foldState.maxSteps, foldState.stepIndex, performCommands, prevStep, stepArray]",[19673,19700],"[foldKey, initFold, readInstructionsIntoState, setFoldObj, setFoldState, stepArray.length]",[3903,3942],"[name]",[1656,1658],"[classes.fold_controls_button, classes.fold_controls_button_label]",[1832,1851],[1285,1302],"[cardList.length, cardRefs]",[3537,3539],[3634,3653],[2437,2439],[2605,2673],"[layoutState.expandHierarchy]",[2720,2816],"[initFold, foldState.selectedLevel]",[5080,5097],"[initFold.instructions]",[5130,5172],"[foldState.selectedLevel, foldLastUpdated, initFold, maxLevel, renderNode]"]
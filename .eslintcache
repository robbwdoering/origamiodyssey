[{"/home/bbor/dev/origamiodyssey/src/index.js":"1","/home/bbor/dev/origamiodyssey/src/layout/Header.js":"2","/home/bbor/dev/origamiodyssey/src/layout/Body.js":"3","/home/bbor/dev/origamiodyssey/src/layout/Footer.js":"4","/home/bbor/dev/origamiodyssey/src/layout/pages/Splash.js":"5","/home/bbor/dev/origamiodyssey/src/layout/pages/Lesson.js":"6","/home/bbor/dev/origamiodyssey/src/infra/constants.js":"7","/home/bbor/dev/origamiodyssey/src/anim/Scene.js":"8","/home/bbor/dev/origamiodyssey/src/infra/appReducer.js":"9","/home/bbor/dev/origamiodyssey/src/style/theme.js":"10","/home/bbor/dev/origamiodyssey/src/anim/Paper.js":"11","/home/bbor/dev/origamiodyssey/src/infra/actions.js":"12","/home/bbor/dev/origamiodyssey/src/layout/NavDrawer.js":"13","/home/bbor/dev/origamiodyssey/src/layout/pages/ModelSelect.js":"14","/home/bbor/dev/origamiodyssey/src/layout/pages/FoldControls.js":"15","/home/bbor/dev/origamiodyssey/src/layout/pages/User.js":"16","/home/bbor/dev/origamiodyssey/src/static/lettering.js":"17","/home/bbor/dev/origamiodyssey/src/layout/pages/FoldEditorCards.js":"18","/home/bbor/dev/origamiodyssey/src/infra/utils.js":"19","/home/bbor/dev/origamiodyssey/src/layout/pages/InstructionalHierarchy.js":"20","/home/bbor/dev/origamiodyssey/src/layout/pages/ModelCard.js":"21","/home/bbor/dev/origamiodyssey/src/layout/pages/Timer.js":"22"},{"size":2295,"mtime":1619380718747,"results":"23","hashOfConfig":"24"},{"size":2172,"mtime":1619842262830,"results":"25","hashOfConfig":"24"},{"size":6257,"mtime":1619924818867,"results":"26","hashOfConfig":"24"},{"size":442,"mtime":1616978827522,"results":"27","hashOfConfig":"24"},{"size":0,"mtime":1616978827522,"results":"28","hashOfConfig":"24"},{"size":131,"mtime":1613020940457,"results":"29","hashOfConfig":"24"},{"size":7826,"mtime":1619916712942,"results":"30","hashOfConfig":"24"},{"size":3675,"mtime":1619842262830,"results":"31","hashOfConfig":"24"},{"size":2468,"mtime":1619924399763,"results":"32","hashOfConfig":"24"},{"size":7852,"mtime":1619917253786,"results":"33","hashOfConfig":"24"},{"size":31590,"mtime":1619880025220,"results":"34","hashOfConfig":"24"},{"size":741,"mtime":1619909058520,"results":"35","hashOfConfig":"24"},{"size":5667,"mtime":1619381326537,"results":"36","hashOfConfig":"24"},{"size":6327,"mtime":1619842262830,"results":"37","hashOfConfig":"24"},{"size":2814,"mtime":1616978827522,"results":"38","hashOfConfig":"24"},{"size":12763,"mtime":1619925620156,"results":"39","hashOfConfig":"24"},{"size":14459,"mtime":1619825902551,"results":"40","hashOfConfig":"24"},{"size":9940,"mtime":1619882527979,"results":"41","hashOfConfig":"24"},{"size":5820,"mtime":1619921141227,"results":"42","hashOfConfig":"24"},{"size":15705,"mtime":1619915413801,"results":"43","hashOfConfig":"24"},{"size":6441,"mtime":1619833426774,"results":"44","hashOfConfig":"24"},{"size":9445,"mtime":1619923998429,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"eii7vj",{"filePath":"49","messages":"50","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"48"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"48"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"48"},"/home/bbor/dev/origamiodyssey/src/index.js",[],["108","109"],"/home/bbor/dev/origamiodyssey/src/layout/Header.js",["110","111","112","113","114","115","116","117","118","119","120"],"/**\n * FILENAME: Header.js\n *\n * DESCRIPTION: Renders the basic of the animation.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n\tAppBar,\n\tClickAwayListener,\n\tToolbar,\n\tIconButton,\n\tTypography,\n\tMenu,\n\tMenuItem,\n\tInputBase\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\n\n// import OriDomi from \"oridomi\";\nimport { setShowNavDrawer, setFoldState, setLayoutState } from './../infra/actions';\nimport useStyles from './../style/theme.js';\nimport Lettering from './../static/lettering.js';\n\nexport const Header = props => {\n\tconst { setShowNavDrawer, setFoldState, setLayoutState } = props;\n\n\tconst [showMenu, setShowMenu] = useState(false);\n\n\tconst styles = useStyles();\n\tconst fold = useRef(null);\n\n\tconst toggleMenu = e => {\n\t\tsetShowNavDrawer();\n\t};\n\n\tconst handleClickAway = e => {\n\t\tsetShowNavDrawer(false);\n\t};\n\n\tconst handleClickLogo = e => {\n\t\tsetFoldState(null);\n\t\tsetLayoutState(null);\n\t};\n\n\tconst handleSearchChange = event => {\n\t\tsetLayoutState({\n\t\t\tsearchStr: event.target.value || ''\n\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<AppBar className={styles.appBarContainer}>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\tclassName=\"menu-button\"\n\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\taria-label=\"open drawer\"\n\t\t\t\t\t\tonClick={toggleMenu}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<div className={styles.appLettering} onClick={toggleMenu}>\n\t\t\t\t\t\t<Lettering style={{maxWidth: window.innerWidth }} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={styles.searchContainer}>\n\t\t\t\t\t\t<div className={styles.searchIcon}>\n\t\t\t\t\t\t\t<SearchIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<InputBase\n\t\t\t\t\t\t\tplaceholder=\"Search Modelsâ€¦\"\n\t\t\t\t\t\t\tclasses={{ root: styles.inputRoot, input: styles.inputInput }}\n\t\t\t\t\t\t\tinputProps={{ 'aria-label': 'search' }}\n\t\t\t\t\t\t\tonChange={handleSearchChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {};\n};\n\nexport default connect(mapStateToProps, { setShowNavDrawer, setFoldState, setLayoutState })(Header);\n","/home/bbor/dev/origamiodyssey/src/layout/Body.js",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"/home/bbor/dev/origamiodyssey/src/layout/Footer.js",["140","141","142","143","144"],"/**\n * FILENAME: Scene.js \n *\n * DESCRIPTION: Renders the basic of the animation. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nexport const Footer = props => {\n\tconst { } = props;\n\n\treturn (\n\t\t<div className=\"footer\">\n\t\t</div>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {};\n};\n\nexport default connect(mapStateToProps, {})(Footer);\n","/home/bbor/dev/origamiodyssey/src/layout/pages/Splash.js",[],"/home/bbor/dev/origamiodyssey/src/layout/pages/Lesson.js",[],["145","146"],"/home/bbor/dev/origamiodyssey/src/infra/constants.js",["147","148","149","150","151","152","153","154","155"],"/**\n * FILENAME: Constants.js\n *\n * DESCRIPTION: Contains constants for use accross the app.\n */\n\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport SchoolIcon from '@material-ui/icons/School';\nimport ClassIcon from '@material-ui/icons/Class';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\n\n// The FOLD files\nimport BirdBase from './../folds/BirdBase.json';\nimport BoatBase from './../folds/BoatBase.json';\nimport FrogBase from './../folds/FrogBase.json';\nimport WaterBombBase from './../folds/WaterBombBase.json';\nimport SailBoat from './../folds/SailBoat.json';\nimport Heart from './../folds/Heart.json';\nimport Crane from './../folds/Crane.json';\nimport Butterfly from './../folds/Butterfly.json';\nimport Lily from './../folds/Lily.json';\n\n// Images\nimport lilyImage from './../static/lily_thumbnail.png';\nimport craneImage from './../static/crane_thumbnail.png';\nimport butterflyImage from './../static/butterfly_thumbnail.png';\nimport heartImage from './../static/heart_thumbnail.png';\nimport sailboatImage from './../static/sailboat_thumbnail.png';\nimport waterbomb_baseImage from './../static/waterbomb_base_thumbnail.png';\nimport boat_baseImage from './../static/boat_base_thumbnail.png';\nimport bird_baseImage from './../static/bird_base_thumbnail.png';\n\nexport const Pages = {\n\tSplash: 'Splash',\n\tModelSelect: 'ModelSelect',\n\tFold: 'Fold',\n\tUser: 'User',\n\n\t// Used but undefined\n\tLesson: 'Lesson',\n\tHistory: 'History',\n\tLearnDashboard: 'LearnDashboard',\n\tTeachDashboard: 'TeachDashboard'\n};\n\nexport const TagCategories = {\n\ttype: {\n\t\ttext: 'Type',\n\t\txs: 6,\n\t\tsm: 4,\n\t\tmd: 2\n\t},\n\tauthor: {\n\t\ttext: 'Author',\n\t\txs: 6,\n\t\tsm: 4,\n\t\tmd: 2\n\t},\n\tcounterpart: {\n\t\ttext: 'Object',\n\t\txs: 12,\n\t\tsm: 8,\n\t\tmd: 4\n\t},\n\tduration: {\n\t\ttext: 'Time',\n\t\txs: 12,\n\t\tsm: 8,\n\t\tmd: 4\n\t}\n};\n\nexport const Tags = {\n\tbase: {\n\t\ttext: 'Base',\n\t\tcategory: 'type'\n\t},\n\tmodel: {\n\t\ttext: 'Model',\n\t\tcategory: 'type'\n\t},\n\ttraditional: {\n\t\ttext: 'Traditional',\n\t\tcategory: 'author'\n\t},\n\tbird: {\n\t\ttext: 'Bird',\n\t\tcategory: 'counterpart'\n\t},\n\tinsect: {\n\t\ttext: 'Insect',\n\t\tcategory: 'counterpart'\n\t},\n\tanimal: {\n\t\ttext: 'Animal',\n\t\tcategory: 'counterpart'\n\t},\n\tboat: {\n\t\ttext: 'Boat',\n\t\tcategory: 'counterpart'\n\t},\n\tflower: {\n\t\ttext: 'Flower',\n\t\tcategory: 'counterpart'\n\t},\n\tfive_mins: {\n\t\ttext: '5 Mins',\n\t\tcategory: 'duration'\n\t},\n\tfifteen_mins: {\n\t\ttext: '15 Mins',\n\t\tcategory: 'duration'\n\t},\n\tthirty_mins: {\n\t\ttext: '30 Mins',\n\t\tcategory: 'duration'\n\t},\n\thour_plus: {\n\t\ttext: '1+ hours',\n\t\tcategory: 'duration'\n\t}\n};\n\nexport const Folds = {\n\tSailBoat: {\n\t\tname: 'Sail Boat',\n\t\tstaticImg: sailboatImage,\n\t\tdescription: 'An assymetrical sailboat with a built in kickstand - perfect for display.',\n\t\ttags: ['model', 'boat', 'five_mins'],\n\t\tauthor: 'Traditional',\n\t\tjson: SailBoat\n\t},\n\tHeart: {\n\t\tname: 'Heart',\n\t\tstaticImg: heartImage,\n\t\tdescription: \"A flat heart that's particularly easy to fold - a great place to start.\",\n\t\ttags: ['model', 'five_mins'],\n\t\tauthor: 'Traditional',\n\t\tjson: Heart\n\t},\n\tCrane: {\n\t\tname: 'Crane',\n\t\tstaticImg: craneImage,\n\t\tdescription: 'The quintessential origami model - fold 1000 of these!',\n\t\ttags: ['model', 'fifteen_mins', 'bird', 'animal'],\n\t\tauthor: 'Traditional',\n\t\tjson: Crane\n\t},\n\tButterfly: {\n\t\tname: 'Butterfly',\n\t\tstaticImg: butterflyImage,\n\t\tdescription: 'A 3D flapping butterfly built upon a boat base.',\n\t\ttags: ['model', 'five_mins', 'insect', 'animal'],\n\t\tauthor: 'Traditional',\n\t\tjson: Butterfly\n\t},\n\tLily: {\n\t\tname: 'Lily',\n\t\tstaticImg: lilyImage,\n\t\tdescription: 'A symmetrical flower perfect for a boquet, or mounted on a folded stem.',\n\t\ttags: ['model', 'fifteen_mins', 'flower'],\n\t\tauthor: 'Traditional',\n\t\tjson: Lily\n\t},\n\tBirdBase: {\n\t\tname: 'Bird Base',\n\t\tstaticImg: bird_baseImage,\n\t\tdescription: 'The first base many learn, this is perfect for winged creations such as birds and dragons.',\n\t\ttags: ['base'],\n\t\tauthor: 'Traditional',\n\t\tjson: BirdBase\n\t},\n\tWaterBombBase: {\n\t\tname: 'Waterbomb Base',\n\t\tstaticImg: waterbomb_baseImage,\n\t\tdescription: 'A very simple base with four flaps.',\n\t\ttags: ['base'],\n\t\tauthor: 'Traditional',\n\t\tjson: WaterBombBase\n\t},\n\tBoatBase: {\n\t\tname: 'Boat Base',\n\t\tstaticImg: boat_baseImage,\n\t\tdescription: 'A more specific base for blocky models, such as boats and frames.',\n\t\ttags: ['base'],\n\t\tauthor: 'Traditional',\n\t\tjson: BoatBase\n\t}\n};\n\nexport const initAppReducerState = {\n\tlayoutState: {\n\t\thash: 0,\n\t\tpage: Pages.ModelSelect,\n\t\tcurFold: null,\n\t\tuseImages: false,\n\t\tshowEditor: true,\n\t\texpandHierarchy: false,\n\t\tsearchStr: ''\n\t},\n\tfoldState: {\n\t\thash: 0,\n\t\tstepIdx: -1, // Depends on selected level\n\t\tactive: false,\n\t\toverrideWithEditor: false,\n\t\tusingDefaults: true,\n\t\trepeatRoot: -1,\n\t\trepeatRange: null,\n\t\tlastRecordedTimer: 0,\n\t\tlastRecordedLikert: 0\n\t},\n\teditorState: {\n\t\thash: 0,\n\t\tedgeHighlights: [],\n\t\tvertexHighlights: [],\n\t\tfaceHighlights: [],\n\t\tshowEdges: false,\n\t\tshowVertices: false,\n\t\tshowFaces: true,\n\t\tshowTriangulations: false,\n\t\tshowLables: false\n\t},\n\tuserState: {\n\t\thash: 0,\n\t\tshowEditor: false,\n\t\tusername: null,\n\t\tshowTimerAssess: false,\n\t\tshowLikertAssess: false,\n\t\tmodelList: [],\n\t\tfoldHistory: []\n\t},\n\tshowNavDrawer: false\n};\n\nexport const Actions = {\n\tSET_LAYOUT_STATE: 'SET_LAYOUT_STATE',\n\tSET_SHOW_NAV_DRAWER: 'SET_SHOW_NAV_DRAWER',\n\tSET_PAGE_CONFIG: 'SET_PAGE_CONFIG',\n\tSET_FOLD_STATE: 'SET_FOLD_STATE',\n\tSET_EDITOR_STATE: 'SET_EDITOR_STATE',\n\tSET_USER_STATE: 'SET_USER_STATE',\n\tADD_HISTORY_ENTRY: 'ADD_HISTORY_ENTRY'\n};\n\nexport const initNavTree = [\n\t{\n\t\ttext: 'Return to Fold',\n\t\tconditional: \"is_saved_fold\",\n\t\tclassName: \"primary-drawer-node\",\n\t\tkey: Pages.Fold \n\t},\n\t{\n\t\ttext: 'Model Select',\n\t\tkey: Pages.ModelSelect \n\t},\n\t{\n\t\ttext: 'User Page',\n\t\tconditional: \"is_logged_in\",\n\t\tkey: Pages.User \n\t},\n\t{\n\t\ttext: 'Login / Register',\n\t\tconditional: \"is_not_logged_in\",\n\t\tkey: 'login' \n\t},\n\t// {\n\t// \ttext: 'What is Origami?',\n\t// \tkey: 'context_root',\n\t// \tchildren: [\n\t// \t\t{\n\t// \t\t\ttext: 'History',\n\t// \t\t\tkey: 'history'\n\t// \t\t},\n\t// \t\t{\n\t// \t\t\ttext: 'Origami Today',\n\t// \t\t\tkey: 'current_origami'\n\t// \t\t},\n\t// \t\t{\n\t// \t\t\ttext: 'Practical Origami',\n\t// \t\t\tkey: 'practical'\n\t// \t\t}\n\t// \t]\n\t// },\n\t// {\n\t// \ttext: 'Learn Origami',\n\t// \tkey: 'learn_root',\n\t// \tchildren: [\n\t// \t\t{\n\t// \t\t\ticon: <DashboardIcon />,\n\t// \t\t\ttext: 'Dashboard',\n\t// \t\t\tkey: 'learn_dashboard'\n\t// \t\t},\n\t// \t\t{\n\t// \t\t\ticon: <GroupAddIcon />,\n\t// \t\t\ttext: 'Join Class',\n\t// \t\t\tkey: 'join_class'\n\t// \t\t}\n\t// \t]\n\t// },\n\t// {\n\t// \ttext: 'Teach Origami',\n\t// \tkey: 'teach_root',\n\t// \tchildren: [\n\t// \t\t{\n\t// \t\t\ticon: <DashboardIcon />,\n\t// \t\t\ttext: 'Lesson Plans',\n\t// \t\t\tkey: 'lesson_plan_dashboard'\n\t// \t\t},\n\t// \t\t{\n\t// \t\t\ticon: <SchoolIcon />,\n\t// \t\t\ttext: 'Read Research Paper',\n\t// \t\t\tkey: 'google_scholar'\n\t// \t\t},\n\t// \t\t{\n\t// \t\t\ticon: <ClassIcon />,\n\t// \t\t\ttext: 'Origami in the Classroom',\n\t// \t\t\tkey: 'teaching_tips'\n\t// \t\t}\n\t// \t]\n\t// },\n\t{\n\t\ticon: <GitHubIcon />,\n\t\ttext: 'Source Code',\n\t\tkey: 'github'\n\t}\n];\n\nexport const initFoldState = {\n\t//place to store buffer geo vertex data\n\tpositions: [],\n\t//place to store buffer geo vertex colors\n\tcolors: [],\n\tindices: [],\n\tnodes: [],\n\tfaces: [],\n\tedges: [],\n\tcreases: [],\n\tvertices: [], //indexed vertices array\n\tfold: null,\n\tcreaseParams: null\n};\n\n/*\nexport const Lines = {\n    U: hingeLines,\n    M: mountainLines,\n    V: valleyLines,\n    C: cutLines,\n    F: facetLines,\n    B: borderLines\n};\n*/\n","/home/bbor/dev/origamiodyssey/src/anim/Scene.js",["156","157","158","159","160","161","162","163","164","165","166","167","168"],"/**\n * FILENAME: Scene.js \n *\n * DESCRIPTION: Renders the basic of the animation. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\n// Threejs - 3D Animation\nimport { Canvas, useFrame, useThree, useLoader, extend } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n// React Spring - animation\nimport { useUpdate, useSpring, useSprings, animated, config }  from 'react-spring';\n// import { a, useTransition, Transition } from '@react-spring/three';\n\nimport { Paper } from \"./Paper\";\nimport { Pages, Folds } from \"./../infra/constants\";\nimport { setLayoutState, setFoldState } from \"./../infra/actions\";\n\n// Extend will make OrbitControls available as a JSX element called orbitControls for us to use.\nextend({ OrbitControls });\n\nconst CameraControls = () => {\n\t// Get a reference to the Three.js Camera, and the canvas html element.\n\t// We need these to setup the OrbitControls class.\n\t// https://threejs.org/docs/#examples/en/controls/OrbitControls\n\tconst {\n\t\tcamera,\n\t\tgl: { domElement }\n\t} = useThree();\n\n\tconst controls = useRef();\n\n\tuseFrame(({ gl }) => {\n\t\tgl.setClearColor(0xf1f4f4, 1);\n\t\treturn controls.current.update();\n\t});\n\n\treturn (\n\t\t<orbitControls\n\t\t\tref={controls}\n\t\t\targs={[camera, domElement]}\n\t\t\tenableZoom={true}\n\t\t\tenableRotate={true}\n\t\t\tenableDolly={false}\n\t\t\tmouseButtons={{\n\t\t\t\tRIGHT: THREE.MOUSE.ROTATE,\n\t\t\t\tLEFT: THREE.MOUSE.ROTATE,\n\t\t\t\tMIDDLE: THREE.MOUSE.PAN,\n\t\t\t}}\n\t\t\t// maxAzimuthAngle={Math.PI / 4}\n\t\t\t// maxPolarAngle={Math.PI * 3 / 4}\n\t\t\t// minAzimuthAngle={-Math.PI / 4}\n\t\t\t// minPolarAngle={-Math.PI * 3 / 4}\n\t\t/>\n\t);\n};\n\n/**\n * Main component.\n */\nexport const Scene = props => {\n\tconst { initFold, foldLastUpdated, paperSize, layoutState, layoutStateHash, foldState, foldStateHash, setFoldState, editorState, editorStateHash } = props;\n\tconst [overlays, setOverlays] = useState({});\n\tconst [overlayPos, setOverlayPos] = useState({});\n\n\tconst ctrlOverlay = inArr => {\n\t\tconst newOverlays = Object.assign({}, overlays);\n\t\tconst newOverlayPos = Object.assign({}, overlayPos);\n\n\t\tinArr.forEach(({ show, name, component, pos }) => {\n\t\t\tif (show) {\n\t\t\t\tnewOverlays[name] = component;\n\n\t\t\t\tif (pos) {\n\t\t\t\t\toverlayPos[name] = pos;\n\t\t\t\t}\n\t\t\t} else if (!show && newOverlays[name]) {\n\t\t\t\tdelete newOverlays[name];\n\t\t\t\tdelete overlayPos[name];\n\t\t\t}\n\t\t})\n\n\t\tsetOverlays(newOverlays);\n\t\tsetOverlayPos(overlayPos)\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Canvas camera={{fov: 100, position: [0, 1.8, 0]}} onCreated={state => state.gl.setClearColor(\"red\")} >\n\t\t\t\t<spotLight position={[5, 10, 0]} color='#f1f1ff' distance={100} penumbra={0.75} decay={2} />\n\t\t\t\t<CameraControls />\n\n\t\t\t\t<Paper\n\t\t\t\t\tposition={[0, 0, 0]}\n\t\t\t\t\tscale={10}\n\t\t\t\t\tinitFold={initFold}\n\t\t\t\t\tfoldLastUpdated={foldLastUpdated}\n\t\t\t\t\tfoldKey={layoutState.curFold}\n\t\t\t\t\tfoldState={foldState}\n\t\t\t\t\tfoldStateHash={foldStateHash}\n\t\t\t\t\teditorState={editorState}\n\t\t\t\t\teditorStateHash={editorStateHash}\n\t\t\t\t\tsetFoldState={setFoldState}\n\t\t\t\t\tinitStep={-1}\n\t\t\t\t\tctrlOverlay={ctrlOverlay}\n\t\t\t\t\toverlayPos={overlayPos}\n\t\t\t\t/>\n\t\t\t</Canvas>\n\t\t\t{Object.values(overlays)}\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState,\n\t\tlayoutStateHash: state.appReducer.layoutState.hash,\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash,\n\t\teditorState: state.appReducer.editorState,\n\t\teditorStateHash: state.appReducer.editorState.hash,\n\t};\n};\n\nexport default connect(mapStateToProps, { setLayoutState, setFoldState })(Scene);\n","/home/bbor/dev/origamiodyssey/src/infra/appReducer.js",["169"],"/**\n * FILENAME: appReducer.js\n *\n * DESCRIPTION: Handles state update for all layout actions.\n */\n\nimport supermemo2 from 'supermemo2';\nimport { initAppReducerState, Actions } from './constants';\n\nconst finalInitState = JSON.parse(JSON.stringify(initAppReducerState));\n\nexport const appReducer = (state = finalInitState, action) => {\n\tlet newState = Object.assign({}, state);\n\n\tswitch (action.type) {\n\t\tcase Actions.SET_SHOW_NAV_DRAWER:\n\t\t\t// If passed a val set to that, otherwise toggle\n\t\t\tnewState.showNavDrawer = action.payload !== undefined ? action.payload : !newState.showNavDrawer;\n\t\t\tbreak;\n\t\tcase Actions.SET_LAYOUT_STATE:\n\t\t\tconsole.log('[SET_LAYOUT_STATE]', action.payload);\n\t\t\tObject.assign(newState.layoutState, action.payload || initAppReducerState.layoutState);\n\t\t\tnewState.layoutState.hash++;\n\t\t\tbreak;\n\t\tcase Actions.SET_FOLD_STATE:\n\t\t\tconsole.log('[SET_FOLD_STATE]', action.payload);\n\t\t\tObject.assign(newState.foldState, action.payload || initAppReducerState.foldState);\n\t\t\tnewState.foldState.hash++;\n\t\t\tbreak;\n\t\tcase Actions.SET_EDITOR_STATE:\n\t\t\tconsole.log('[SET_EDITOR_STATE]', action.payload);\n\t\t\tObject.assign(newState.editorState, action.payload || initAppReducerState.editorState);\n\t\t\tnewState.editorState.hash++;\n\t\t\tbreak;\n\t\tcase Actions.SET_USER_STATE:\n\t\t\tconsole.log('[SET_USER_STATE]', action.payload);\n\t\t\tObject.assign(newState.userState, action.payload || initAppReducerState.userState);\n\t\t\tnewState.userState.hash++;\n\t\t\tbreak;\n\t\tcase Actions.ADD_HISTORY_ENTRY:\n\t\t\tif (!action.payload) {\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tnewState.userState.foldHistory.push(action.payload)\n\n\t\t\t// If this model type is part of the memo algorithm, update that entry \n\t\t\tconst idx = newState.userState.modelList.findIndex(model => model.foldKey === action.payload.foldKey);\n\t\t\tif (idx !== -1) {\n\t\t\t\tconsole.log(\"Modifying entry for \", action.payload.foldKey);\n\n\t\t\t\t// Update the spaced learning params given this new information\n\t\t\t\tconst quality = action.payload.quality;\n\t\t\t\tconst lastSchedule = newState.userState.modelList[idx].schedule\n\t\t\t\tconst lastFactor = newState.userState.modelList[idx].factor\n\t\t\t\tnewState.userState.modelList[idx] = {\n\t\t\t\t\tfoldKey: action.payload.foldKey,\n\t\t\t\t\t...supermemo2(quality, lastSchedule, lastFactor)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Else don't rememeber anything other than the foldHistory row\n\n\t\t\tnewState.userState.hash++;\n\t\t\tconsole.log('[ADD_HISTORY_ENTRY]', action.payload, newState.userState);\n\t\t\tbreak;\n\t}\n\n\treturn newState;\n};\n","/home/bbor/dev/origamiodyssey/src/style/theme.js",["170"],"import { red } from '@material-ui/core/colors';\nimport { createMuiTheme, makeStyles, fade } from '@material-ui/core/styles';\n\n// A custom theme for this app\nexport const theme = createMuiTheme({\n\tpalette: {\n\t\tprimary: {\n\t\t\tmain: '#03506f',\n\t\t\tdark3: '#022e40'\n\t\t},\n\t\tsecondary: {\n\t\t\tmain: '#0a043c'\n\t\t},\n\t\terror: {\n\t\t\tmain: red.A400\n\t\t},\n\t\tbackground: {\n\t\t\tdefault: '#f1f4f4'\n\t\t}\n\t}\n});\n\nexport const useStyles = makeStyles(theme => ({\n\t// Basic Navigation + Layout elements\n\tnavDrawerRoot: {\n\t\tzIndex: 4\n\t},\n\tnavDrawerPaper: {\n\t\tpaddingTop: theme.spacing(8)\n\t},\n\tnavDrawerNode0: {\n\t\tcolor: 'red',\n\t\theight: '200px'\n\t},\n\tnavDrawerNode1: {\n\t\tcolor: 'red'\n\t},\n\tnavDrawerNode2: {\n\t\tcolor: 'red'\n\t},\n\tbodyContainer: {\n\t\tmarginTop: theme.spacing(8),\n\t\ttextAlign: 'center',\n\t\tzIndex: 299\n\t},\n\tcenterColumn: {\n\t\twidth: '100%',\n\t\tmaxWidth: '1200px',\n\t\t// height: \"100%\",\n\t\tmargin: '0 auto',\n\t\tpadding: '32px',\n\t\tzIndex: 300,\n\t\tposition: 'relative',\n\t\tpointerEvents: 'none'\n\t},\n\tcenterColumn_flex: {\n\t\theight: \"100%\",\n\t\twidth: \"100%\",\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"row\",\n\t\tzIndex: 300,\n\t\talignItems: \"flex-end\",\n\t\tpointerEvents: 'none'\n\t},\n\tsceneContainer: {\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tposition: 'absolute',\n\t\tmarginTop: '-128px'\n\t\t// zIndex: 401\n\t},\n\n\t// Page \"main col\" style\n\tpage_Splash: {},\n\tpage_ModelSelect_container: {\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tpointerEvents: 'all'\n\t},\n\tpage_FoldControls: {},\n\tpage_User: {},\n\n\t// Model Cards\n\tmodelCard: {\n\t\tposition: 'absolute'\n\t},\n\tmodelCard__active: {\n\t\tzIndex: 300\n\t},\n\tmodelCard_title: {\n\t\tpadding: '0.5rem',\n\t\ttextAlign: 'left'\n\t},\n\tmodelCard_placeholder: {\n\t\theight: '180px',\n\t\twidth: '200px',\n\t\tdisplay: 'inline-block',\n\t\twidth: '200px',\n\t\tmargin: '0 10px'\n\t},\n\tmodelCard_rail: {\n\t\tflexGrow: 1,\n\t\tflexBasis: '50%',\n\t\theight: '100%'\n\t},\n\tmodelCard_rail_container: {\n\t\tdisplay: 'flex !important',\n\t\tflexDirection: 'row',\n\t\theight: '200px'\n\t},\n\tmodelCard_rail_container__active: {\n\t\theight: '340px !important'\n\t},\n\tmodelCard_foldButton: {\n\t\tmargin: '0 0.5rem 0 auto !important'\n\t},\n\tmodelCard_bodyText: {},\n\tmodelCard_label: {\n\t\ttextAlign: 'left',\n\t\tmarginBottom: '-4px'\n\t},\n\tmodelCard_img: {\n\t\tobjectFit: 'contain !important'\n\t},\n\n\t// Header / App Bar\n\tappBarContainer: {\n\t\tposition: 'static',\n\t\tzIndex: 3000,\n\t\tbackgroundColor: '#022e40 !important'\n\t},\n\tappTitle: {\n\t\tverticalAlign: 'middle'\n\t},\n\tappLettering: {\n\t\theight: '64px !important',\n\t\tpadding: '15px 0',\n\t\tcursor: 'pointer'\n\t},\n\tappLogo: {\n\t\tmarginRight: '1rem'\n\t},\n\tsearchContainer: {\n\t\t// position: 'relative',\n\t\tborderRadius: theme.shape.borderRadius,\n\t\tbackgroundColor: fade(theme.palette.common.white, 0.15),\n\t\t'&:hover': {\n\t\t\tbackgroundColor: fade(theme.palette.common.white, 0.25)\n\t\t},\n\t\tmarginRight: '1rem',\n\t\tmarginLeft: 'auto',\n\t\twidth: '100%',\n\t\t[theme.breakpoints.up('sm')]: {\n\t\t\tmarginLeft: 'auto',\n\t\t\twidth: 'auto'\n\t\t}\n\t},\n\tsearchIcon: {\n\t\tpadding: theme.spacing(0, 2),\n\t\theight: '32px !important',\n\t\tposition: 'absolute',\n\t\tpointerEvents: 'none',\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center'\n\t},\n\tinputRoot: {\n\t\tpaddingLeft: `48px`\n\t},\n\tinputInput: {\n\t\tcolor: '#ffffff',\n\t\tpadding: theme.spacing(1, 20, 1, 0),\n\t\t// vertical padding + font size from searchIcon\n\t\ttransition: theme.transitions.create('width'),\n\t\twidth: '100%',\n\t\t[theme.breakpoints.up('md')]: {\n\t\t\twidth: '20ch'\n\t\t}\n\t},\n\n\t// Fold Controls\n\tfold_controls: {\n\t\twidth: 'min-content',\n\t\tposition: 'absolute',\n\t\tbottom: '64px'\n\t},\n\tfold_controls_button: {\n\t\tpointerEvents: 'all',\n\t\tmargin: '0 2.5% !important',\n\t\tzIndex: 402\n\t},\n\tfold_controls_button_label: {\n\t\tfontSize: '1rem'\n\t},\n\tfold_controls_button_label_large: {\n\t\tfontSize: '2rem'\n\t},\n\tfold_controls_button_container: {\n\t\ttextAlign: \"right\",\n\t\tflexGrow: 1\n\t},\n\tfold_controls_button_icon: {\n\t\tfontSize: '32px !important',\n\t},\n\tfold_controls_button_icon_large: {\n\t\tfontSize: '64px !important'\n\t},\n\tfold_diagrams_container: {\n\t\twidth: '100%',\n\t\tborder: '1px solid blue'\n\t},\n\tfold_timer_container: {\n\t\tposition: 'absolute',\n\t\ttop: '14px',\n\t\tright: '0px',\n\t\tpointerEvents: 'all'\n\t},\n\tfold_timer_control: {\n\t},\n\tfold_timer_snackbar: {\n\t\tpointerEvents: 'all',\n\t\tmarginTop: '64px !important'\n\t},\n\tfold_timer_snackbar_close: {\n\t\tposition: 'absolute !important',\n\t\ttop: '7px',\n\t\tright: '7px'\n\t},\n\tfold_timer: {\n\t},\n\tfold_timer__paused: {\n\t},\n\tfold_timer_grid: {\n\t\twidth: '100%'\n\t},\n\tfold_timer_done_icon: {\n\t\tcolor: '#388e3c !important'\n\t},\n\tlikert_icon_container: {\n\t\tcursor: 'pointer',\n\t\tpadding: '3px 0'\n\t},\n\tlikert_icon: {\n\t},\n\n\t// Fold Editor\n\teditorState: {\n\t\tposition: 'absolute',\n\t\twidth: '400px',\n\t\theight: '25%',\n\t\ttop: '10%',\n\t\tleft: '20px',\n\t\tpadding: '0.5rem !important'\n\t},\n\teditorDetails: {\n\t\tposition: 'absolute',\n\t\twidth: '400px',\n\t\theight: '60%',\n\t\ttop: '37%',\n\t\tleft: '20px',\n\t\tpadding: '0.5rem !important',\n\t\tzIndex: 301\n\t},\n\teditorEntry: {\n\t\tposition: 'absolute',\n\t\twidth: '500px',\n\t\theight: '87%',\n\t\ttop: '10%',\n\t\tright: '20px',\n\t\tpadding: '0.5rem !important'\n\t},\n\teditor_row: {\n\t\theight: '4rem'\n\t},\n\teditor_cardTitle: {\n\t\ttextAlign: 'left',\n\t\tmargin: '0 0 15px 5px !important'\n\t},\n\teditor_jsonTextArea: {\n\t\theight: '90%',\n\t\twidth: '500px',\n\t\tmarginLeft: '-0.5rem'\n\t},\n\teditor_bodyText: {\n\t\tfontSize: '1.25rem !important'\n\t},\n\teditor_floatAction: {\n\t\tposition: 'absolute',\n\t\ttop: '10px',\n\t\tright: '0'\n\t},\n\teditor_select: {\n\t\twidth: '90%'\n\t},\n\teditor_details_expand: {\n\t\tposition: 'absolute !important',\n\t\ttop: '12px',\n\t\tright: '7px',\n\t},\n\n\t// Paper\n\tvertLabel: {\n\t\tposition: 'absolute',\n\t\tzIndex: 3001,\n\t\tfontWeight: 'bold'\n\t},\n\n\t// Instructional Hierarchy\n\thier_card: {\n\t\tposition: 'absolute',\n\t\tpointerEvents: 'all',\n\t\tzIndex: 2999\n\t},\n\thier_expandCtrl: {\n\t\tposition: 'absolute !important',\n\t\tright: '0.5rem',\n\t\ttop: '0.5rem'\n\t},\n\thier_container: {\n\t\twidth: '100%',\n\t\theight: '264px',\n\t\tverticalAlign: 'top',\n\t\tpadding: '0 7px',\n\t\tdisplay: 'inline-flex'\n\t},\n\thier_node_container: {\n\t\tdisplay: 'inline-flex',\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'space-evenly',\n\t\talignItems: 'stretch',\n\t\twidth: '20px',\n\t\theight: '100%'\n\t},\n\thier_node_container_anchor: {\n\t\tposition: \"absolute\",\n\t},\n\thier_node_anchor: {},\n\thier_node: {\n\t\tborderRadius: '10px',\n\t\twidth: '16px',\n\t\tmargin: '2px',\n\t\tcursor: 'pointer'\n\t},\n\thier_node_spacer: {\n\t\theight: '16px'\n\t},\n\thier_node__default: {\n\t\tbackgroundColor: 'rgb(0, 0, 0, 0.05)'\n\t},\n\thier_node__active: {\n\t\tbackgroundColor: '#e3420c'\n\t},\n\thier_node__inUse: {\n\t\tbackgroundColor: '#a33612'\n\t},\n\thier_node_tooltip: {\n\t\tzIndex: '8001 !important'\n\t},\n\thier_node_bookend: {\n\t\twidth: '100%',\n\t\theight: '16px'\n\t},\n\thier_desc_card: {\n\t\tpointerEvents: 'all',\n\t\theight: '200px',\n\t\twidth: '400px',\n\t\tzIndex: 402,\n\t\toverflow: 'visible !important'\n\t},\n\thier_looper_rail: {\n\t\twidth: '100%',\n\t\ttextAlign: 'left'\n\t},\n\thier_looper_container: {\n\t\tzIndex: 402,\n\t\twidth: '400px',\n\t\ttop: '-10px',\n\t\theight: '10px',\n\t\tdisplay: 'flex'\n\t},\n\thier_looper_item: {\n\t\theight: '5px',\n\t\tborderRadius: \"2.5px\",\n\t\tflexGrow: 1,\n\t\tmargin: \"0 2px !important\"\n\t},\n\thier_looper_item__active: {\n\t\tbackgroundColor: '#a33612',\n\t},\n\thier_controls: {\n\t\t// zIndex: 3001\n\t},\n\n\t// Model Select Filter\n\tfilter_container: {\n\t},\n\tfilter_choices: {\n\t\tmarginBottom: \"32px\"\n\t},\n\tfilter_toggle_container: {\n\t\tfloat: \"right\"\n\t},\n\tfilter_clear: {\n\t\tmarginTop: \"-40px !important\",\n\t\tmarginRight: \"-10px !important\",\n\t\tzIndex: 2999\n\t},\n\tfilter_toggle: {\n\t},\n\tfilter_card: {\n\t\twidth: '100%',\n\t\tpointerEvents: 'all'\n\t},\n\tfilter_card__active: {\n\t},\n\n\ttagchip: {\n\t\tmargin: '2px !important'\n\t},\n\ttags__active: {\n\t\tbackgroundColor: \"\"\n\t},\n\n\t// The user page\n\tuser_container: {\n\t\tpointerEvents: 'all'\n\t},\n\tuser_profile: {\n\t\tpadding: \"0.5rem\"\n\t},\n\tuser_pref: {\n\t\tpadding: \"0.5rem\"\n\t},\n\tuser_assistant: {\n\t\tpadding: \"0.5rem\"\n\t},\n\tuser_add_model_button: {\n\t\tfloat: \"right\"\n\t},\n\tuser_models_header: {\n\t\tcolor: \"$\"\n\t},\n\tslimCol: {\n\t\tmaxWidth: \"15rem\"\n\t}\n}));\n\nexport default useStyles;\n","/home/bbor/dev/origamiodyssey/src/anim/Paper.js",["171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"/**\n * FILENAME: Paper.js\n *\n * DESCRIPTION: Simulates a piece of paper.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\n\n// Threejs - 3D Animation\nimport { Canvas, useFrame, useThree, useLoader, extend } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { Line } from '@react-three/drei';\n\n// React Spring - animation\nimport { a, useSpring } from '@react-spring/three';\n// import { a, useTransition, Transition } from '@react-spring/three';\nimport { Chip } from '@material-ui/core';\n\nimport useStyles from './../style/theme';\nimport {\n\tcollectStepsForLevel,\n\tcalcMaxLevel,\n\tstepIs2D,\n\tstepIs3D,\n\tstepHasArgs,\n\tcmdOrderingComparator,\n\tcmdsInvolveEdge,\n\tcmdsInvolveVert\n} from './../infra/utils';\n\nconst edgeMat = new THREE.MeshBasicMaterial({ attach: 'material' });\n\nexport const Paper = props => {\n\tconst {\n\t\tposition,\n\t\tscale,\n\t\tctrlOverlay,\n\t\toverlayItems,\n\t\tinitStep,\n\t\tinitFold,\n\t\tfoldLastUpdated,\n\t\tfoldKey,\n\t\tfoldState,\n\t\tfoldStateHash,\n\t\tsetFoldState,\n\t\teditorState,\n\t\teditorStateHash\n\t} = props;\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\tconst [instructions, setInstructions] = useState(null);\n\tconst [prevStep, setPrevStep] = useState(initStep);\n\n\tconst rotation = useRef([0, 0, 0]);\n\tconst faceGeometry = useRef(null);\n\tconst creasedEdges = useRef(new Set());\n\tconst fold = useRef(null);\n\tconst classes = useStyles();\n\n\tconst {\n\t\tcamera,\n\t\tgl: { domElement }\n\t} = useThree();\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\n\tconst recursiveTriangulation = (curFace, foldObj) => {\n\t\tif (curFace.length <= 3) {\n\t\t\t// If this is a triangle (or invalid...), just push it as is\n\t\t\tfoldObj.faces_vertices.push(curFace);\n\t\t} else {\n\t\t\t// Else push a new triangle, and call this function again on the new shape\n\t\t\tconst [cutIdx] = curFace.splice(1, 1);\n\t\t\tfoldObj.faces_vertices.push([curFace[0], cutIdx, curFace[1]]);\n\t\t\tfoldObj.edges_vertices.push([curFace[0], curFace[1]]);\n\t\t\trecursiveTriangulation(curFace, foldObj);\n\t\t}\n\t};\n\n\tconst hasDuplicate = (item, idx, array, ordered) => {\n\t\treturn (\n\t\t\t!array ||\n\t\t\tarray.find(\n\t\t\t\t(cmpItem, cmpIdx) =>\n\t\t\t\t\tcmpIdx !== idx &&\n\t\t\t\t\t(!ordered || cmpItem.length === item.length) &&\n\t\t\t\t\tcmpItem.every((cmpSub, cmpSubIdx) => (ordered ? item[cmpSubIdx] : item.includes(cmpSub)))\n\t\t\t)\n\t\t);\n\t};\n\n\t/**\n\t * Returns true if there's a problem. Recursively walks the tree.\n\t */\n\tconst checkInstruction = (inst, foldObj) => {\n\t\tlet ret;\n\t\tif (Array.isArray(inst)) {\n\t\t\t// Is this edge part of the edges array?\n\t\t\tret = !hasDuplicate(inst.slice(0, 2), -1, foldObj.edges_vertices) ? inst : false;\n\t\t} else {\n\t\t\tinst.children.some(child => {\n\t\t\t\tret = checkInstruction(child, foldObj)\n\t\t\t\treturn ret;\n\t\t\t});\n\t\t}\n\t\t// console.log(Array.isArray(inst) ? \"leaf\": \"root\", ret);\n\t\treturn ret;\n\t}\n\n\tconst validateFoldObj = foldObj => {\n\t\tlet ret;\n\n\t\t// No duplicate vertices, edges, or faces\n\t\tret = foldObj.vertices_coords.find((item, idx) => hasDuplicate(item, idx, foldObj.vertices_coords, true));\n\t\tif (ret) {\n\t\t\tconsole.error('Found duplicate vertex:', ret);\n\t\t}\n\n\t\tret = foldObj.edges_vertices.find((item, idx) => hasDuplicate(item, idx, foldObj.edges_vertices));\n\t\tif (ret) {\n\t\t\tconsole.error('Found duplicate edge:', ret);\n\t\t}\n\n\t\tret = foldObj.faces_vertices.find((item, idx) => hasDuplicate(item, idx, foldObj.faces_vertices));\n\t\tif (ret) {\n\t\t\tconsole.error('Found duplicate face:', ret);\n\t\t}\n\n\t\t// All initial vertices are in a flat sheet (y==0)\n\t\tret = foldObj.vertices_coords.findIndex((item, idx) => item[1] !== 0);\n\t\tif (ret !== -1) {\n\t\t\tconsole.error(\"Found non-flat initial vertex:\", ret);\n\t\t}\n\n\t\t// Every face edge is an edge\n\t\tret = foldObj.faces_vertices.find((face, faceIdx) => (\n\t\t\tface.some((vert, faceVertIdx) => {\n\t\t\t\tconst otherFaceVertIdx = faceVertIdx ? faceVertIdx - 1 : face.length - 1;\n\t\t\t\treturn !hasDuplicate([vert, face[otherFaceVertIdx]], -1, foldObj.edges_vertices);\n\t\t\t})\n\t\t));\n\t\tif (ret) {\n\t\t\tconsole.error(\"Found an invalid face:\", ret);\n\t\t}\n\t\t// Every edge is in a face\n\t\tret = foldObj.edges_vertices.find((edge, edgeIdx) => (\n\t\t\t!foldObj.faces_vertices.find((face, faceIdx) => {\n\t\t\t\tconst firstIdx = face.indexOf(edge[0]);\n\t\t\t\tconst secIdx = face.indexOf(edge[1]);\n\t\t\t\tif (firstIdx !== -1 && secIdx !== -1) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t(firstIdx === 0 && secIdx === face.length - 1) ||\n\t\t\t\t\t\t(secIdx === 0 && firstIdx === face.length - 1) ||\n\t\t\t\t\t\tMath.abs(firstIdx - secIdx) === 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})\t\n\t\t));\n\t\tif (ret) {\n\t\t\tconsole.error(\"Found an edge that's not reflected in any face: \", ret);\n\t\t}\n\n\t\t// Every instruction refers to existing edges\n\t\tret = checkInstruction(foldObj.instructions, foldObj)\n\t\tif (ret) {\n\t\t\tconsole.error(\"Found an invalid instruction: \", ret)\n\t\t}\n\t};\n\n\tconst setFoldObj = newFold => {\n\t\tlet foldObj = JSON.parse(JSON.stringify(newFold));\n\n\t\tvalidateFoldObj(foldObj);\n\n\t\t// Calculate the boundaries of the 2D shape\n\t\t// const maxes = [0, 2].map(i =>\n\t\t// \tfoldObj.vertices_coords.reduce((max, coords) => (Math.abs(coords[i]) > max ? Math.abs(coords[i]) : max), 0)\n\t\t// );\n\n\t\t// // Re-scale the model to a unit square (1 unit x 1 unit)\n\t\tfoldObj.vertices_coords = foldObj.vertices_coords.map(\n\t\t\tcoords => new THREE.Vector3(coords[0], 0, coords[2])\n\t\t);\n\n\t\tfoldObj.edges_foldAngle = foldObj.edges_vertices.map(() => 180);\n\n\t\t// Triangulate all faces\n\t\tfoldObj.faces_vertices = [];\n\t\tnewFold.faces_vertices.forEach((face, faceIdx) => {\n\t\t\tlet curFace = [...face];\n\t\t\trecursiveTriangulation(curFace, foldObj);\n\t\t});\n\n\t\tfoldObj.faces_normals = foldObj.faces_vertices.map(face => new THREE.Vector3(0, 1, 0));\n\n\t\tconsole.log('[setFoldObj]', foldObj);\n\t\tfold.current = foldObj;\n\t};\n\n\tconst edgeIsTriangulation = (edgeIdx, fold) =>\n\t\t!fold.edges_foldAngle || edgeIdx >= fold.edges_foldAngle.length || edgeIdx < 0;\n\n\t/*\n\t * Reads the hierarchical instructions, collecting some descriptive values and initializing state.\n\t */\n\tconst readInstructionsIntoState = () => {\n\t\t// console.log(\"[readInstructionsIntoState]\")\n\t\tif (fold.current && fold.current.instructions && stepArray.length) {\n\t\t\tconst maxLevel = calcMaxLevel(fold.current.instructions);\n\t\t\tsetFoldState({\n\t\t\t\tmaxLevel: maxLevel,\n\t\t\t\tmaxSteps: stepArray.length,\n\t\t\t\tactive: true \n\t\t\t});\n\t\t}\n\t};\n\n\tconst refreshFaceVertices = () => {\n\t\tif (!fold.current) {\n\t\t\treturn;\n\t\t}\n\n\t\t// NOTE: 9 = 3 coords per vert * 3 vals per coord (such as x,y,z or r,g,b)\n\t\tlet vertices = new Float32Array(9 * fold.current.faces_vertices.length);\n\n\t\tfold.current.faces_vertices.forEach((face, faceIdx) => {\n\t\t\tface.forEach((vertIdx, faceVertIdx) => {\n\t\t\t\tconst coords = fold.current.vertices_coords[vertIdx];\n\t\t\t\tconst startIdx = faceIdx * 9 + faceVertIdx * 3;\n\n\t\t\t\t// Copy over one vertex\n\t\t\t\tvertices[startIdx] = coords.x;\n\t\t\t\tvertices[startIdx + 1] = coords.y;\n\t\t\t\tvertices[startIdx + 2] = coords.z;\n\t\t\t});\n\t\t});\n\n\t\tfaceGeometry.current.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\t};\n\n\t/*\n\t * Initializes the fold state if possible, which involves reading the instructional hierarchy shape.\n\t */\n\tconst initFoldState = () => {\n\t\t// console.log('[initFoldState]', initFold);\n\t\tif (!initFold) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetFoldObj(initFold);\n\n\t\tcreasedEdges.current.clear();\n\n\t\t// NOTE: 9 = 3 coords per vert * 3 vals per coord (such as x,y,z or r,g,b)\n\t\tfaceGeometry.current = new THREE.BufferGeometry();\n\t\tlet vertices = new Float32Array(9 * fold.current.faces_vertices.length);\n\t\tlet normals = new Float32Array(9 * fold.current.faces_vertices.length);\n\t\tlet colors = new Float32Array(9 * fold.current.faces_vertices.length);\n\n\t\tfold.current.faces_vertices.forEach((face, faceIdx) => {\n\t\t\tface.forEach((vertIdx, faceVertIdx) => {\n\t\t\t\tconst coords = fold.current.vertices_coords[vertIdx];\n\t\t\t\tconst startIdx = faceIdx * 9 + faceVertIdx * 3;\n\n\t\t\t\t// Copy over one vertex\n\t\t\t\tvertices[startIdx] = coords.x;\n\t\t\t\tvertices[startIdx + 1] = coords.y;\n\t\t\t\tvertices[startIdx + 2] = coords.z;\n\n\t\t\t\tnormals[startIdx] = 0;\n\t\t\t\tnormals[startIdx + 1] = -1;\n\t\t\t\tnormals[startIdx + 2] = 0;\n\n\t\t\t\tcolors[startIdx] = 200;\n\t\t\t\tcolors[startIdx + 1] = 100;\n\t\t\t\tcolors[startIdx + 2] = 100;\n\t\t\t});\n\t\t});\n\n\t\t// OPTIONALL DEBUGS\n\t\t// for (let i = 0; i < vertices.length; i += 9) {\n\t\t// \tconsole.log(\n\t\t// \t\t`TRI: [(${vertices[i]}, ${vertices[i] + 2}), (${vertices[i + 3]}, ${vertices[i] + 5}), (${\n\t\t// \t\t\tvertices[i] + 6\n\t\t// \t\t}, ${vertices[i] + 8})]`\n\t\t// \t);\n\t\t// }\n\n\t\tfaceGeometry.current.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\t\tfaceGeometry.current.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n\t\tfaceGeometry.current.setAttribute('color', new THREE.BufferAttribute(colors, 3, true));\n\t};\n\n\t/**\n\t * This is the materials used for the paper.\n\t */\n\tconst createMaterial = () => {\n\t\tlet ret = [\n\t\t\t// new THREE.MeshBasicMaterial({\n\t\t\t// \tflatShading: true,\n\t\t\t// \troughness: 1,\n\t\t\t// \tattach: 'material',\n\t\t\t// \tcolor: 0xcccccc\n\t\t\t// \t// side: THREE.DoubleSide\n\t\t\t// }),\n\t\t\tnew THREE.MeshNormalMaterial({\n\t\t\t\tflatShading: true,\n\t\t\t\troughness: 1,\n\t\t\t\tattach: 'material',\n\t\t\t\tcolor: '#0000ff',\n\t\t\t\t// color: new THREE.Color(0xff0000),\n\t\t\t}),\n\t\t\tnew THREE.MeshNormalMaterial({\n\t\t\t\tflatShading: true,\n\t\t\t\troughness: 1,\n\t\t\t\tattach: 'material',\n\t\t\t\tcolor: '#0000ff',\n\t\t\t\t// color: new THREE.Color(0xff0000),\n\t\t\t\tside: THREE.BackSide\n\t\t\t})\n\t\t];\n\n\t\t// ret[0].color.set(new THREE.Color('#0000ff'));\n\n\t\treturn ret;\n\t};\n\n\t/**\n\t * Inspects this vertex - if it's sufficiently close to any other vertex, snap it to that vertex\n\t */\n\tconst snapVertex = (vertIdx) => {\n\t\tconst vert = fold.current.vertices_coords[vertIdx];\n\t\tfold.current.vertices_coords.some((cmpVert, cmpVertIdx) => {\n\t\t\tif (vertIdx === cmpVertIdx) return false;\n\n\t\t\tconst distance = vert.distanceTo(cmpVert)\n\t\t\tif (distance < 0.005 && distance > 0.00001) {\n\t\t\t\t// console.log(`Snapping ${printVect(vert)} to ${printVect(cmpVert)}`);\n\t\t\t\tvert.copy(cmpVert);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The ultimate goal of this function is to update vertex positions.\n\t * IDEA: Handle one folding edge at a time, then propagate out following neighbors\n\t */\n\tconst performInstructions = () => {\n\n\t\tlet curStep = foldState.stepIdx;\n\t\tif (curStep < -1 || curStep >= foldState.maxSteps) {\n\t\t\tcurStep = -1;\n\t\t}\n\n\t\tconst diff = curStep - prevStep;\n\t\t// console.log('[performInstructions] ', `${prevStep} + ${diff} = ${curStep}`, foldState.active);\n\n\t\t// If the fold is not shown and we're changing indices, then assume that\n\t\t// the change is merely a race condition consequence, and that change is coming\n\t\tif (!foldState.active) {\n\t\t\tsetPrevStep(curStep);\n\t\t\treturn;\n\t\t}\n\n\t\tif (diff > 0) {\n\t\t\tfor (let i = 1; i <= diff && stepArray[prevStep + i]; i++) {\n\t\t\t\t// The first item in the stepArray is the path, not a cmd\n\t\t\t\tperformCommands(fold.current, stepArray[prevStep + i].slice(1));\n\t\t\t}\n\t\t} else if (diff < 0) {\n\t\t\t// To do reverse steps, we're just performing fold commands with whatever the prev val was\n\t\t\tfor (let i = 0; i > diff && stepArray[prevStep + i]; i--) {\n\t\t\t\tperformReverseCommands(stepArray[prevStep + i].slice(1), prevStep + i);\n\t\t\t}\n\t\t}\n\n\t\trefreshFaceVertices();\n\n\t\tsetPrevStep(curStep);\n\t};\n\n\t/**\n\t * This is a wrapper for performCommands that instead of performing a command, figured out\n\t * what would need to be done to \"undo\" that command, then does that.\n\t * This is done dyanimcally - this is an obvious target for future performance improvements,\n\t * since this could be calculated on an going basis and stored. It helps that these arrs are short.\n\t * @param step the object for the step to reverse. 2D or 3D array.\n\t * @param idx the index of this step in the stepArray\n\t * @param inSubIdx the inner index for a substep, i.e. child of a 3D array - usually N/A\n\t */\n\tconst performReverseCommands = (step, idx, inSubIdx) => {\n\t\t// console.log('[performReverseCommands]', { step, idx, inSubIdx });\n\t\t// If this is a 3D object, just perform this on all subobjects & exit\n\t\tif (stepIs3D(step)) {\n\t\t\tstep.reverse().forEach((subCmd, revIdx) => performReverseCommands(subCmd, idx, step.length - (revIdx + 1)));\n\t\t\treturn;\n\t\t}\n\n\t\t// This tracks the edges that we still need to find an angle for\n\t\tconst vertsToDo = step.map(arr => [arr[0], arr[1]]);\n\t\tlet newCmds = vertsToDo.map(() => null);\n\n\t\t// Check all the previous substeps in this step for previous fold values\n\t\tif (inSubIdx !== undefined) {\n\t\t\tfor (let j = inSubIdx - 1; j >= 0 && vertsToDo.length; j--) {\n\t\t\t\t// We know these are 2D (could never have substeps)\n\t\t\t\tstepArray[idx][j + 1].forEach(cmd => findLastUsedAngles(cmd, vertsToDo, newCmds, step));\n\t\t\t}\n\t\t}\n\n\t\t// console.log(\"[performReverseCommands] Finished previous substeps.\");\n\n\t\t// Check every step before this one for previous fold values\n\t\tfor (let j = idx - 1; j >= 0 && vertsToDo.length; j--) {\n\t\t\tstepArray[j].slice(1).forEach(cmd => {\n\t\t\t\tif (stepIs2D(cmd)) {\n\t\t\t\t\tcmd.reverse().forEach(subCmd => findLastUsedAngles(subCmd, vertsToDo, newCmds, step));\n\t\t\t\t} else {\n\t\t\t\t\tfindLastUsedAngles(cmd, vertsToDo, newCmds, step);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Any remaining toDo folds should be flattened out\n\t\tif (vertsToDo.length) {\n\t\t\tconst dummyDefaults = vertsToDo.map(pair => [...pair, 180]);\n\t\t\t// console.log(\"dummyDefaults: \", dummyDefaults, step)\n\t\t\tdummyDefaults.forEach(cmd => findLastUsedAngles(cmd, vertsToDo, newCmds, step));\n\t\t}\n\n\t\t// Ensure that any \"flex\" commands are executed first\n\t\tnewCmds.sort(cmdOrderingComparator);\n\n\t\t// Perform the reversed instructions for this step\n\t\tperformCommands(fold.current, newCmds);\n\t};\n\n\tconst findLastUsedAngles = (cmd, vertsToDo, newCmds, origStep) => {\n\t\tconst foundIdx = vertsToDo.findIndex(pair => pair.includes(cmd[0]) && pair.includes(cmd[1]));\n\t\tif (foundIdx !== -1) {\n\t\t\t// Figure out the index of this edge in the original step\n\t\t\tconst origIndex = origStep\n\t\t\t\t.map(cmpCmd => cmpCmd.slice(0, 2))\n\t\t\t\t.findIndex(cmpCmd => cmpCmd.includes(cmd[0]) && cmpCmd.includes(cmd[1]));\n\n\t\t\t// Mark this angle for use\n\t\t\tnewCmds[origIndex] = [...vertsToDo[foundIdx], cmd[2]];\n\n\t\t\t// If the original command had arguments, carry those over\n\t\t\tif (stepHasArgs(origStep[origIndex])) {\n\t\t\t\tnewCmds[origIndex].push(Object.assign({}, origStep[origIndex][3]));\n\t\t\t}\n\n\t\t\t// Don't keep checking for this fold\n\t\t\tvertsToDo.splice(foundIdx, 1);\n\t\t\t// console.log(\"[findLastUsedAngles] \", foundIdx, origIndex, newCmds[origIndex])\n\t\t}\n\t};\n\n\tconst degToRad = degree => {\n\t\treturn (degree * Math.PI) / 180;\n\t};\n\t/**\n\t * Find the faces that include the given edge.\n\t * Note that this was built specifically for purposes of rotation (i.e. folding),\n\t * so it will use the isLhs parameter to decide which side of the edge to rotate\n\t */\n\tconst faceToFoldForEdge = (faces, edge, isLhs) => {\n\t\treturn faces.findIndex((face, faceIdx) => {\n\t\t\t// If this face doesn't include the edge, ignore it\n\t\t\tif (!face.includes(edge[0]) || !face.includes(edge[1])) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Else check if this face is on the right side\n\t\t\t// NOTE: this is using the initFold object, so it's looking at a flat version\n\t\t\tconst start = initFold.vertices_coords[edge[0]];\n\t\t\tconst end = initFold.vertices_coords[edge[1]];\n\t\t\tconst third = initFold.vertices_coords[face.find(vertIdx => !edge.includes(vertIdx))];\n\n\t\t\tconst d = (third[0] - start[0]) * (end[2] - start[2]) - (third[2] - start[2]) * (end[0] - start[0]);\n\t\t\treturn isLhs ? d > 0 : d < 0;\n\t\t});\n\t};\n\n\t/**\n\t * Helper function to check if the two vectors are within the same line.\n\t */\n\tconst isSameLine = (lhs, rhs) => {\n\t\tconst crossLen = new THREE.Vector3().crossVectors(lhs, rhs);\n\t\treturn crossLen.length() < 0.0001; // Account for floating point errors\n\t};\n\n\t/**\n\t * This is a very complex step, and best understood by just reading the comments and section titles.\n\t * his is taking in an existing triangle (positioned as it actually is in the model\n\t * at the moment), the vertex of some triangle that's adjacent to it, and finally an angle in degrees. With this,\n\t * this function will figure out where the point would be if you folded this edge completly flat, then rotating the\n\t * new triangle by the amount given.\n\t *\n\t * To make a long story short, this is placing a vertex based on existing ones that we know are in the right place already.\n\t *\n\t * @props fold - the fold object, which will be mutated by this method\n\t * @props vertIdx - the index of the vertex that's being placed\n\t * @props edge - array of the two vertIdxs that make up the edge b/w the two faces\n\t * @props angle - the angle to rotate the second face around the edge by.\n\t */\n\tconst rotateVertAroundEdge = (fold, vertIdx, edge, angle) => {\n\t\tconst actualXAxis = new THREE.Vector3(1, 0, 0);\n\n\t\t// Read in the positions of the vertices of the edge that we're rotating around\n\t\tconst start = fold.vertices_coords[edge[0]];\n\t\tconst end = fold.vertices_coords[edge[1]];\n\n\t\t// ------------------------------------------------------------------------------------------\n\t\t// SECTION 1: Figure out where this point would be if the angle were 0 (like in initial fold)\n\t\t// ------------------------------------------------------------------------------------------\n\t\t// Find the plane formed by the other side of this edge\n\t\tconst otherFace = fold.faces_vertices.find(\n\t\t\tface => face.includes(edge[0]) && face.includes(edge[1]) && !face.includes(vertIdx)\n\t\t);\n\t\tconst otherVert = otherFace.find(otherVertIdx => !edge.includes(otherVertIdx));\n\t\tif (otherFace === null || otherVert === null) {\n\t\t\t// console.log(\"[rotateVertAroundEdge] ERR: Couldn't find other plane to base rotation in.\");\n\t\t\treturn;\n\t\t}\n\t\tconst plane = new THREE.Plane().setFromCoplanarPoints(start, end, fold.vertices_coords[otherVert]);\n\n\t\t// const planeOrigin = new THREE.Vector3().copy(plane.normal).multiplyScalar(Math.abs(plane.constant));\n\t\tconst norm = new THREE.Vector3().copy(plane.normal);\n\t\tconst normLine = new THREE.Line3(norm.clone().multiplyScalar(-1), norm);\n\n\t\t// Get the translation vector from the original plane (i.e. norm=<0,1,0>)\n\t\tconst initStart = new THREE.Vector3(...initFold.vertices_coords[edge[0]]);\n\t\tconst initEnd = new THREE.Vector3(...initFold.vertices_coords[edge[1]]);\n\t\tconst initThird = new THREE.Vector3(...initFold.vertices_coords[vertIdx]);\n\n\t\t// If we're starting at the origin, just use the end\n\t\tconst diffInPlane = new THREE.Vector3().subVectors(initThird, initStart);\n\t\tconst edgeInPlane = new THREE.Vector3().subVectors(initEnd, initStart);\n\n\t\t// Angle between the X axis ([1, 0, 0]) and the vector\n\t\tlet axisRotation = edgeInPlane.angleTo(actualXAxis);\n\t\t// If it's in the back quadrants, `angleTo` gets lazy and measures the wrong direction (to the line, not the vector)\n\t\tif (edgeInPlane.z < 0) {\n\t\t\taxisRotation = 2 * Math.PI - axisRotation;\n\t\t}\n\n\t\t// X axis starts as the real edge vector\n\t\tconst xAxis = new THREE.Vector3().subVectors(end, start).normalize();\n\n\t\t// Use this fake x Axis to get a Z axis that's orthag to it and the normal\n\t\tconst zAxis = new THREE.Vector3().crossVectors(xAxis, plane.normal).normalize();\n\n\t\t// Rotate both the X and Z axiis around the Y (the normal) to get \"correct\" vals\n\t\txAxis.applyAxisAngle(plane.normal, axisRotation);\n\t\tzAxis.applyAxisAngle(plane.normal, axisRotation);\n\n\t\t// We don't care about the y axis, since the paper is flat during this step\n\n\t\t// Create the translation matrix b/w the plane's coords and real coords\n\t\tconst newCoords = new THREE.Matrix3().set(\n\t\t\txAxis.x,\n\t\t\tplane.normal.x,\n\t\t\tzAxis.x,\n\t\t\txAxis.y,\n\t\t\tplane.normal.y,\n\t\t\tzAxis.y,\n\t\t\txAxis.z,\n\t\t\tplane.normal.z,\n\t\t\tzAxis.z\n\t\t);\n\n\t\t// Transform the diff vector to real coords\n\t\tconst actualDiff = new THREE.Vector3().copy(diffInPlane).applyMatrix3(newCoords);\n\n\t\t// The third point starts off assuming no rotation\n\t\tconst third = new THREE.Vector3().addVectors(start, actualDiff);\n\n\t\t// ----------------------------------------------------\n\t\t// SECTION 2: Rotate an existing point around this edge\n\t\t// ----------------------------------------------------\n\t\tlet targetVec;\n\n\t\t// If the paper is flat, we can skip this step\n\t\tif (Math.abs(angle) === 180) {\n\t\t\ttargetVec = third;\n\t\t} else {\n\t\t\t// Setup vectors for edge (start --> end), and the target (start --> third)\n\t\t\tconst edgeDirection = new THREE.Vector3().subVectors(end, start);\n\t\t\tedgeDirection.normalize();\n\t\t\ttargetVec = new THREE.Vector3().subVectors(third, start);\n\n\t\t\t// console.log('Applying angle to edge', edgeDirection);\n\n\t\t\t// Rotate the target vector around the edge\n\t\t\ttargetVec.applyAxisAngle(edgeDirection, degToRad(180 - angle));\n\n\t\t\t// Add the start back to the target, giving us the actual final location\n\t\t\ttargetVec.add(start);\n\t\t}\n\n\t\t// Store the vertex coords for edges + vertices\n\t\tfold.vertices_coords[vertIdx] = targetVec;\n\t\t// console.log(`Rotating ${vertIdx} around (${edge[0]}, ${edge[1]}) by ${angle} to ${printVect(targetVec)}`);\n\t\t// console.log('[rotateVertAroundEdge]', {\n\t\t// diffInPlane,\n\t\t// actualDiff,\n\t\t// \taxisRotation,\n\t\t// \txAxis,\n\t\t// \tzAxis,\n\t\t// \t// newCoords,\n\t\t// norm,\n\t\t// third,\n\t\t// start,\n\t\t// end,\n\t\t// initStart,\n\t\t// initEnd,\n\t\t// initThird,\n\t\t// vertIdx,\n\t\t// initFold\n\t\t// });\n\t};\n\n\t/*\n\t * Applies steps to fold the paper iteratively. The crux of this component - see Paper Engine design document.\n\t * @param fold - the object to be modified\n\t * @param steps - array of instructions\n\t */\n\tconst performCommands = (fold, cmds, origCmds, vertsMoved = new Set(), edgesMoved = new Set(), level = 0) => {\n\t\t// console.log('[performCommands] RUN: ', fold && fold.vertices_coords, cmds, level);\n\t\tif (!fold || cmds === undefined || level > 15) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!origCmds && level === 0) {\n\t\t\torigCmds = [...cmds];\n\t\t}\n\n\t\tlet todoCmds = [];\n\t\t// If this is an object, treat it as one cmd\n\t\tif (!Array.isArray(cmds)) {\n\t\t\tcmds = [cmds];\n\t\t}\n\n\t\t// If this is a 3D array, perform substeps in sequence\n\t\tif (cmds.length && cmds[0].length && Array.isArray(cmds[0][0])) {\n\t\t\tcmds.forEach(cmdArr => performCommands(fold, cmdArr));\n\t\t\treturn;\n\t\t}\n\n\t\tcmds.forEach((cmd, cmdIdx) => {\n\t\t\t// console.log(\"[cmd]\", cmd);\n\t\t\t// Parse the command - 0 & 1 are verts, 2 is foldAngle, and 3 is optional args\n\t\t\tconst args = cmd.length === 4 ? cmd[3] : {};\n\t\t\tconst edgeVerts = [cmd[0], cmd[1]];\n\t\t\tconst edgeIdx = fold.edges_vertices.findIndex(edge => edge.includes(cmd[0]) && edge.includes(cmd[1]));\n\n\t\t\t// If this is the orig command (i.e. haven't recursed yet)\n\t\t\tif (level === 0) {\n\t\t\t\t// Remember that we folded this edge, to simulate paper creases\n\t\t\t\tif (cmd[2] !== 180) {\n\t\t\t\t\tcreasedEdges.current.add(edgeIdx);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Store the fold angle\n\t\t\tif (!edgeIsTriangulation(edgeIdx, fold)) {\n\t\t\t\t// console.log('storing angle', cmd[2], 'for edge', edgeIdx);\n\t\t\t\tfold.edges_foldAngle[edgeIdx] = cmd[2];\n\t\t\t}\n\n\t\t\t// If this is a \"flex\" cmd, stop here\n\t\t\tif (level === 0 && args.flex) {\n\t\t\t\t// console.log(\"exit: Skipping flex fold\", cmd);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the face that includes this edge on the right or left hand side, depending on the cmd args\n\t\t\tconst faceIdx = faceToFoldForEdge(fold.faces_vertices, edgeVerts, args.lhs);\n\n\t\t\t// Find the index of the the third point in this triangle\n\t\t\tconst thirdIdx = fold.faces_vertices[faceIdx].find(vertIdx => !edgeVerts.includes(vertIdx));\n\n\t\t\t// Store the two other edges of the triangle\n\t\t\tconst edgeIndices = fold.edges_vertices.reduce(\n\t\t\t\t(acc, edge, idx) => {\n\t\t\t\t\tif (edge.includes(edgeVerts[0]) && edge.includes(thirdIdx)) {\n\t\t\t\t\t\tacc[0] = idx;\n\t\t\t\t\t} else if (edge.includes(edgeVerts[1]) && edge.includes(thirdIdx)) {\n\t\t\t\t\t\tacc[1] = idx;\n\t\t\t\t\t}\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t[-1, -1]\n\t\t\t);\n\n\t\t\t// Get the angle to rotate these edges (last used, or default to 180)\n\t\t\tconst foldAngleOne = edgeIsTriangulation(edgeIndices[0], fold) ? 180 : fold.edges_foldAngle[edgeIndices[0]];\n\t\t\tconst foldAngleTwo = edgeIsTriangulation(edgeIndices[1], fold) ? 180 : fold.edges_foldAngle[edgeIndices[1]];\n\n\t\t\tconst newCmds = [\n\t\t\t\t[edgeVerts[0], thirdIdx, foldAngleOne],\n\t\t\t\t[thirdIdx, edgeVerts[1], foldAngleTwo]\n\t\t\t];\n\n\t\t\t// Inspect both of the other newCmds - if they're novel, fold them as well\n\t\t\t// NOTE: the edge pointed to by the associated edgeIdx might be reversed\n\t\t\t// from what we're looking at; this is okay, since we're just using the indices\n\t\t\t// to ensure uniqueness here\n\t\t\tedgeIndices.forEach((edgeIdx, triIdx) => {\n\t\t\t\tif (\n\t\t\t\t\t!edgesMoved.has(edgeIdx) &&\n\t\t\t\t\t!isEdgeOfPaper(edgeIdx) &&\n\t\t\t\t\t!hasCmds(todoCmds, newCmds[triIdx]) &&\n\t\t\t\t\tnewCmds[triIdx][2] !== undefined\n\t\t\t\t) {\n\t\t\t\t\t// Mark this edge to be moved next\n\t\t\t\t\ttodoCmds.push(newCmds[triIdx]);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// console.log('[performCommands]', { cmd, newCmds, edgeIndices, isTri: [edgeIsTriangulation(edgeIndices[0], fold), edgeIsTriangulation(edgeIndices[1], fold)] });\n\n\t\t\t// CAUTION - everything below this line is only executed for folds that will have a direct effect\n\n\t\t\t// Check if we've already processed this edge or vertex\n\t\t\tif (faceIdx === -1 || edgesMoved.has(edgeIdx)) {\n\t\t\t\t// console.log(\"exit: edge already moved\", thirdIdx, cmd, edgesMoved);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tedgesMoved.add(edgeIdx);\n\t\t\tif (vertsMoved.has(thirdIdx) || (level !== 0 && cmdsInvolveVert(origCmds, thirdIdx))) {\n\t\t\t\t// console.log(\"exit: vert already moved\", thirdIdx, cmd, vertsMoved);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvertsMoved.add(thirdIdx);\n\n\t\t\t// Rotate the third vertex around this edge\n\t\t\trotateVertAroundEdge(fold, thirdIdx, edgeVerts, -cmd[2]);\n\n\t\t\t// Snap this vertex to any nearby vertices that have already been placed\n\t\t\tsnapVertex(thirdIdx, vertsMoved, origCmds);\n\t\t});\n\n\t\t// Do recursive call for every edge in the todo list\n\t\tif (todoCmds.length) {\n\t\t\tperformCommands(fold, todoCmds, origCmds, vertsMoved, edgesMoved, level + 1);\n\t\t}\n\t};\n\n\tconst cmdsShareEdge = (lhs, rhs) => {\n\t\tconst lhsSlice = lhs.slice(0, 2);\n\t\treturn lhsSlice.includes(rhs[0]) && lhsSlice.includes(rhs[1]);\n\t};\n\n\tconst hasCmds = (edgesList, edge) => {\n\t\treturn edgesList.some(otherEdge => cmdsShareEdge(edge, otherEdge));\n\t};\n\n\t/**\n\t * Returns true if this vertex is on the very edge of the paper, false otherwise.\n\t */\n\tconst vertIsOnEdge = vertCoords => Math.abs(vertCoords[0]) === 1 || Math.abs(vertCoords[2]) === 1;\n\n\t/**\n\t * Returns true if this edge is on the very edge of the paper, false otherwise.\n\t */\n\tconst isEdgeOfPaper = edgeIdx => {\n\t\t// If this edge was created during triangulization, it can't be an edge\n\t\tif (!initFold || edgeIdx < 0 || edgeIdx >= initFold.edges_vertices.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Find the coordinates of the vertices for this edge\n\t\tconst edge = initFold.edges_vertices[edgeIdx];\n\t\tconst coordsArr = edge.map(vertIdx => initFold.vertices_coords[vertIdx]);\n\n\t\t// If both vertices are on the edge, this edge is on the edge\n\t\treturn vertIsOnEdge(coordsArr[0]) && vertIsOnEdge(coordsArr[1]);\n\t};\n\n\t/**\n\t * Prints a THREE.Vector3 object.\n\t */\n\tconst printVect = vect => `${vect.x.toFixed(3)}, ${vect.y.toFixed(3)}, ${vect.z.toFixed(3)}`;\n\n\tconst hoverVert = (idx, event, show) => {\n\t\tctrlOverlay([\n\t\t\t{\n\t\t\t\tshow,\n\t\t\t\tname: 'vert_' + idx,\n\t\t\t\tpos: fold.current.vertices_coords[idx],\n\t\t\t\tcomponent: show && (\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tclassName={classes.vertLabel}\n\t\t\t\t\t\tstyle={{ left: event.pageX + 10, top: event.pageY + 10 + 64 }}\n\t\t\t\t\t\t// label={fold.current && `${idx}: ${printVect(fold.current.vertices_coords[idx])}`}\n\t\t\t\t\t\tlabel={idx}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t}\n\t\t]);\n\t};\n\n\tconst buildStepArray = () => {\n\t\treturn collectStepsForLevel(fold.current, 0, foldState.usingDefaults)\n\t};\n\n\tconst getXYForPos = pos => {\n\t\tlet pixelVec = new THREE.Vector3().copy(pos);\n\t\tpixelVec.project(camera);\n\n\t\treturn {\n\t\t\tx: Math.round((0.5 + pixelVec.x / 2) * domElement.width),\n\t\t\ty: Math.round((0.5 - pixelVec.y / 2) * domElement.height)\n\t\t};\n\t};\n\n\tconst updateScreenPosition = () => {\n\t\tif (!fold.current || !overlayItems.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet retArr = [];\n\n\t\tfold.current.vertices_coords.forEach((vert, idx) => {\n\t\t\tconst { x, y } = getXYForPos(vert);\n\t\t\tretArr.push({\n\t\t\t\tname: 'vert_' + idx,\n\t\t\t\tshow: true,\n\t\t\t\tcomponent: (\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tclassName={classes.vertLabel}\n\t\t\t\t\t\tstyle={{ left: `${x}px`, top: `${y}px` }}\n\t\t\t\t\t\t// label={fold.current && `${idx}: ${printVect(fold.current.vertices_coords[idx])}`}\n\t\t\t\t\t\tlabel={idx}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t});\n\t\t});\n\n\t\tif (retArr.length) {\n\t\t\tctrlOverlay(retArr);\n\t\t}\n\t};\n\n\tconst toggleLabels = () => {\n\t\tcamera.updateMatrixWorld();\n\n\t\tif (!fold.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tctrlOverlay(\n\t\t\tfold.current.vertices_coords.map((vert, idx) => {\n\t\t\t\tconst { x, y } = getXYForPos(vert);\n\n\t\t\t\treturn {\n\t\t\t\t\tname: 'vert_' + idx,\n\t\t\t\t\tshow: editorState.showLabels,\n\t\t\t\t\tcomponent: (\n\t\t\t\t\t\t<Chip className={classes.vertLabel} style={{ left: `${x}px`, top: `${y}px` }} label={idx} />\n\t\t\t\t\t)\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t};\n\n\tconst renderVert = (vert, idx) => (\n\t\t<a.mesh\n\t\t\tposition={vert}\n\t\t\tonPointerEnter={e => hoverVert(idx, e, true)}\n\t\t\tonPointerLeave={e => hoverVert(idx, e, false)}\n\t\t>\n\t\t\t<sphereBufferGeometry attach=\"geometry\" args={[0.02, 8, 8]} />\n\t\t\t<meshStandardMaterial\n\t\t\t\tattach=\"material\"\n\t\t\t\troughness={0.5}\n\t\t\t\tcolor={editorState.vertexHighlights.includes(idx) ? 'red' : 'black'}\n\t\t\t/>\n\t\t</a.mesh>\n\t);\n\n\tconst renderEdge = (edge, edgeIdx) => {\n\t\tif (edgeIdx >= initFold.edges_vertices.length && !editorState.showTriangulations) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet color = 'black';\n\t\tlet dashed = false;\n\t\tif (edgeIdx >= initFold.edges_vertices.length) {\n\t\t\tcolor = 'yellow';\n\t\t\tdashed = true;\n\t\t} else if (editorState.edgeHighlights.includes(edgeIdx)) {\n\t\t\tcolor = 'red';\n\t\t} else if (foldState.stepIdx < foldState.maxSteps - 1) {\n\t\t\tconst cmdInvolvingEdge = cmdsInvolveEdge(\n\t\t\t\tstepArray[foldState.stepIdx + 1],\n\t\t\t\tfold.current.edges_vertices[edgeIdx]\n\t\t\t);\n\t\t\tif (cmdInvolvingEdge) {\n\t\t\t\tcolor = 'red';\n\t\t\t\tdashed = cmdInvolvingEdge[2] < 180;\n\t\t\t}\n\t\t}\n\n\t\tif (creasedEdges.current.has(edgeIdx) && color !== 'red') {\n\t\t\tcolor = '#bbb';\n\t\t}\n\n\t\treturn (\n\t\t\t<Line\n\t\t\t\tpoints={edge.map(index => fold.current.vertices_coords[index])}\n\t\t\t\tcolor={color}\n\t\t\t\tlineWidth={1}\n\t\t\t\tdashed={dashed}\n\t\t\t\tmaterial={edgeMat}\n\t\t\t\tdashSize={0.1}\n\t\t\t\tgapSize={0.1}\n\t\t\t\tvisible={editorState.showEdges || color === 'red' || color === '#bbb'}\n\t\t\t\tkey={edgeIdx}\n\t\t\t/>\n\t\t);\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\tuseFrame(() => {});\n\n\tconst [frontMat, backMat] = useMemo(createMaterial, []);\n\tconst stepArray = useMemo(buildStepArray, [\n\t\t!fold.current || !fold.current.instructions,\n\t\tfold.current && fold.current.frame_title\n\t]);\n\n\tuseEffect(performInstructions, [foldState.stepIdx]);\n\tuseEffect(initFoldState, [foldKey]);\n\tuseEffect(readInstructionsIntoState, [foldKey, stepArray.length]);\n\tuseEffect(toggleLabels, [editorState.showLabels]);\n\n\t// console.log('[Paper]', { stepArray });\n\n\tif (!initFold) {\n\t\treturn null;\n\t}\n\n\t// console.log('[Paper]', fold.current && fold.current.edges_vertices);\n\n\treturn (\n\t\t<group>\n\t\t\t{fold.current && fold.current.edges_vertices.map(renderEdge)}\n\t\t\t{editorState.showVertices && fold.current && fold.current.vertices_coords.map(renderVert)}\n\t\t\t{editorState.showFaces && fold.current && faceGeometry.current && (\n\t\t\t\t<group>\n\t\t\t\t\t<a.mesh geometry={faceGeometry.current} material={backMat}></a.mesh>\n\t\t\t\t\t<a.mesh geometry={faceGeometry.current} material={frontMat}></a.mesh>\n\t\t\t\t</group>\n\t\t\t)}\n\t\t</group>\n\t);\n};\n\n/*\nFOLDING ENGINE\n1. Description\n\tThe function of this \"engine\", which basically means a stateful algo here, is to manipulate three.js objects.\n\tThus, the output of all of this are the props used in the return statement of the <Paper/> component.\n\tThe initial input is the initFold object, which is a FOLD json object with special step components.\n\tAn index into the step array is maintained, and any transitions result in \n2. Function Structure\n\t1.1. stepTo\n\n*/\n","/home/bbor/dev/origamiodyssey/src/infra/actions.js",[],"/home/bbor/dev/origamiodyssey/src/layout/NavDrawer.js",["195","196","197","198","199","200","201","202","203"],"/**\n * FILENAME: NavDrawer.js \n *\n * DESCRIPTION: A sidebar-based nav tree, custom built to take advantage of react-spring.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { SwipeableDrawer, Button, List, Divider, ListItem, } from '@material-ui/core';\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nimport { Pages, initNavTree } from \"./../infra/constants\";\nimport { setShowNavDrawer, setLayoutState, setFoldState } from \"./../infra/actions\";\nimport useStyles from \"./../style/theme\";\n\nexport const NavDrawer = props => {\n\tconst { page, showNavDrawer, setShowNavDrawer, layoutState, setLayoutState, foldState, setFoldState, userState } = props;\n\n\tconst [navTreeData, setNavTree] = useState(initNavTree);\n\tconst styles = useStyles();\n\n\tconst { loginWithRedirect, isAuthenticated, isLoading } = useAuth0();\n\n\tconst findNode = (key, node = navTreeData, path = []) => {\n\t\t// Root case - recurse into array of subtrees\n\t\tif (Array.isArray(node)) {\n\t\t\treturn node.reduce((acc, childNode) => {\n\t\t\t\tif (!acc) {\n\t\t\t\t\tconst ret = findNode(key, childNode, path);\n\n\t\t\t\t\tif (ret && ret[1]) {\n\t\t\t\t\t\tacc = ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn acc;\n\t\t\t}, null) || [null, null];\n\n\t\t// Success case - we found the node\n\t\t} else if (node.key === key) {\n\t\t\treturn [[node.key, ...path], node];\n\n\t\t// Child case - recurse into children\n\t\t} else if (node.children) {\n\t\t\treturn node.children.reduce((acc, childNode) => {\n\t\t\t\tif (!acc) {\n\t\t\t\t\tconst [foundPath, foundNode] = findNode(key, childNode, path);\n\n\t\t\t\t\tif (foundNode) {\n\t\t\t\t\t\tacc = [[key, ...foundPath], foundNode];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, null) || [null, null];\n\t\t}\n\n\t\t// Failure case - return null\n\t\treturn [[], null];\n\t}\n\n\tconst setNode = (path, field, val, node = navTreeData) => {\n\t\tlet newNavTree = [...navTreeData];\n\n\t\t// Nested function that recurses through the tree to modify a node\n\t\tconst recursiveSet = (path, node = newNavTree) => {\n\t\t\tif (!path || path.length === 0) {\n\t\t\t\tnode[field] = val; \n\t\t\t} else if (Array.isArray(node)) {\n\t\t\t\tlet child = node.find(e => e.key === path[0]);\n\t\t\t\trecursiveSet(path.slice(1), child);\n\t\t\t} else if (node.children) {\n\t\t\t\tlet child = node.children.find(e => e.key === path[0]);\n\t\t\t\trecursiveSet(path.slice(1), child);\n\t\t\t}\n\t\t}\n\n\t\trecursiveSet(path);\n\t\tsetNavTree(newNavTree);\n\t}\n\n\tconst handleNavDrawerSelect = (event, key) => {\n\t\tif (!key) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the key is a page ID, just take us to that page\n\t\tif (Object.keys(Pages).includes(key)) {\n\t\t\tsetLayoutState({ page: key });\n\t\t\tsetShowNavDrawer(false);\n\t\t\treturn;\n\t\t} \n\n\t\t// If the node has children, show or hide them on parent click\n\t\tconst [path, node] = findNode(key);\n\t\tif (node.children) {\n\t\t\tsetNode(path, \"expanded\", !node.expanded);\n\t\t\treturn;\n\t\t}\n\n\t\t// Else handle key-specific behavior (i.e. everything else)\n\t\tswitch (key) {\n\t\t\tcase \"github\":\n\t\t\t\twindow.open('https://github.com/robbwdoering/origamiodyssey', '_blank');\n\t\t\t\tbreak;\n\t\t\tcase \"login\":\n\t\t\t\tloginWithRedirect();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unhandled navDrawer option\", key);\n\t\t}\n\t\tsetShowNavDrawer(false);\n\t}\n\n\tconst conditionalEx = condName => {\n\t\tif (!condName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tswitch(condName) {\n\t\t\tcase \"is_saved_fold\":\n\t\t\t\treturn layoutState.page !== Pages.Fold && foldState.stepIdx !== -1;\n\t\t\tcase \"is_logged_in\":\n\t\t\tconsole.log(\"[conditionalEx]\", isAuthenticated);\n\t\t\t\treturn isAuthenticated;\n\t\t\tcase \"is_not_logged_in\":\n\t\t\t\treturn !isAuthenticated;\n\t\t\tdefault:\n\t\t\t\tconsole.error(\"passed invalid conditional: \", condName);\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\tconst renderNavNode = (node, nestedLevel = 0) => {\n\t\tif (!node || node.hidden || !conditionalEx(node.conditional)) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Nested component that just renders one node, with no regard for hierarchy beyond tracking nestedLevel\n\t\tconst Node = ({ node, nestedLevel }) => {\n\t\t\tconst icon = node.icon || (node.children ? (node.expanded ? <ArrowDropDownIcon /> : <ArrowRightIcon />) : null );\n\n\t\t\treturn (\n\t\t\t\t<ListItem \n\t\t\t\t\tclassName={`nested-level-${nestedLevel} ${node.className || \"\"}`}\n\t\t\t\t\tkey={node.key}\n\t\t\t\t\tbutton\n\t\t\t\t\tonClick={e => handleNavDrawerSelect(e, node.key)}\n\t\t\t\t>\n\t\t\t\t\t{icon && <ListItemIcon> {icon} </ListItemIcon>}\n\t\t\t\t\t<ListItemText> {node.text} </ListItemText>\n\t\t\t\t</ListItem>\n\t\t\t);\n\t\t};\n\n\t\tlet ret = [<Node key={\"node_\"+node.key} node={node} nestedLevel={nestedLevel} />];\n\n\t\tif (node.children && node.expanded) {\n\t\t\tnode.children.forEach(child => {\n\t\t\t\tret = ret.concat(renderNavNode(child, nestedLevel + 1));\n\t\t\t});\n\t\t};\n\n\t\treturn ret;\n\t};\n\n\treturn (\n\t\t<SwipeableDrawer\n\t\t\tanchor='left'\n\t\t\tkey=\"swipable-drawer\"\n\t\t\tclasses={{\n\t\t\t\troot: styles.navDrawerRoot,\n\t\t\t\tpaper: styles.navDrawerPaper\n\t\t\t}}\n\t\t\topen={showNavDrawer}\n\t\t\tonOpen={() => setShowNavDrawer(true)}\n\t\t\tonClose={() => setShowNavDrawer(false)}\n\t\t>\n\t\t\t<List key=\"main-list\">\n\t\t\t\t{navTreeData.reduce((acc, node) => {\n\t\t\t\t\tacc = acc.concat(renderNavNode(node));\n\t\t\t\t\treturn acc;\n\t\t\t\t}, [])}\n\t\t\t</List>\n\t\t</SwipeableDrawer>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState,\n\t\tlayoutStateHash: state.appReducer.layoutState.hash,\n\t\tfoldState: state.appReducer.foldState,\n\t\tshowNavDrawer: state.appReducer.showNavDrawer,\n\t\tuserState: state.appReducer.userState\n\t};\n};\n\nexport default connect(mapStateToProps, { setShowNavDrawer, setLayoutState, setFoldState })(NavDrawer);","/home/bbor/dev/origamiodyssey/src/layout/pages/ModelSelect.js",["204","205","206","207","208","209","210","211","212","213","214","215","216","217","218"],"/**\n * FILENAME: ModelSelect.js\n *\n * DESCRIPTION: This page allows the user to browse through cards, read details on models, and select one to fold.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config } from 'react-spring';\n\nimport {\n\tDivider,\n\tTypography,\n\tCardMedia,\n\tCardActionArea,\n\tCardActions,\n\tCardContent,\n\tButton,\n\tGrid,\n\tFab,\n\tCard,\n\tChip\n} from '@material-ui/core';\nimport FilterList from '@material-ui/icons/FilterList';\nimport Clear from '@material-ui/icons/Clear';\n\nimport useStyles from './../../style/theme';\nimport { Folds, Pages, Tags, TagCategories } from './../../infra/constants';\nimport { setLayoutState } from './../../infra/actions';\nimport ModelCardContainer from './ModelCard';\nconst AnimatedCard = animated(Card);\n\nexport const ModelSelect = props => {\n\tconst { layoutState, setLayoutState } = props;\n\tconst classes = useStyles();\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\t// Used to track which card is currently open\n\tconst [activeIndex, setActiveIndex] = useState(-1);\n\n\t// Used to track which card is currently open\n\tconst [filterTags, setFilterTags] = useState(new Set());\n\n\tconst [curHash, setHash] = useState(0);\n\n\tconst cardRefs = useRef(Object.keys(Folds).map(() => createRef()));\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\n\t/**\n\t * Reads the list of all cards, and decides which to include.\n\t * Note that this is likely to grow suddenly and quickly in complexity as soon as we start\n\t * including folds from other sources, or, god forbid, external REST sources.\n\t * @return an array of Fold objects - see constants.js for format\n\t */\n\tconst filterCardList = () => {\n\t\treturn Object.keys(Folds).filter(() => true);\n\t};\n\n\tconst triggerRerender = () => {\n\t\tsetHash(cur => cur + 1);\n\t};\n\n\t/**\n\t * Handles a click on one of the cards - just prompts update and relies on hooks to do actual work.\n\t */\n\tconst handleCardClick = (event, index) => {\n\t\tsetActiveIndex(activeIndex === index ? -1 : index);\n\n\t\t// TODO - redo this whole thing with React Portals\n\t\tsetTimeout(() => triggerRerender(), 50);\n\t};\n\n\tconst generateFilterCardStyle = () => {\n\t\tconst isActive = activeIndex === -2;\n\t\treturn {\n\t\t\theight: isActive ? 'min-content' : '64px'\n\t\t};\n\t};\n\n\tconst handleFilterTagClick = tagKey => {\n\t\tlet newFilterTags = new Set(filterTags);\n\n\t\tif (newFilterTags.has(tagKey)) {\n\t\t\tnewFilterTags.delete(tagKey);\n\t\t} else {\n\t\t\tnewFilterTags.add(tagKey);\n\t\t}\n\n\t\tsetFilterTags(newFilterTags);\n\t};\n\n\tconst tagsAreHidden = (obj, searchStr) => {\n\t\tlet ret = false;\n\t\tif (filterTags.size) {\n\t\t\t// If there's filters and this doesn't match, hide it\n\t\t\tret = ret || !obj.tags.some(tagKey => filterTags.has(tagKey));\n\t\t}\n\t\tif (searchStr.length) {\n\t\t\t// If there's a search str and this doesn't match, hide it\n\t\t\tret =\n\t\t\t\tret ||\n\t\t\t\t!(obj.name.toLowerCase().includes(searchStr) || obj.description.toLowerCase().includes(searchStr));\n\t\t}\n\t\t// console.log('tagsAreHidden', ret, searchStr, obj);\n\n\t\treturn ret;\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\t// Get the list of all cards to display\n\tconst cardList = useMemo(filterCardList, []);\n\n\tconst filterCardStyle = useMemo(generateFilterCardStyle, [window.innerWidth, activeIndex]);\n\tconst searchStr = useMemo(() => layoutState.searchStr.toLowerCase(), [layoutState.searchStr]);\n\n\tconst filterIsActive = activeIndex === -2;\n\tconst filterChoicesStyle = {\n\t\tdisplay: filterIsActive ? undefined : 'none'\n\t};\n\n\t// \t\n\n\tconsole.log(\"[ModelSelect] \", cardList.length, cardList, activeIndex);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div\n\t\t\t\tclassName={`${classes.filter_card} ${activeIndex === -2 ? classes.filter_card__active : ''}`}\n\t\t\t\tstyle={filterCardStyle}\n\t\t\t>\n\t\t\t\t<div className={classes.filter_toggle_container}>\n\t\t\t\t\t{filterTags.size > 0 && (\n\t\t\t\t\t\t<Fab\n\t\t\t\t\t\t\tclassName={classes.filter_clear}\n\t\t\t\t\t\t\tonClick={() => setFilterTags(new Set())}\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Clear />\n\t\t\t\t\t\t</Fab>\n\t\t\t\t\t)}\n\t\t\t\t\t<Fab\n\t\t\t\t\t\tclassName={classes.filter_toggle}\n\t\t\t\t\t\tonClick={e => handleCardClick(e, -2)}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\tvariant=\"extended\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<FilterList />\n\t\t\t\t\t\tFilter\n\t\t\t\t\t</Fab>\n\t\t\t\t</div>\n\t\t\t\t<Grid container className={classes.filter_choices} style={filterChoicesStyle}>\n\t\t\t\t\t{Object.keys(TagCategories).map(categoryKey => (\n\t\t\t\t\t\t<Grid item className={classes.editor_row} {...TagCategories[categoryKey]}>\n\t\t\t\t\t\t\t{/* Title */}\n\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\tclassName={classes.modelCard_label}\n\t\t\t\t\t\t\t\tvariant=\"body2\"\n\t\t\t\t\t\t\t\tcolor=\"textSecondary\"\n\t\t\t\t\t\t\t\tcomponent=\"h4\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{TagCategories[categoryKey].text}\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<Divider />\n\n\t\t\t\t\t\t\t{Object.keys(Tags)\n\t\t\t\t\t\t\t\t.filter(tagKey => Tags[tagKey].category === categoryKey)\n\t\t\t\t\t\t\t\t.map(tagKey => (\n\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\tkey={tagKey}\n\t\t\t\t\t\t\t\t\t\tclickable\n\t\t\t\t\t\t\t\t\t\tlabel={Tags[tagKey].text}\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleFilterTagClick(tagKey)}\n\t\t\t\t\t\t\t\t\t\tcolor={filterTags.has(tagKey) ? 'primary' : undefined}\n\t\t\t\t\t\t\t\t\t\tclasses={{\n\t\t\t\t\t\t\t\t\t\t\troot: `${classes.tagchip}`\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t))}\n\t\t\t\t</Grid>\n\t\t\t</div>\n\n\t\t\t<div className={classes.page_ModelSelect_container}>\n\t\t\t\t{cardList.map((cardKey, i) => {\n\t\t\t\t\tconst isHidden = tagsAreHidden(Folds[cardKey], searchStr);\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<React.Fragment key={cardKey}>\n\t\t\t\t\t\t\t{/* This is the \"anchor\" that positions the card, takes advantage of CSS */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tref={cardRefs.current[i]}\n\t\t\t\t\t\t\t\tclassName={classes.modelCard_placeholder}\n\t\t\t\t\t\t\t\tstyle={{ display: isHidden ? 'none' : undefined }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ModelCardContainer\n\t\t\t\t\t\t\t\tplaceholderRef={cardRefs.current[i]} \n\t\t\t\t\t\t\t\tname={Folds[cardKey].name}\n\t\t\t\t\t\t\t\tcardKey={cardKey}\n\t\t\t\t\t\t\t\tfoldEntry={Folds[cardKey]}\n\t\t\t\t\t\t\t\tindex={i}\n\t\t\t\t\t\t\t\tisActive={activeIndex === i}\n\t\t\t\t\t\t\t\tshouldOpenFlipped={false}\n\t\t\t\t\t\t\t\tisHidden={isHidden}\n\t\t\t\t\t\t\t\thandleCardClick={handleCardClick}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState,\n\t\tlayoutStateHash: state.appReducer.layoutState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setLayoutState })(ModelSelect);\n","/home/bbor/dev/origamiodyssey/src/layout/pages/FoldControls.js",["219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237"],"/**\n * FILENAME: FoldControls.js \n *\n * DESCRIPTION: These are piecemeal controls for the fold state. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config }  from 'react-spring';\n\nimport { SwipeableDrawer, Button,  ButtonGroup, List, Divider, ListItem, Card } from '@material-ui/core';\nimport SkipPrevious from \"@material-ui/icons/SkipPrevious\";\nimport SkipNext from \"@material-ui/icons/SkipNext\";\n\nimport useStyles from \"./../../style/theme\";\nimport { Folds } from \"./../../infra/constants\";\nimport { setFoldState } from \"./../../infra/actions\";\n// const AnimatedCard = animated(Card);\n\nexport const FoldControls = props => {\n\tconst { windowHeight, foldState, foldStateHash, setFoldState } = props;\n\n\t// ----------\n\t// STATE INIT \n\t// ----------\n\tconst classes = useStyles();\n\tconst [cardRefs, setCardRefs] = useState([]);\n\tconst [curHash, setHash] = useState(0);\n\n\t// ----------------\n\t// MEMBER FUNCTIONS \n\t// ----------------\n\n\t// Changes the current instructional sequential step, prompting animation.\n\tconst changeStep = (delta) => {\n\t\tlet newStepIndex = Math.min(Math.max(foldState.stepIdx + delta, -1), foldState.maxSteps);\n\t\tsetFoldState({\n\t\t\tstepIdx: newStepIndex\n\t\t});\n\t};\n\n\tconst calcControlsPosition = () => {\n\t\treturn (window.innerWidth - 128) / 2;\n\t}\n\n\tconst triggerRerender = () => {\n\t\tsetHash(cur => cur + 1);\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\n\tconst buttonClasses = useMemo(() => ({\n\t\troot: classes.fold_controls_button,\n\t\tlabel: classes.fold_controls_button_label\n\t}), []);\n\n\t// Rerender whenever the page resizes\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", triggerRerender);\n\t}, []);\n\n\tconst ctrlLeft = useMemo(calcControlsPosition, [window.innerWidth]);\n\n    return (\n    \t<React.Fragment>\n\t\t\t<Card className={classes.fold_controls} style={{left: ctrlLeft}} >\n\t\t\t\t<ButtonGroup className={classes.fold_controls_button_container} color=\"primary\" variant=\"text\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses={buttonClasses}\n\t\t\t\t\t\tonClick={() => changeStep(-1)}\n\t\t\t\t\t\tdisabled={foldState.stepIdx < 0}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SkipPrevious className={classes.fold_controls_button_icon} />\n\t\t\t\t\t\tPrev\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses={buttonClasses}\n\t\t\t\t\t\tonClick={() => changeStep(1)}\n\t\t\t\t\t\tdisabled={foldState.stepIdx >= foldState.maxSteps - 1}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SkipNext className={classes.fold_controls_button_icon} />\n\t\t\t\t\t\tNext\n\t\t\t\t\t</Button>\n\t\t\t\t</ButtonGroup>\n    \t\t</Card>\n    \t</React.Fragment>\n    );\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setFoldState })(FoldControls);\n",["238","239"],"/home/bbor/dev/origamiodyssey/src/layout/pages/User.js",["240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255"],"/home/bbor/dev/origamiodyssey/src/static/lettering.js",[],"/home/bbor/dev/origamiodyssey/src/layout/pages/FoldEditorCards.js",["256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277"],"/**\n * FILENAME: FoldEditorCards.js\n *\n * DESCRIPTION: These cards are shown on either side of the model, and allow realtime editing of .fold files.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config } from 'react-spring';\nimport { JsonEditor } from 'jsoneditor-react';\nimport 'jsoneditor-react/es/editor.min.css';\nimport Downloader from 'js-file-downloader';\n\nimport {\n\tButton,\n\tTypography,\n\tButtonGroup,\n\tChip,\n\tInput,\n\tSelect,\n\tMenuItem,\n\tGrid,\n\tList,\n\tDivider,\n\tListItem,\n\tCard\n} from '@material-ui/core';\nimport SkipPrevious from '@material-ui/icons/SkipPrevious';\nimport SkipNext from '@material-ui/icons/SkipNext';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { ToggleButton } from '@material-ui/lab';\n\nimport useStyles from './../../style/theme';\nimport { Folds } from './../../infra/constants';\nimport { setFoldState, setEditorState } from './../../infra/actions';\n// const AnimatedCard = animated(Card);\n\nexport const FoldEditorCards = props => {\n\tconst {\n\t\tcurFold,\n\t\tinitFold,\n\t\tfoldLastUpdated,\n\t\twindowHeight,\n\t\tfoldOverrideCallback,\n\t\tfoldState,\n\t\tfoldStateHash,\n\t\tsetFoldState,\n\t\teditorState,\n\t\teditorStateHash,\n\t\tsetEditorState\n\t} = props;\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\tconst classes = useStyles();\n\tconst [curHash, setHash] = useState(0);\n\tconst [expandControls, setExpandControls] = useState(false);\n\tconst localFold = useRef();\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\tconst calcControlsPosition = () => {\n\t\treturn (window.innerWidth - 128) / 2;\n\t};\n\n\tconst CardLabel = ({ text }) => (\n\t\t<React.Fragment>\n\t\t\t<Typography className={classes.modelCard_label} variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t{text}\n\t\t\t</Typography>\n\t\t\t<Divider />\n\t\t</React.Fragment>\n\t);\n\n\tconst ControlRow = ({ name, text, width, children }) => (\n\t\t<Grid item xs={width || 12} className={classes.editor_row}>\n\t\t\t{/* Title */}\n\t\t\t<CardLabel text={name} />\n\t\t\t{text !== undefined && (\n\t\t\t\t<Typography className={classes.editor_bodyText} variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t<strong>{text}</strong>\n\t\t\t\t</Typography>\n\t\t\t)}\n\n\t\t\t{children}\n\t\t</Grid>\n\t);\n\n\tconst resetLocalFold = () => {\n\t\t// console.log('[resetLocalFold]', initFold);\n\t\tlocalFold.current = JSON.parse(JSON.stringify(initFold));\n\t};\n\n\tconst handleFoldChange = e => {\n\t\tObject.assign(localFold.current, e);\n\t};\n\n\tconst handleSaveClick = () => {\n\t\tif (!localFold.current || !curFold) {\n\t\t\tconsole.error(\"Couldn't save file; no current value.\");\n\t\t\treturn;\n\t\t}\n\n\t\tfoldOverrideCallback(localFold.current);\n\t};\n\n\tconst handleExportClick = async () => {\n\t\tif (!localFold.current || !curFold) {\n\t\t\tconsole.error(\"Couldn't export file; no current value.\");\n\t\t\treturn;\n\t\t}\n\n\t\tlet fileDownloadUrl = `data:application/json,${encodeURIComponent(JSON.stringify(localFold.current, null, 2))}`;\n\t\t// fileDownloadUrl = URL.createObjectURL(fileDownloadUrl)\n\n\t\tnew Downloader({\n\t\t\turl: fileDownloadUrl,\n\t\t\tfilename: `${curFold}.json`\n\t\t}).then(() => {\n\t\t\tconsole.log('finished download.');\n\t\t});\n\t};\n\n\tconst handleEditorFormChange = (field, value) => {\n\t\tsetEditorState({ [field]: value });\n\t};\n\n\tconst handleSelectionChange = event => {\n\t\t// console.log('GOT EVENT! ', event.target);\n\t\tconst field = event.target.name;\n\t\tconst value = event.target.value;\n\n\t\tsetEditorState({ [field]: value });\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\tconst buttonClasses = useMemo(\n\t\t() => ({\n\t\t\troot: classes.fold_controls_button,\n\t\t\tlabel: classes.fold_controls_button_label\n\t\t}),\n\t\t[]\n\t);\n\n\tuseEffect(resetLocalFold, [initFold]);\n\n\tconst ctrlLeft = useMemo(calcControlsPosition, [window.innerWidth]);\n\n\t// If we don't have any fold file loaded yet, don't show these\n\tif (!initFold) {\n\t\treturn <div />;\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{/* Details on the fold state */}\n\t\t\t<Card className={classes.editorState}>\n\t\t\t\t<Typography className={classes.editor_cardTitle} variant=\"h4\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\tFold State\n\t\t\t\t</Typography>\n\t\t\t\t<Grid container>\n\t\t\t\t\t<ControlRow name=\"Step Index\" text={`${foldState.stepIdx + 2}/${foldState.maxSteps + 1}`} width={6} />\n\t\t\t\t</Grid>\n\t\t\t</Card>\n\n\t\t\t{/* Details on the current instruction */}\n\t\t\t<Card className={classes.editorDetails} style={{height: expandControls ? \"60%\" : \"60px\"}}>\n\t\t\t\t<Typography className={classes.editor_cardTitle} variant=\"h4\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\tEditor Controls\n\t\t\t\t</Typography>\n\t\t\t\t<Button className={classes.editor_details_expand} onClick={() => setExpandControls(cur => !cur)}>\n\t\t\t\t\t{expandControls ? <ExpandMore /> : <ExpandLess />}\n\t\t\t\t</Button>\n\t\t\t\t{expandControls && (\n\t\t\t\t<Grid container>\n\t\t\t\t\t<ControlRow name=\"Highlighted Edges\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tname=\"edgeHighlights\"\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\tvalue={editorState.edgeHighlights}\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\n\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\t\trenderValue={selected => (\n\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t{selected.map(idx => (\n\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\t\tlabel={initFold.edges_vertices[idx].toString()}\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tclassName={classes.editor_select}\n\t\t\t\t\t\t\t// MenuProps={MenuProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{initFold.edges_vertices.map((edge, index) => {\n\t\t\t\t\t\t\t\tconst name = edge.toString();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={index}>\n\t\t\t\t\t\t\t\t\t\t{index}: {name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"vertexHighlights\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tname=\"vertexHighlights\"\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\tvalue={editorState.vertexHighlights}\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\n\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\t\trenderValue={selected => (\n\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t{selected.map(idx => (\n\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\t\tlabel={`${idx}: ${initFold.vertices_coords[idx].toString()}`}\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tclassName={classes.editor_select}\n\t\t\t\t\t\t\t// MenuProps={MenuProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{initFold.vertices_coords.map((coords, index) => {\n\t\t\t\t\t\t\t\tconst name = coords.toString();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={index}>\n\t\t\t\t\t\t\t\t\t\t{index}: {name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"faceHighlights\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tname=\"faceHighlights\"\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\tvalue={editorState.faceHighlights}\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\n\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\t\trenderValue={selected => (\n\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t{selected.map(idx => (\n\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\t\tlabel={`${idx}: ${initFold.faces_vertices[idx].toString()}`}\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tclassName={classes.editor_select}\n\t\t\t\t\t\t\t// MenuProps={MenuProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{initFold.faces_vertices.map((face, index) => {\n\t\t\t\t\t\t\t\tconst name = face.toString();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={index}>\n\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Edges\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showEdges}\n\t\t\t\t\t\t\tonChange={() => handleEditorFormChange('showEdges', !editorState.showEdges)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Vertices\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showVertices}\n\t\t\t\t\t\t\tonChange={() => handleEditorFormChange('showVertices', !editorState.showVertices)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Faces\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showFaces}\n\t\t\t\t\t\t\tonChange={() => handleEditorFormChange('showFaces', !editorState.showFaces)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Tri\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showTriangulations}\n\t\t\t\t\t\t\tonChange={() =>\n\t\t\t\t\t\t\t\thandleEditorFormChange('showTriangulations', !editorState.showTriangulations)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Labels\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showLabels}\n\t\t\t\t\t\t\tonChange={() =>\n\t\t\t\t\t\t\t\thandleEditorFormChange('showLabels', !editorState.showLabels)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t</Grid>\n\t\t\t\t)}\n\t\t\t</Card>\n\n\t\t\t{/* Entry box for direct JSON manipulation */}\n\t\t\t<Card className={classes.editorEntry}>\n\t\t\t\t<Typography className={classes.editor_cardTitle} variant=\"h4\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\t<code>.fold</code> file\n\t\t\t\t</Typography>\n\t\t\t\t<ButtonGroup className={classes.editor_floatAction} color=\"primary\" variant=\"text\" size=\"large\">\n\t\t\t\t\t<Button onClick={handleSaveClick}> Local Save </Button>\n\t\t\t\t\t<Button onClick={handleExportClick}> Export To Disk </Button>\n\t\t\t\t</ButtonGroup>\n\t\t\t\t<JsonEditor\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\tfaces_vertices: initFold.faces_vertices,\n\t\t\t\t\t\tvertices_coords: initFold.vertices_coords,\n\t\t\t\t\t\tedges_vertices: initFold.edges_vertices,\n\t\t\t\t\t\tinstructions: initFold.instructions\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleFoldChange}\n\t\t\t\t\thtmlElementProps={{ class: classes.editor_jsonTextArea }}\n\t\t\t\t\tallowedModes={['tree', 'form']}\n\t\t\t\t\tnavigationBar={false}\n\t\t\t\t\thistory={true}\n\t\t\t\t/>\n\t\t\t</Card>\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash,\n\t\teditorState: state.appReducer.editorState,\n\t\teditorStateHash: state.appReducer.editorState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setFoldState, setEditorState })(FoldEditorCards);\n","/home/bbor/dev/origamiodyssey/src/infra/utils.js",["278","279"],"/**\n * FILENAME: Constants.js\n *\n * DESCRIPTION: Contains constants for use accross the app.\n */\n\n/*\n * This walks the tree recursively, collecting an array of steps at this \"level\".\n */\nexport const collectStepsForLevel = (fold, level, isDefault) => {\n\tconsole.log(\"[collectStepsForLevel]\", fold, level, isDefault);\n\tif (!fold || !fold.instructions) {\n\t\treturn [];\n\t}\n\n\treturn calcStepsForLevel(fold.instructions, level, isDefault);\n};\n\n/**\n * Recursive function to build the \"step array\" for a tree.\n * The basic concept here is that the user will choose a depth, then this will build an array\n * of sequential steps \"at\" that depth.\n * @returns: a 2D array of step objects\n */\nexport const calcStepsForLevel = (inst, curLevel, isDefault, path = '0') => {\n\tif (!inst.children && !inst.length) {\n\t\t// Error case\n\t\treturn null;\n\t}\n\n\tconst isDefaultNode = isDefault && inst.default;\n\n\t// Leaf node / base case - return this as one step\n\tif (Array.isArray(inst.children[0])) {\n\t\treturn [[path, ...inst.children]];\n\n\t\t// Ancestor nodes - return a list of steps\n\t} else {\n\t\tif (isDefaultNode) {\n\t\t\t// Recursive case: This is target, so return all leaves below this as one step\n\t\t\tlet allLeafDescendants = concatDescendants(inst, curLevel);\n\t\t\t// If we just found one leaf node, treat this as a normal step w/ a 2D arr\n\t\t\tif (allLeafDescendants.length === 1) {\n\t\t\t\tallLeafDescendants = allLeafDescendants[0];\n\t\t\t}\n\t\t\treturn [[path, ...allLeafDescendants]];\n\t\t} else {\n\t\t\t// Recursive case: still above target level, so keep drilling down\n\t\t\t// COLLECT steps returned from children into one array of steps\n\t\t\treturn inst.children.reduce((acc, childInst, childIdx) => {\n\t\t\t\tlet ret = calcStepsForLevel(childInst, curLevel + 1, isDefault, path + ',' + childIdx);\n\t\t\t\treturn ret ? acc.concat(ret) : acc;\n\t\t\t}, []);\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * @returns: a 2D array of every leaf node found below this node\n */\nexport const concatDescendants = (inst, curLevel) => {\n\tif (Array.isArray(inst.children[0])) {\n\t\treturn [[...inst.children]];\n\t} else {\n\t\t// turn many 1d arrs into one - concat\n\t\treturn inst.children.reduce((acc, childInst) => {\n\t\t\tlet ret = concatDescendants(childInst, curLevel + 1);\n\t\t\treturn ret ? acc.concat(ret) : acc;\n\t\t}, []);\n\t}\n};\n\n/**\n * Recursive function to calculate the depth of the instruction tree\n */\nexport const calcMaxLevel = inst => {\n\tif (!inst) {\n\t\treturn 0;\n\t} else if (inst.children && Array.isArray(inst.children[0])) {\n\t\t// Base case: leaf node\n\t\treturn 1;\n\t} else if (inst.children) {\n\t\t// Recursive case: Return 1 plus the height of the tallest subtree\n\t\treturn 1 + Math.max(...inst.children.map(childInst => calcMaxLevel(childInst)));\n\t} else {\n\t\treturn 0;\n\t}\n};\n\nexport const findInUseFamilyNode = (stepArr, path) => {\n\treturn stepArr.reduce((acc, step, index) => {\n\t\t// True if inUse step is an ancestor or descendant of this step\n\t\tif (path.startsWith(step[0]) || step[0].startsWith(path)) {\n\t\t\t// First index holds the first discovered descendant\n\t\t\tif (acc[0] == -1) {\n\t\t\t\tacc[0] = index;\n\t\t\t}\n\n\t\t\t// Second index holds the last discovered descendant\n\t\t\tacc[1] = index;\n\t\t}\n\t\treturn acc;\n\t}, [-1, -1]);\n};\n\nexport const getHierNode = (instructions, path) => {\n\tif ((!path || !path.length) && instructions && instructions.desc) {\n\t\t// Base case: If we were passed an empty path, then this is the target node\n\t\treturn instructions;\n\t} else if (path && path.length && instructions.children) {\n\t\t// Recurse Case: Else keep drilling down\n\t\treturn getHierNode(instructions.children[parseInt(path[0])], path.slice(1));\n\t} else {\n\t\t// Error case: Return an error\n\t\treturn {};\n\t}\n};\n\n/**\n * Returns true if the origCmds array includes a non-flex command on an edge including this vert.\n * @param origCmds the array of the original commands to check against (i.e. the commands in the actual json file)\n * @param vertIdx the index of the vertex in question\n */\nexport const cmdsInvolveVert = (origCmds, vertIdx) => {\n\t// console.log(\"[cmdsInvolveVert]\", origCmds)\n\treturn (\n\t\torigCmds &&\n\t\torigCmds.find(cmd => (cmd.length !== 4 || !cmd[3].flex) && (cmd[0] === vertIdx || cmd[1] === vertIdx))\n\t);\n};\n\n/**\n * Returns true if the origCmds array includes a non-flex command on an edge including this vert.\n * @param origCmds the array of the original commands to check against (i.e. the commands in the actual json file)\n * @param vertIdx the index of the vertex in question\n */\nexport const cmdsInvolveEdge = (origCmds, edge) => {\n\t// console.log(\"[cmdsInvolveEdge]\", origCmds)\n\tif (stepIs3D(origCmds)) {\n\t\treturn origCmds.find(subCmds => cmdsInvolveEdge(subCmds, edge));\n\t}\n\n\treturn (\n\t\torigCmds &&\n\t\torigCmds.find(cmd => (cmd.length !== 4 || !cmd[3].flex) && (edge.includes(cmd[0]) && edge.includes(cmd[1])))\n\t);\n};\n\nexport const printPath = path => path.reduce((acc, idx, i) => (i ? ',' : '') + idx, '');\n\nexport const stepIs3D = step => step.length && step[0].length && Array.isArray(step[0][0]);\n\nexport const stepIs2D = step => step.length && Array.isArray(step[0]);\n\nexport const stepIs1D = step => step.length && !Array.isArray(step[0]);\n\nexport const stepHasArgs = step => step.length > 3 && step[3];\n\n/**\n * A comparison function for use in sorting lists of cmds (i.e. a step). \n * Right now just puts flex items first - this is because they don't initiate movement,\n * but need to be processed in full before any movement begins.\n */\nexport const cmdOrderingComparator = (lhs, rhs) => {\n\tconst lhsFlex = stepHasArgs(lhs) && lhs[3].flex;\n\tconst rhsFlex = stepHasArgs(lhs) && lhs[3].flex;\n\treturn (lhsFlex && !rhsFlex) ? 1 : (rhsFlex ? -1 : 0);\n};\n\nexport const timerPosixToString = (timerPosix) => {\n\tconst date = new Date(timerPosix);\n\tconst minStr = `${date.getMinutes()}`.padStart(2, '0');\n\tconst secStr = `${date.getSeconds()}`.padStart(2, '0');\n\treturn `${minStr}:${secStr}`;\n}","/home/bbor/dev/origamiodyssey/src/layout/pages/InstructionalHierarchy.js",["280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314"],"/**\n * FILENAME: InstructionalHierarchy.js\n *\n * DESCRIPTION: These are piecemeal controls for the fold state.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config } from 'react-spring';\n\nimport { SwipeableDrawer, Tooltip, Typography, Fab, ButtonGroup, List, Divider, ListItem, Card } from '@material-ui/core';\nimport SkipPrevious from '@material-ui/icons/SkipPrevious';\nimport SkipNext from '@material-ui/icons/SkipNext';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\n\nimport useStyles from './../../style/theme';\nimport { Folds } from './../../infra/constants';\nimport { setFoldState, setLayoutState, setUserState } from './../../infra/actions';\nimport TimerContainer from './Timer';\nimport { collectStepsForLevel, calcMaxLevel, printPath, findInUseFamilyNode, getHierNode } from './../../infra/utils';\n\nconst HIER_PX_SIZE = 20;\n\nexport const InstructionalHierarchy = props => {\n\tconst {\n\t\twindowHeight,\n\t\tinitFold,\n\t\tfoldLastUpdated,\n\t\tfoldState,\n\t\tfoldStateHash,\n\t\tsetFoldState,\n\t\tlayoutState,\n\t\tlayoutStateHash,\n\t\tsetLayoutState,\n\t\tuserState,\n\t\tsetUserState\n\t} = props;\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\tconst [contStyle, setContStyle] = useState({});\n\tconst classes = useStyles();\n\tconst cardRef = useRef();\n\tconst activeNodeRef = useRef();\n\tconst renderRows = useRef([]);\n\tconst [curHash, setHash] = useState(0);\n\tconst [looperDirection, setLooperDirection] = useState(-1);\n\tconst [looperWorkerId, setLooperWorkerId] = useState(-1);\n\tconst [looperHash, setLooperHash] = useState(0);\n\n\tconst maxLevel = useMemo(() => calcMaxLevel(initFold && initFold.instructions), [foldLastUpdated]);\n\n\tconst trackTop = (window.innerHeight - 264 - (HIER_PX_SIZE * foldState.stepIdx))  + 'px';\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\n\t// Changes the current instructional sequential step, prompting animation.\n\tconst changeStep = (delta, isFromLooper) => {\n\t\tlet newStepIndex = Math.min(Math.max(foldState.stepIdx + delta, -1), foldState.maxSteps);\n\t\tlet newFoldState = {\n\t\t\tstepIdx: newStepIndex\n\t\t};\n\n\t\tif (!isFromLooper) {\n\t\t\tnewFoldState.repeatRoot = -1;\n\t\t\tnewFoldState.repeatRange = null\t\n\t\t\tif (looperWorkerId !== -1) {\n\t\t\t\tconsole.log(\"CLEARING - changeStep\");\n\t\t\t\tclearInterval(looperWorkerId);\n\t\t\t\tsetLooperWorkerId(-1);\n\t\t\t}\n\t\t}\n\n\t\tsetFoldState(newFoldState);\n\t};\n\n\tconst calcNumDefaultsBefore = stepIdx => {\n\t\tlet total = 0;\n\n\t\tstepArray.some((elem, i) => {\n\t\t\tif (i > stepIdx) {\n\t\t\t\treturn true;\t\n\t\t\t}\n\n\t\t\t// Only default items are 2D arrays\n\t\t\tif (Array.isArray(elem[1][0])) {\n\t\t\t\t// Add the number of leaf nodes here, minus one for the path at idx 0, and one for the spot taken by the root 2D array\n\t\t\t\ttotal += elem.length - 2;\n\t\t\t}\n\t\t});\n\n\t\treturn total;\n\t};\n\n\tconst calcCardPos = () => {\n\t\t// const right = window.innerWidth > 1200 ? ((window.innerWidth / 2) + 0 + 'px') : undefined;\n\t\t// const left = right ? undefined : 10;\n\t\tconst width = (maxLevel - 1) * HIER_PX_SIZE + 14\n\n\t\t// Left side is outside the center column if there's room, else just sticks to the left side\n\t\tconst left = window.innerWidth < (1200 + width + 10) ? 0 : (-width - 10);\n\n\t\t// Top updates every time the step changes\n\t\tconst numDefaultsBefore = calcNumDefaultsBefore(foldState.stepIdx);\n\t\tconsole.log(\"[calcCardPos]\", numDefaultsBefore, foldState.stepIdx, stepArray)\n\t\tconst top = (window.innerHeight - 296) - (HIER_PX_SIZE * (foldState.stepIdx + 1 + numDefaultsBefore));\n\t\tlet style = {\n\t\t\t// Don't show first column, and account for padding\n\t\t\twidth: width + 'px',\n\t\t\tleft: left + 'px',\n\t\t\theight: contStyle.height,\n\t\t\ttop: top + 'px'\n\t\t};\n\n\t\treturn style;\n\t};\n\n\tconst triggerRerender = () => {\n\t\tsetHash(cur => cur + 1);\n\t};\n\n\tconst handleExpandClick = e => {\n\t\tsetLayoutState({ expandHierarchy: !layoutState.expandHierarchy });\n\t};\n\n\tconst handleHierNodeClick = (event, path) => {\n\t\tconst stepIdx = stepArray.findIndex(step => path === step[0]);\n\t\tlet newFoldState = {};\n\n\t\tconst [startUseIndex, endUseIndex] = findInUseFamilyNode(stepArray, path);\n\t\tconsole.log(\"[handleHierNodeClick]\", event, stepIdx, startUseIndex, endUseIndex);\n\n\t\tif (!event.shiftKey) {\n\t\t\t// If no shift, just move to this node \n\t\t\tif (stepIdx !== -1) {\n\t\t\t\t// If it's in the stepArray, just set the index to that element\n\t\t\t\tnewFoldState.stepIdx = stepIdx - 1;\n\t\t\t} else {\n\t\t\t\t// Else we need to find whatever in use index corresponds\n\t\t\t\tif (startUseIndex !== -1 && endUseIndex !== -1) {\n\t\t\t\t\tnewFoldState.stepIdx = startUseIndex - 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (foldState.repeatRoot !== -1) {\n\t\t\t\tnewFoldState.repeatRoot = -1;\n\t\t\t\tnewFoldState.repeatRange = null;\n\n\t\t\t\tif (looperWorkerId !== -1) {\n\t\t\t\t\tconsole.log(\"CLEARING\");\n\t\t\t\t\tclearInterval(looperWorkerId);\n\t\t\t\t\tsetLooperWorkerId(-1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// If shift held, then start or modify repeatRange \n\t\t\tif (foldState.repeatRoot !== -1) {\n\t\t\t\t// Modify existing range, replacing the second clicked index\n\t\t\t\tif (stepIdx !== -1) {\n\t\t\t\t\tnewFoldState.repeatRange = [foldState.repeatRoot, stepIdx];\n\t\t\t\t} else if (startUseIndex <= foldState.repeatRoot && endUseIndex >= foldState.repeatRoot) {\n\t\t\t\t\t// Either clicked a descendant or ancestor of the root - basically undefined behavior\n\t\t\t\t\tnewFoldState.repeatRange = [startUseIndex, endUseIndex];\n\t\t\t\t} else if (startUseIndex < foldState.repeatRoot) {\n\t\t\t\t\t// Clicked something before\n\t\t\t\t\tnewFoldState.repeatRange = [foldState.repeatRoot, startUseIndex]\t\n\t\t\t\t} else {\n\t\t\t\t\t// Clicked something after\n\t\t\t\t\tnewFoldState.repeatRange = [foldState.repeatRoot, endUseIndex]\t\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif (stepIdx !== -1) {\n\t\t\t\t\t// If this is the first shift click, we're starting at this location\n\t\t\t\t\tnewFoldState.stepIdx = stepIdx - 1;\n\n\t\t\t\t\tnewFoldState.repeatRoot = stepIdx;\n\t\t\t\t\tnewFoldState.repeatRange = [stepIdx, stepIdx];\n\t\t\t\t} else {\n\t\t\t\t\t// If this is the first shift click, we're starting at this location\n\t\t\t\t\tnewFoldState.stepIdx = startUseIndex - 1;\n\n\t\t\t\t\tnewFoldState.repeatRoot = startUseIndex;\n\t\t\t\t\tnewFoldState.repeatRange = [startUseIndex, endUseIndex];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (looperWorkerId === -1) {\n\t\t\t\tconsole.log(\"SETTING\");\n\t\t\t\tsetLooperWorkerId(setInterval(looperWorker, 2500));\n\t\t\t}\n\n\t\t\t// Ensure the first element is always the first in index order\n\t\t\tnewFoldState.repeatRange.sort();\n\n\t\t\t// Go to the start, and progress forward\n\t\t\tnewFoldState.stepIdx = newFoldState.repeatRange[0] - 1;\n\t\t\tconsole.log(\"setting looper - handleHierNodeClick\", 1);\n\t\t\tsetLooperDirection(1);\n\t\t}\n\n\t\tconsole.log(\"[setting repeatRange]\", newFoldState);\n\t\tsetFoldState(newFoldState);\n\t};\n\n\tconst buildStepArray = () => {\n\t\t// console.log(\"[InstructionalHierarchy buildStepArray]\", initFold && initFold.frame_title);\n\t\treturn collectStepsForLevel(initFold, 0, foldState.usingDefaults)\n\t};\n\n\tconst renderNode = (inst, renderRows, levelIdx, path, belowDefault) => {\n\t\t// Error case - we're on a level deeper than the tree supports\n\t\tif (levelIdx > maxLevel) {\n\t\t\treturn [1, stepIdx];\n\t\t}\n\t\tlet height = 0;\n\t\tlet children = [];\n\t\tconst isDefaultNode = foldState.usingDefaults && inst.default;\n\t\tconst isSelectedLevel = isDefaultNode || !inst.children.length;\n\t\tconst isLeaf = inst.children.length && Array.isArray(inst.children[0]);\n\t\tconst stepIdx = stepArray.findIndex(step => path === step[0]);\n\n\t\tconst style = {};\n\n\t\tif (isLeaf) {\n\t\t\t// Base case: This is a leaf node\n\t\t\theight = 1;\n\n\t\t\tstyle.flexGrow = height;\n\n\t\t\t// Add spacers to all rows below, if necessary\n\t\t\tfor (let i = levelIdx + 1; i < maxLevel; i++) {\n\t\t\t\trenderRows[i].push(\n\t\t\t\t\t<div className={`${classes.hier_node_anchor}`} style={style}>\n\t\t\t\t\t\t<div className={`${classes.hier_node} ${classes.hier_node_spacer}`} key={path + 'spacer' + i} />\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (inst.children.length) {\n\t\t\t// Recursive case: this node has children, so it's as tall as all of them combined\n\t\t\t[height, children] = inst.children.reduce(\n\t\t\t\t(acc, child, childIdx) => {\n\t\t\t\t\tconst childHeight = renderNode(\n\t\t\t\t\t\tchild,\n\t\t\t\t\t\trenderRows,\n\t\t\t\t\t\tlevelIdx + 1,\n\t\t\t\t\t\t`${path},${childIdx}`,\n\t\t\t\t\t\tbelowDefault || isDefaultNode\n\t\t\t\t\t);\n\t\t\t\t\tacc[0] += childHeight;\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t[0, []]\n\t\t\t);\n\n\t\t\tstyle.flexGrow = height;\n\t\t}\n\n\t\tlet type = 'default';\n\n\t\tif (stepIdx === foldState.stepIdx + 1) {\n\t\t\t// This node is the current step (i.e. haven't folded yet)\n\t\t\ttype = 'active';\n\t\t} else if (isSelectedLevel || (isLeaf && !belowDefault)) {\n\t\t\t// These nodes are part of the current step array\n\t\t\ttype = 'inUse';\n\t\t}\n\n\t\tconst pxHeight = HIER_PX_SIZE * style.flexGrow - 4;\n\n\t\t// console.log('[renderNode]', stepArray, levelIdx, path, stepIdx, foldState.stepIdx, type, isSelectedLevel);\n\t\trenderRows[levelIdx].push(\n\t\t\t<Tooltip\n\t\t\t\ttitle={inst.desc}\n\t\t\t\tplacement=\"bottom-start\"\n\t\t\t\tclasses={{ popper: classes.hier_node_tooltip }}\n\t\t\t\tkey={path}\n\t\t\t>\n\t\t\t\t<div className={`${classes.hier_node_anchor}`} ref={activeNodeRef} style={style} onClick={event => handleHierNodeClick(event, path)}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={`${classes.hier_node} ${classes['hier_node__' + type]}`}\n\t\t\t\t\t\tstyle={{ height: pxHeight }}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\n\t\treturn height;\n\t};\n\n\tconst refreshRenderRows = cardStyle => {\n\t\tif (!initFold) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet tmpRows = [];\n\t\tfor (let i = 0; i < maxLevel; i++) {\n\t\t\ttmpRows.push([]);\n\t\t}\n\n\t\trenderNode(initFold.instructions, tmpRows, 0, '0');\n\n\t\trenderRows.current = tmpRows;\n\t\tconst longestRowLen = Math.max(...tmpRows.map(arr => arr.length));\n\t\tsetContStyle(\n\t\t\tObject.assign({}, contStyle, {\n\t\t\t\theight: HIER_PX_SIZE * longestRowLen,\n\t\t\t\twidth: cardStyle.width\n\t\t\t})\n\t\t);\n\t};\n\n\tconst jumpToEnd = () => setFoldState({ stepIdx: foldState.maxSteps - 1 });\n\n\tconst getDescForNode = (stepIdx) => {\n\t\t// console.log(\"[getDescForNode]\", stepIdx, stepArray);\n\t\tconst step = stepArray[foldState.stepIdx + 1]\n\t\tconst path = step[0].split(\",\").slice(1)\n\t\tlet node = getHierNode(initFold.instructions, path);\n\n\t\treturn node.desc;\n\t}\n\n\tconst looperWorker = () => {\n\t\tif (foldState.repeatRoot === -1 || !foldState.repeatRange) {\n\t\t\tconsole.log(\"[looperWorker] ERR - null arguments\");\n\t\t\treturn;\n\t\t}\n\n\t\tsetLooperHash(curHash => curHash + 1);\n\t};\n\n\tconst updateLooper = () => {\n\t\tif (foldState.repeatRoot === -1 || !foldState.repeatRange) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst distFromStart = foldState.stepIdx - foldState.repeatRange[0];\n\t\tconst distFromEnd = foldState.repeatRange[1] - foldState.stepIdx;\n\t\t// console.log(\"[looperWorker]\", foldState.stepIdx, foldState.repeatRoot, looperDirection, distFromStart, distFromEnd);\n\n\t\t// Switch direction to go back up\n\t\tlet tmpDirection = looperDirection;\n\n\t\tif (tmpDirection === -1 && distFromStart === -1) {\n\t\t\ttmpDirection = 1;\n\t\t\tsetLooperDirection(tmpDirection);\n\t\t} else if (tmpDirection === 1 && distFromEnd === 1) {\n\t\t\ttmpDirection = -1;\n\t\t\tsetLooperDirection(tmpDirection);\n\t\t}\n\n\t\tchangeStep(tmpDirection, true);\n\t};\n\n\tconst renderLooperItems = () => {\n\t\tif (foldState.repeatRoot === -1 || !foldState.repeatRange) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet ret = [];\n\t\tfor (let i = foldState.repeatRange[0]; i <= foldState.repeatRange[1]; i++) {\n\t\t\tret.push(\n\t\t\t\t<div className={`${classes.hier_looper_item} ${(i <= foldState.stepIdx + 1) ? classes.hier_looper_item__active : \"\"}`} />\n\t\t\t);\n\t\t}\n\n\t\treturn ret;\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\t// const cardStyle = useMemo(calcCardPos, [window.innerWidth, window.innerHeight, foldState.stepIdx, contStyle.height]);\n\n\tconst buttonClasses = useMemo(\n\t\t() => ({\n\t\t\troot: classes.fold_controls_button,\n\t\t\tlabel: classes.fold_controls_button_label\n\t\t}),\n\t\t[]\n\t);\n\n\tconst stepArray = useMemo(buildStepArray, [\n\t\t!initFold || !initFold.instructions,\n\t\tinitFold && initFold.frame_title\n\t]);\n\n\tconst cardStyle = calcCardPos();\n\n\t// Perform mount and unmount actions\n\tuseEffect(() => {\n\t\t// Rerender whenever the page resizes\n\t\twindow.addEventListener('resize', triggerRerender);\n\n\t\t// Unmount logic\n\t\treturn () => {\n\t\t\t// Stop the looper worker if it's running\n\t\t\tif (looperWorkerId !== -1) {\n\t\t\t\tclearInterval(looperWorkerId);\n\t\t\t}\n\t\t}\n\t}, []);\n\n\tuseEffect(() => refreshRenderRows(maxLevel), [foldLastUpdated, foldState.stepIdx]);\n\n\tuseEffect(updateLooper, [looperHash])\n\n\t// console.log('[InstructionalHierarchy]', renderRows.current);\n\n\tconst ctrlCardLeftPx = `${(window.innerWidth / 2) + 256}px`;\n\n\tconst curBodyWidth = Math.min(1200, window.innerWidth);\n\tconst buttonSize = Math.min(200, curBodyWidth * 0.15);\n\tconst buttonIconClass = buttonSize < 100 ?  classes.fold_controls_button_icon : classes.fold_controls_button_icon_large;\n\tconst fabStyle = {\n\t\twidth: buttonSize + 'px',\n\t\theight: buttonSize + 'px',\n\t};\n\n\tconst instCardMargin = window.innerWidth < (1200 + parseInt(cardStyle.width) + 10) ? (parseInt(cardStyle.width) + 10 + 'px') : \"0\";\n\n\tconsole.log(\"[InstructionalHierarchy]\", stepArray);\n\n\treturn (\n\t\t<div className={classes.centerColumn_flex}>\n\t\t\t{/* The card contains the timeline, which contains most actions here */}\n\t\t\t<div className={classes.hier_card} style={cardStyle} ref={cardRef}>\n\t\t\t\t{/* The timeline */}\n\t\t\t\t<div className={classes.hier_container} style={contStyle}>\n\t\t\t\t\t{initFold &&\n\t\t\t\t\t\trenderRows.current.reduce((acc, row, idx) => {\n\t\t\t\t\t\t\tif (idx !== 0) {\n\t\t\t\t\t\t\t\tacc.push(\n\t\t\t\t\t\t\t\t\t<div className={classes.hier_node_container} >{row}</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t}, [])}\n\t\t\t\t\t<div className={`${classes.hier_node} ${classes.hier_node_bookend}`} />\n\t\t\t\t</div>\n\n\t\t\t\t{/* The \"current Time\" line */}\n\t\t\t</div>\n\n\t\t\t{/* Text box shows details on the current step */}\n\t\t\t{initFold && initFold.instructions && (\n\t\t\t\t<div>\n\t\t\t\t\t{foldState.repeatRoot !== -1 && (\n\t\t\t\t\t\t<div className={classes.hier_looper_rail} style={{marginLeft: instCardMargin}}>\n\t\t\t\t\t\t\t<div className={classes.hier_looper_container} >\n\t\t\t\t\t\t\t\t{renderLooperItems()}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<Card className={classes.hier_desc_card} style={{marginLeft: instCardMargin}}> \n\t\t\t\t\t\t<Typography className={classes.modelCard_title} variant=\"h5\" component=\"h2\"> Current Step </Typography>\n\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\t{(foldState.stepIdx < foldState.maxSteps - 1) ?\n\t\t\t\t\t\t\t\tgetDescForNode(foldState.stepIdx) :\n\t\t\t\t\t\t\t\t// \"text\" :\n\t\t\t\t\t\t\t\t\"Congratulations - your model is complete!\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Card>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<div className={classes.fold_controls_button_container}>\n\t\t\t\t<Fab\n\t\t\t\t\tclasses={buttonClasses}\n\t\t\t\t\tonClick={() => changeStep(-1)}\n\t\t\t\t\tdisabled={foldState.stepIdx < 0}\n\t\t\t\t\tstyle={fabStyle}\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tsize=\"large\"\n\t\t\t\t>\n\t\t\t\t\t<SkipPrevious className={buttonIconClass} />\n\t\t\t\t</Fab>\n\t\t\t\t<Fab\n\t\t\t\t\tclasses={buttonClasses}\n\t\t\t\t\tonClick={() => changeStep(1)}\n\t\t\t\t\tdisabled={foldState.stepIdx >= foldState.maxSteps - 1}\n\t\t\t\t\tstyle={fabStyle}\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tsize=\"large\"\n\t\t\t\t>\n\t\t\t\t\t<SkipNext className={buttonIconClass} />\n\t\t\t\t</Fab>\n\t\t\t</div>\n\n\t\t\t{userState.showTimerAssess && (\n\t\t\t\t<TimerContainer />\n\t\t\t)}\n\t\t</div>\n\t);\n\t\t\t\t// <Fab aria-label=\"expand instructions\" className={classes.hier_expandCtrl} onClick={handleExpandClick} color=\"secondary\" size=\"small\">\n\t\t\t\t// \t{layoutState.expandHierarchy ? <ExpandLess /> : <ExpandMore />}\n\t\t\t\t// </Fab>\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState,\n\t\tlayoutStateHash: state.appReducer.layoutState.hash,\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash,\n\t\tuserState: state.appReducer.userState,\n\t\tuserStateHash: state.appReducer.userState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setFoldState, setLayoutState, setUserState })(InstructionalHierarchy);\n","/home/bbor/dev/origamiodyssey/src/layout/pages/ModelCard.js",["315","316","317","318","319","320","321","322","323","324","325","326","327","328","329"],"/**\n * FILENAME: ModelCard.js\n *\n * DESCRIPTION: This page allows the user to browse through cards, read details on models, and select one to fold.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config } from 'react-spring';\n\nimport {\n\tDivider,\n\tTypography,\n\tCardMedia,\n\tCardActionArea,\n\tCardActions,\n\tCardContent,\n\tButton,\n\tGrid,\n\tFab,\n\tCard,\n\tChip\n} from '@material-ui/core';\nimport FilterList from '@material-ui/icons/FilterList';\nimport Clear from '@material-ui/icons/Clear';\n\nimport useStyles from './../../style/theme';\nimport { Folds, Pages, Tags, TagCategories } from './../../infra/constants';\nimport { setLayoutState } from './../../infra/actions';\nconst AnimatedCard = animated(Card);\n\n/**\n * Recreate the refs array, reusing elements. Note that this algo doesn't support reordering\n */\n// const updateCardRefs = () => {\n// \tsetCardRefs(elRefs =>\n// \t\tArray(cardList.length)\n// \t\t\t.fill()\n// \t\t\t.map((el, i) => cardRefs[i] || createRef())\n// \t);\n// };\n\n/**\n * A subcomponent that displays one card. This component needs to grow and shrink without affecting html\n * layout styling, so it relies on a placeholder div that only suggests a shape to the actual, absolute, Card.\n */\nexport const ModelCard = props => {\n\tconst { foldEntry, name, placeholderRef, cardKey, index, isActive, isHidden, handleCardClick, layoutState, setLayoutState } = props;\n\tconst [posHash, setPosHash] = useState(0);\n\tconst classes = useStyles();\n\tconst style = useRef({});\n\n\tuseEffect(() => console.log(\"[ModelCard]\", cardKey), []);\n\n\t/**\n\t * Pass the click event on to the parent function to open a fold page.\n\t */\n\tconst handleFoldClick = e => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\topenFold(cardKey);\n\t};\n\n\t/**\n\t * Open the fold page with the supplied model name, closing this page.\n\t */\n\tconst openFold = foldKey => {\n\t\tsetLayoutState({\n\t\t\tpage: Pages.Fold,\n\t\t\tcurFold: foldKey\n\t\t});\n\t};\n\n\t/**\n\t * Sub-subcomponent to show the label for a row on this card. This probably could be abstracted out, but it\n\t * doesn't seem worth it.\n\t */\n\tconst CardLabel = ({ text }) => (\n\t\t<React.Fragment>\n\t\t\t<Typography className={classes.modelCard_label} variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t{text}\n\t\t\t</Typography>\n\t\t\t<Divider />\n\t\t</React.Fragment>\n\t);\n\n\t// INNER LIFECYCLE\n\n\t// Dynamically calculate the target size of the card\n\tstyle.current = {\n\t\theight: isActive ? '400px' : '180px',\n\t\twidth: isActive ? '400px' : '200px',\n\t\tdisplay: isHidden ? 'none' : undefined\n\t};\n\n\tif (placeholderRef && placeholderRef.current) {\n\t\tstyle.current.top = placeholderRef.current.offsetTop;\n\t\tstyle.current.left = placeholderRef.current.offsetLeft;\n\t}\n\n\t// Update hash when style changes so we can inform children\n\tuseEffect(() => setPosHash(cur => cur + 1), [style]);\n\n\t// Get the location of the current image using webpack  - probably only done once per card\n\tconst imagePath = useMemo(\n\t\t() => (layoutState.useImages ? require(`./../../static/${foldEntry.img}_thumbnail.png`) : undefined),\n\t\t[foldEntry.img, layoutState.useImages]\n\t);\n\n\tconsole.log(\"[ModelCard] \", style.current);\n\n\t// This is the actual card: an `absolute` element so it can grow or shrink in place without affecting others' positioning\n\treturn (\n\t\t\t<Card\n\t\t\t\tclassName={`${classes.modelCard} ${isActive ? classes.modelCard__active : ''}`}\n\t\t\t\tkey={cardKey}\n\t\t\t\tname={index}\n\t\t\t\tonClick={event => handleCardClick(event, index)}\n\t\t\t\tstyle={style.current}\n\t\t\t>\n\t\t\t\t<CardActionArea\n\t\t\t\t\tclassName={`${classes.modelCard_rail_container} ${\n\t\t\t\t\t\tisActive ? classes.modelCard_rail_container__active : ''\n\t\t\t\t\t}`}\n\t\t\t\t>\n\t\t\t\t\t<div className={classes.modelCard_rail}>\n\t\t\t\t\t\t{/* Picture / Preview Model */}\n\t\t\t\t\t\t<CardMedia\n\t\t\t\t\t\t\tclassName={classes.modelCard_img}\n\t\t\t\t\t\t\tcomponent=\"img\"\n\t\t\t\t\t\t\talt={'Folded Model Picture'}\n\t\t\t\t\t\t\ttitle=\"Folded Model Picture\"\n\t\t\t\t\t\t\theight=\"120\"\n\t\t\t\t\t\t\t// image={imagePath}\n\t\t\t\t\t\t\timage={foldEntry.staticImg}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t{/* Title */}\n\t\t\t\t\t\t\t<Typography className={classes.modelCard_title} variant=\"h5\" component=\"h2\">\n\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t{/* Tags */}\n\t\t\t\t\t\t\t{props.isActive && (\n\t\t\t\t\t\t\t\t<div className={classes.tags} variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t\t\t\t\t{foldEntry.tags && foldEntry.tags.length\n\t\t\t\t\t\t\t\t\t\t? foldEntry.tags.map((tagKey, i) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={cardKey + '_' + tagKey}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclickable\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={Tags[tagKey].text}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${Tags[tagKey].category\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? classes[`tags__${Tags[tagKey].category}`]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: undefined} ${classes.tagchip}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t  ))\n\t\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Details rail */}\n\t\t\t\t\t{isActive && (\n\t\t\t\t\t\t<div className={classes.modelCard_rail}>\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t{props.isActive && (\n\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t{/* Attribution */}\n\t\t\t\t\t\t\t\t\t\t<CardLabel text=\"Creator\" />\n\t\t\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.modelCard_bodyText}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"body2\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"textSecondary\"\n\t\t\t\t\t\t\t\t\t\t\tcomponent=\"p\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{foldEntry.author}\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t\t\t<br />\n\n\t\t\t\t\t\t\t\t\t\t<CardLabel text=\"Description\" />\n\t\t\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.modelCard_bodyText}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"body2\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"textSecondary\"\n\t\t\t\t\t\t\t\t\t\t\tcomponent=\"p\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{foldEntry.description}\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</CardActionArea>\n\n\t\t\t\t{/* Actions */}\n\t\t\t\t{isActive && (\n\t\t\t\t\t<CardActions classes={classes.modelCard_footer}>\n\t\t\t\t\t\t<Button size=\"small\" color=\"primary\">\n\t\t\t\t\t\t\tShare\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button size=\"small\" color=\"primary\">\n\t\t\t\t\t\t\tLearn More\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<div className={classes.modelCard_foldButton}>\n\t\t\t\t\t\t\t<Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={handleFoldClick}>\n\t\t\t\t\t\t\t\tFold\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</CardActions>\n\t\t\t\t)}\n\t\t\t</Card>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState,\n\t\tlayoutStateHash: state.appReducer.layoutState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setLayoutState })(ModelCard);\n","/home/bbor/dev/origamiodyssey/src/layout/pages/Timer.js",["330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360"],"/**\n * FILENAME: Timer.js\n *\n * DESCRIPTION: This page allows the user to browse through cards, read details on models, and select one to fold.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config } from 'react-spring';\n\nimport {\n\tButtonGroup,\n\tDivider,\n\tTypography,\n\tCardMedia,\n\tCardActionArea,\n\tCardActions,\n\tCardContent,\n\tButton,\n\tGrid,\n\tFab,\n\tCard,\n\tChip,\n\tSnackbar,\n\tPaper,\n\tTooltip\n} from '@material-ui/core';\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport FilterList from '@material-ui/icons/FilterList';\nimport Clear from '@material-ui/icons/Clear';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport Pause from '@material-ui/icons/Pause';\nimport Star from '@material-ui/icons/Star';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport Done from '@material-ui/icons/Done';\n\nimport useStyles from './../../style/theme';\nimport { Folds, Pages, Tags, TagCategories, LikertTitles } from './../../infra/constants';\nimport { setLayoutState, setFoldState, addHistoryEntry } from './../../infra/actions';\nimport { timerPosixToString } from './../../infra/utils';\n\n/**\n * A timer that will re-rerender every second minimum.\n */\nexport const Timer = props => {\n\tconst {\n\t\tfoldEntry,\n\t\tname,\n\t\tplaceholderRef,\n\t\tcardKey,\n\t\tindex,\n\t\tisActive,\n\t\tisHidden,\n\t\thandleCardClick,\n\t\tlayoutState,\n\t\tsetLayoutState,\n\t\tfoldState,\n\t\tsetFoldState,\n\t\tuserState,\n\t\taddHistoryEntry\n\t} = props;\n\tconst [curHash, setHash] = useState(0);\n\tconst [isPlaying, setIsPlaying] = useState(false);\n\tconst [startPosix, setStartPosix] = useState(-1);\n\tconst [workerId, setWorkerId] = useState(-1);\n\tconst [hasInitialized, setHasInitialized] = useState(false);\n\tconst [hasFinished, setHasFinished] = useState(false);\n\tconst [showSnackbar, setShowSnackbar] = useState(false);\n\tconst [showLikertAssess, setShowLikertAssess] = useState(false);\n\tconst [lastLikert, setLastLikert] = useState(-1);\n\tconst classes = useStyles();\n\tconst style = useRef({});\n\n\tuseEffect(() => console.log('[Timer]', cardKey), []);\n\n\t/**\n\t * Pass the click event on to the parent function to open a fold page.\n\t */\n\tconst handleFoldClick = e => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\topenFold(cardKey);\n\t};\n\n\t/**\n\t * Open the fold page with the supplied model name, closing this page.\n\t */\n\tconst openFold = foldKey => {\n\t\tsetLayoutState({\n\t\t\tpage: Pages.Fold,\n\t\t\tcurFold: foldKey\n\t\t});\n\t};\n\n\tconst triggerRerender = () => {\n\t\tsetHash(cur => cur + 1);\n\t};\n\n\tconst toggleTimer = () => {\n\t\tif (isPlaying && workerId !== -1) {\n\t\t\tsetFoldState({\n\t\t\t\tlastRecordedTimer: foldState.lastRecordedTimer + (Date.now() - startPosix)\n\t\t\t});\n\n\t\t\tclearInterval(workerId);\n\t\t\tsetWorkerId(-1);\n\t\t\tsetStartPosix(-1);\n\t\t} else if (!isPlaying && workerId === -1){\n\t\t\tsetWorkerId(setInterval(triggerRerender, 1000))\n\t\t\tsetStartPosix(Date.now());\n\t\t}\n\n\t\tsetIsPlaying(cur => !cur);\n\t};\n\n\t/**\n\t * Reset the state that backs the value of the timer. Does not affect the running state;\n\t * a running timer that is reset will immediately start counting from 0. \n\t */\n\tconst resetTimer = () => {\n\t\t// Erase any record of the previous run - it is not saved anywhere\n\t\tsetFoldState({ lastRecordedTimer: 0 });\n\n\t\t// Start running immediately if it was already running\n\t\tsetStartPosix(isPlaying ? Date.now()  : -1);\n\n\t\t// Don't update the worker - if it's running, let it continue running\n\t};\n\n\tconst resetAllState = () => {\n\t\tsetIsPlaying(false);\n\t\tsetHasInitialized(false);\n\t\tsetHasFinished(false);\n\t\tsetStartPosix(-1);\n\n\t\tsetFoldState({lastRecordedTimer: 0});\n\t};\n\n\tconst handleRecordQuality = () => {\n\t\tsetShowLikertAssess(true);\n\t};\n\n\tconst handleModelSelect = () => {\n\t\tcloseSnackbar();\n\t\tsetLayoutState({\n\t\t\tpage: Pages.ModelSelect,\n\t\t\tcurFold: null\n\t\t});\n\n\t\t// Reset fold state\n\t\tsetFoldState(null);\n\t};\n\n\tconst handleFoldAnother = () => {\n\t\tcloseSnackbar();\n\t\tresetAllState();\n\n\t\t// Reset fold state\n\t\tsetFoldState({\n\t\t\tstepIdx: -1\t,\n\t\t\trepeatRoot: -1,\n\t\t\trepeatRange: null\n\t\t});\n\t}\n\n\tconst handleSubmitLikert = () => {\n\t\tsetShowLikertAssess(false);\n\t};\n\n\tconst genLikertScale = () => {\n\t\tlet ret = [];\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tconst isActive = i <= lastLikert;\n\t\t\tret.push(\n\t\t\t\t<Tooltip\n\t\t\t\t\ttitle={LikertTitles[i]}\n\t\t\t\t\tplacement=\"bottom-start\"\n\t\t\t\t\tclasses={{ popper: classes.hier_node_tooltip }}\n\t\t\t\t\tkey={`likert-tt-${i}`}\n\t\t\t\t>\n\t\t\t\t\t<div key={i} className={classes.likert_icon_container} onClick={() => setLastLikert(cur => cur === i ? -1 : i)}>\n\t\t\t\t\t\t{isActive ? <Star className={classes.likert_icon}/> : <StarBorder className={classes.likert_icon}/>}\n\t\t\t\t\t</div>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<ButtonGroup variant=\"text\">\n\t\t\t\t{ret}\n\t\t\t\t<Button onClick={handleSubmitLikert} disabled={lastLikert === -1}>\n\t\t\t\t\tSubmit\t\n\t\t\t\t</Button>\n\t\t\t</ButtonGroup>\n\t\t);\n\t};\n\n\tconst closeSnackbar = () => {\n\t\tconsole.log(\"[closeSnackbar]\", hasFinished, showSnackbar, lastLikert, layoutState.curFold);\n\t\tif (!showSnackbar) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetShowSnackbar(false);\n\n\t\t// If details weren't already sent, send them now\n\t\tif (!hasFinished) {\n\t\t\tsetHasFinished(true);\t\n\n\t\t\tlet newEntry = {\n\t\t\t\tfoldKey: layoutState.curFold,\n\t\t\t\ttime: Date.now(),\n\t\t\t\tquality: lastLikert !== -1 ? lastLikert : 3,\n\t\t\t\ttimer: foldState.lastRecordedTimer\n\t\t\t};\n\n\t\t\taddHistoryEntry(newEntry);\n\n\t\t\tsetFoldState({ lastRecordedTimer: 0 });\n\t\t\tsetLastLikert(-1);\n\t\t}\n\t};\n\n\t// LIFECYCLE\n\n\t// Dynamically calculate the target size of the card\n\tstyle.current = {\n\t\theight: isActive ? '400px' : '180px',\n\t\twidth: isActive ? '400px' : '200px',\n\t\tdisplay: isHidden ? 'none' : undefined\n\t};\n\n\tif (placeholderRef && placeholderRef.current) {\n\t\tstyle.current.top = placeholderRef.current.offsetTop;\n\t\tstyle.current.left = placeholderRef.current.offsetLeft;\n\t}\n\n\t// Every time a new model is selected, the timer starts from scratch\n\tuseEffect(resetAllState, [layoutState.curFold]);\n\n\tuseEffect(() => {\n\t\tconsole.log(\"[Timer useEffect] \", foldState.stepIdx, foldState.maxSteps)\n\t\t// If this is a change to the last step, \n\t\tif (foldState.stepIdx >= foldState.maxSteps - 1) {\n\t\t\tif (isPlaying) {\n\t\t\t\ttoggleTimer();\n\t\t\t}\n\n\t\t\tsetShowSnackbar(true);\n\n\t\t// Start the timer the first time the user changes steps\n\t\t// TODO - probably good feature, but system needs redesign\n\t\t// } else if (!hasInitialized && !isPlaying) {\n\t\t// \tsetHasInitialized(true);\n\t\t// \tsetIsPlaying(true);\n\t\t// \tsetStartPosix(Date.now());\n\t\t}\n\n\t\t// Close the snackbar on unmount if it's open, which involves saving\n\t\treturn closeSnackbar;\n\t}, [foldState.stepIdx]);\n\n\tlet timerPosix = foldState.lastRecordedTimer;\n\tif (isPlaying) {\n\t\ttimerPosix += Date.now() - startPosix;\n\t}\n\n\tconsole.log(\"[Timer]\", timerPosix, foldState.lastRecordedTimer, isPlaying);\n\n\t// This is the actual card: an `absolute` element so it can grow or shrink in place without affecting others' positioning\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.fold_timer_container}>\n\t\t\t\t<ButtonGroup>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName={`${classes.fold_timer} ${!isPlaying ? classes.fold_timer__paused : ''}`}\n\t\t\t\t\t\tcolor={isPlaying ? undefined : \"primary\"}\n\t\t\t\t\t\t// variant=\"text\"\n\t\t\t\t\t\t// size=\"large\"\n\t\t\t\t\t\tonClick={toggleTimer}\n\t\t\t\t\t>\n\t\t\t\t\t\t{!isPlaying && <PlayArrow/>}\n\t\t\t\t\t\t{timerPosixToString(timerPosix)}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button className={classes.fold_timer_control} onClick={resetTimer} disabled={!isPlaying && !foldState.lastRecordedTimer}>\n\t\t\t\t\t\t<Clear />\t\n\t\t\t\t\t</Button>\n\t\t\t\t</ButtonGroup>\n\t\t\t</div>\n\t\t\t<Snackbar className={classes.fold_timer_snackbar} open={showSnackbar} anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}>\n\t\t\t\t<Paper elevation={5}>\n\t\t\t\t{showLikertAssess ? (\n\t\t\t\t\t<Grid className={classes.fold_timer_grid} container>\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t<Typography variant=\"h4\" component=\"h4\">\n\t\t\t\t\t\t\t\tPlease rate the quality of this result...\t\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t{genLikertScale()}\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t) : (\n\t\t\t\t\t<Grid className={classes.fold_timer_grid} container>\n\t\t\t\t\t\t<Grid item xs={10}>\n\t\t\t\t\t\t\t<Typography  variant=\"h4\" component=\"h4\">\n\t\t\t\t\t\t\t\tModel complete\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<Button classes={{root: classes.fold_timer_snackbar_close}} onClick={closeSnackbar}>\n\t\t\t\t\t\t\t\t<Clear />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t{userState.showLikertAssess && (\n\t\t\t\t\t\t\t<Grid item xs={12} md={4}>\n\t\t\t\t\t\t\t\t<Button onClick={handleRecordQuality} disabled={lastLikert !== -1}>\n\t\t\t\t\t\t\t\t\t{lastLikert !== -1 && (\n\t\t\t\t\t\t\t\t\t\t<Done className={classes.fold_timer_done_icon} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tRecord Quality\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<Grid item xs={12} md={4}>\n\t\t\t\t\t\t\t<Button onClick={handleFoldAnother}>\n\t\t\t\t\t\t\t\tFold Another\t\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={12} md={4}>\n\t\t\t\t\t\t\t<Button onClick={handleModelSelect}>\n\t\t\t\t\t\t\t\tFind Another Model\t\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t)}\n\t\t\t\t</Paper>\n\t\t\t</Snackbar>\n\t\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState,\n\t\tlayoutStateHash: state.appReducer.layoutState.hash,\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash,\n\t\tuserState: state.appReducer.userState,\n\t\tuserStateHash: state.appReducer.userState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setLayoutState, setFoldState, addHistoryEntry })(Timer);\n",{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","severity":1,"message":"366","line":8,"column":35,"nodeType":"367","messageId":"368","endLine":8,"endColumn":42},{"ruleId":"365","severity":1,"message":"369","line":8,"column":44,"nodeType":"367","messageId":"368","endLine":8,"endColumn":53},{"ruleId":"365","severity":1,"message":"370","line":13,"column":2,"nodeType":"367","messageId":"368","endLine":13,"endColumn":19},{"ruleId":"365","severity":1,"message":"371","line":16,"column":2,"nodeType":"367","messageId":"368","endLine":16,"endColumn":12},{"ruleId":"365","severity":1,"message":"372","line":17,"column":2,"nodeType":"367","messageId":"368","endLine":17,"endColumn":6},{"ruleId":"365","severity":1,"message":"373","line":18,"column":2,"nodeType":"367","messageId":"368","endLine":18,"endColumn":10},{"ruleId":"365","severity":1,"message":"374","line":32,"column":9,"nodeType":"367","messageId":"368","endLine":32,"endColumn":17},{"ruleId":"365","severity":1,"message":"375","line":32,"column":19,"nodeType":"367","messageId":"368","endLine":32,"endColumn":30},{"ruleId":"365","severity":1,"message":"376","line":35,"column":8,"nodeType":"367","messageId":"368","endLine":35,"endColumn":12},{"ruleId":"365","severity":1,"message":"377","line":41,"column":8,"nodeType":"367","messageId":"368","endLine":41,"endColumn":23},{"ruleId":"365","severity":1,"message":"378","line":45,"column":8,"nodeType":"367","messageId":"368","endLine":45,"endColumn":23},{"ruleId":"365","severity":1,"message":"379","line":11,"column":10,"nodeType":"367","messageId":"368","endLine":11,"endColumn":25},{"ruleId":"365","severity":1,"message":"380","line":11,"column":27,"nodeType":"367","messageId":"368","endLine":11,"endColumn":33},{"ruleId":"365","severity":1,"message":"381","line":11,"column":35,"nodeType":"367","messageId":"368","endLine":11,"endColumn":39},{"ruleId":"365","severity":1,"message":"382","line":11,"column":41,"nodeType":"367","messageId":"368","endLine":11,"endColumn":48},{"ruleId":"365","severity":1,"message":"383","line":11,"column":50,"nodeType":"367","messageId":"368","endLine":11,"endColumn":58},{"ruleId":"365","severity":1,"message":"384","line":12,"column":8,"nodeType":"367","messageId":"368","endLine":12,"endColumn":20},{"ruleId":"365","severity":1,"message":"385","line":13,"column":8,"nodeType":"367","messageId":"368","endLine":13,"endColumn":20},{"ruleId":"365","severity":1,"message":"386","line":14,"column":8,"nodeType":"367","messageId":"368","endLine":14,"endColumn":22},{"ruleId":"365","severity":1,"message":"387","line":15,"column":8,"nodeType":"367","messageId":"368","endLine":15,"endColumn":25},{"ruleId":"365","severity":1,"message":"388","line":18,"column":24,"nodeType":"367","messageId":"368","endLine":18,"endColumn":35},{"ruleId":"365","severity":1,"message":"389","line":31,"column":3,"nodeType":"367","messageId":"368","endLine":31,"endColumn":18},{"ruleId":"365","severity":1,"message":"390","line":34,"column":3,"nodeType":"367","messageId":"368","endLine":34,"endColumn":16},{"ruleId":"365","severity":1,"message":"391","line":37,"column":3,"nodeType":"367","messageId":"368","endLine":37,"endColumn":18},{"ruleId":"392","severity":1,"message":"393","line":161,"column":5,"nodeType":"394","endLine":161,"endColumn":7,"suggestions":"395"},{"ruleId":"392","severity":1,"message":"396","line":165,"column":5,"nodeType":"394","endLine":165,"endColumn":57,"suggestions":"397"},{"ruleId":"392","severity":1,"message":"398","line":168,"column":24,"nodeType":"394","endLine":168,"endColumn":45,"suggestions":"399"},{"ruleId":"392","severity":1,"message":"400","line":174,"column":5,"nodeType":"394","endLine":174,"endColumn":14,"suggestions":"401"},{"ruleId":"392","severity":1,"message":"402","line":176,"column":35,"nodeType":"394","endLine":176,"endColumn":53,"suggestions":"403"},{"ruleId":"392","severity":1,"message":"404","line":177,"column":45,"nodeType":"394","endLine":177,"endColumn":77,"suggestions":"405"},{"ruleId":"365","severity":1,"message":"406","line":8,"column":17,"nodeType":"367","messageId":"368","endLine":8,"endColumn":25},{"ruleId":"365","severity":1,"message":"407","line":8,"column":27,"nodeType":"367","messageId":"368","endLine":8,"endColumn":33},{"ruleId":"365","severity":1,"message":"366","line":8,"column":35,"nodeType":"367","messageId":"368","endLine":8,"endColumn":42},{"ruleId":"365","severity":1,"message":"369","line":8,"column":44,"nodeType":"367","messageId":"368","endLine":8,"endColumn":53},{"ruleId":"408","severity":1,"message":"409","line":12,"column":8,"nodeType":"410","messageId":"411","endLine":12,"endColumn":11},{"ruleId":"361","replacedBy":"412"},{"ruleId":"363","replacedBy":"413"},{"ruleId":"365","severity":1,"message":"406","line":7,"column":17,"nodeType":"367","messageId":"368","endLine":7,"endColumn":25},{"ruleId":"365","severity":1,"message":"407","line":7,"column":27,"nodeType":"367","messageId":"368","endLine":7,"endColumn":33},{"ruleId":"365","severity":1,"message":"366","line":7,"column":35,"nodeType":"367","messageId":"368","endLine":7,"endColumn":42},{"ruleId":"365","severity":1,"message":"369","line":7,"column":44,"nodeType":"367","messageId":"368","endLine":7,"endColumn":53},{"ruleId":"365","severity":1,"message":"414","line":9,"column":8,"nodeType":"367","messageId":"368","endLine":9,"endColumn":18},{"ruleId":"365","severity":1,"message":"415","line":10,"column":8,"nodeType":"367","messageId":"368","endLine":10,"endColumn":17},{"ruleId":"365","severity":1,"message":"416","line":11,"column":8,"nodeType":"367","messageId":"368","endLine":11,"endColumn":21},{"ruleId":"365","severity":1,"message":"417","line":12,"column":8,"nodeType":"367","messageId":"368","endLine":12,"endColumn":20},{"ruleId":"365","severity":1,"message":"418","line":17,"column":8,"nodeType":"367","messageId":"368","endLine":17,"endColumn":16},{"ruleId":"365","severity":1,"message":"366","line":8,"column":35,"nodeType":"367","messageId":"368","endLine":8,"endColumn":42},{"ruleId":"365","severity":1,"message":"369","line":8,"column":44,"nodeType":"367","messageId":"368","endLine":8,"endColumn":53},{"ruleId":"365","severity":1,"message":"419","line":12,"column":38,"nodeType":"367","messageId":"368","endLine":12,"endColumn":47},{"ruleId":"365","severity":1,"message":"420","line":17,"column":10,"nodeType":"367","messageId":"368","endLine":17,"endColumn":19},{"ruleId":"365","severity":1,"message":"421","line":17,"column":21,"nodeType":"367","messageId":"368","endLine":17,"endColumn":30},{"ruleId":"365","severity":1,"message":"422","line":17,"column":32,"nodeType":"367","messageId":"368","endLine":17,"endColumn":42},{"ruleId":"365","severity":1,"message":"423","line":17,"column":44,"nodeType":"367","messageId":"368","endLine":17,"endColumn":52},{"ruleId":"365","severity":1,"message":"424","line":17,"column":54,"nodeType":"367","messageId":"368","endLine":17,"endColumn":60},{"ruleId":"365","severity":1,"message":"425","line":21,"column":10,"nodeType":"367","messageId":"368","endLine":21,"endColumn":15},{"ruleId":"365","severity":1,"message":"426","line":21,"column":17,"nodeType":"367","messageId":"368","endLine":21,"endColumn":22},{"ruleId":"365","severity":1,"message":"427","line":67,"column":37,"nodeType":"367","messageId":"368","endLine":67,"endColumn":46},{"ruleId":"365","severity":1,"message":"389","line":67,"column":61,"nodeType":"367","messageId":"368","endLine":67,"endColumn":76},{"ruleId":"365","severity":1,"message":"428","line":73,"column":9,"nodeType":"367","messageId":"368","endLine":73,"endColumn":22},{"ruleId":"429","severity":1,"message":"430","line":15,"column":2,"nodeType":"431","messageId":"432","endLine":65,"endColumn":3},{"ruleId":"433","severity":1,"message":"434","line":98,"column":3,"nodeType":"435","messageId":"411","endLine":98,"endColumn":8},{"ruleId":"365","severity":1,"message":"436","line":11,"column":10,"nodeType":"367","messageId":"368","endLine":11,"endColumn":16},{"ruleId":"365","severity":1,"message":"419","line":11,"column":38,"nodeType":"367","messageId":"368","endLine":11,"endColumn":47},{"ruleId":"365","severity":1,"message":"437","line":11,"column":49,"nodeType":"367","messageId":"368","endLine":11,"endColumn":55},{"ruleId":"365","severity":1,"message":"421","line":16,"column":13,"nodeType":"367","messageId":"368","endLine":16,"endColumn":22},{"ruleId":"365","severity":1,"message":"438","line":36,"column":3,"nodeType":"367","messageId":"368","endLine":36,"endColumn":11},{"ruleId":"365","severity":1,"message":"439","line":37,"column":3,"nodeType":"367","messageId":"368","endLine":37,"endColumn":8},{"ruleId":"365","severity":1,"message":"440","line":42,"column":3,"nodeType":"367","messageId":"368","endLine":42,"endColumn":18},{"ruleId":"365","severity":1,"message":"390","line":45,"column":3,"nodeType":"367","messageId":"368","endLine":45,"endColumn":16},{"ruleId":"365","severity":1,"message":"391","line":48,"column":3,"nodeType":"367","messageId":"368","endLine":48,"endColumn":18},{"ruleId":"365","severity":1,"message":"441","line":54,"column":9,"nodeType":"367","messageId":"368","endLine":54,"endColumn":21},{"ruleId":"365","severity":1,"message":"442","line":54,"column":23,"nodeType":"367","messageId":"368","endLine":54,"endColumn":38},{"ruleId":"365","severity":1,"message":"443","line":57,"column":8,"nodeType":"367","messageId":"368","endLine":57,"endColumn":16},{"ruleId":"444","severity":1,"message":"445","line":339,"column":59,"nodeType":"446","messageId":"447","endLine":339,"endColumn":61},{"ruleId":"365","severity":1,"message":"448","line":496,"column":8,"nodeType":"367","messageId":"368","endLine":496,"endColumn":18},{"ruleId":"365","severity":1,"message":"449","line":538,"column":9,"nodeType":"367","messageId":"368","endLine":538,"endColumn":17},{"ruleId":"365","severity":1,"message":"450","line":792,"column":8,"nodeType":"367","messageId":"368","endLine":792,"endColumn":17},{"ruleId":"365","severity":1,"message":"451","line":826,"column":8,"nodeType":"367","messageId":"368","endLine":826,"endColumn":28},{"ruleId":"392","severity":1,"message":"452","line":939,"column":44,"nodeType":"394","endLine":942,"endColumn":3,"suggestions":"453"},{"ruleId":"392","severity":1,"message":"454","line":940,"column":3,"nodeType":"455","endLine":940,"endColumn":46},{"ruleId":"392","severity":1,"message":"454","line":941,"column":3,"nodeType":"455","endLine":941,"endColumn":43},{"ruleId":"392","severity":1,"message":"456","line":944,"column":33,"nodeType":"394","endLine":944,"endColumn":52,"suggestions":"457"},{"ruleId":"392","severity":1,"message":"458","line":945,"column":27,"nodeType":"394","endLine":945,"endColumn":36,"suggestions":"459"},{"ruleId":"392","severity":1,"message":"460","line":946,"column":39,"nodeType":"394","endLine":946,"endColumn":66,"suggestions":"461"},{"ruleId":"392","severity":1,"message":"462","line":947,"column":26,"nodeType":"394","endLine":947,"endColumn":50,"suggestions":"463"},{"ruleId":"365","severity":1,"message":"407","line":8,"column":27,"nodeType":"367","messageId":"368","endLine":8,"endColumn":33},{"ruleId":"365","severity":1,"message":"366","line":8,"column":35,"nodeType":"367","messageId":"368","endLine":8,"endColumn":42},{"ruleId":"365","severity":1,"message":"369","line":8,"column":44,"nodeType":"367","messageId":"368","endLine":8,"endColumn":53},{"ruleId":"365","severity":1,"message":"380","line":11,"column":27,"nodeType":"367","messageId":"368","endLine":11,"endColumn":33},{"ruleId":"365","severity":1,"message":"382","line":11,"column":41,"nodeType":"367","messageId":"368","endLine":11,"endColumn":48},{"ruleId":"365","severity":1,"message":"464","line":23,"column":10,"nodeType":"367","messageId":"368","endLine":23,"endColumn":14},{"ruleId":"365","severity":1,"message":"465","line":23,"column":89,"nodeType":"367","messageId":"368","endLine":23,"endColumn":101},{"ruleId":"365","severity":1,"message":"466","line":23,"column":103,"nodeType":"367","messageId":"368","endLine":23,"endColumn":112},{"ruleId":"365","severity":1,"message":"467","line":28,"column":46,"nodeType":"367","messageId":"368","endLine":28,"endColumn":55},{"ruleId":"365","severity":1,"message":"369","line":8,"column":44,"nodeType":"367","messageId":"368","endLine":8,"endColumn":53},{"ruleId":"365","severity":1,"message":"420","line":11,"column":10,"nodeType":"367","messageId":"368","endLine":11,"endColumn":19},{"ruleId":"365","severity":1,"message":"421","line":11,"column":21,"nodeType":"367","messageId":"368","endLine":11,"endColumn":30},{"ruleId":"365","severity":1,"message":"422","line":11,"column":32,"nodeType":"367","messageId":"368","endLine":11,"endColumn":42},{"ruleId":"365","severity":1,"message":"424","line":11,"column":54,"nodeType":"367","messageId":"368","endLine":11,"endColumn":60},{"ruleId":"365","severity":1,"message":"468","line":16,"column":2,"nodeType":"367","messageId":"368","endLine":16,"endColumn":11},{"ruleId":"365","severity":1,"message":"469","line":17,"column":2,"nodeType":"367","messageId":"368","endLine":17,"endColumn":16},{"ruleId":"365","severity":1,"message":"470","line":18,"column":2,"nodeType":"367","messageId":"368","endLine":18,"endColumn":13},{"ruleId":"365","severity":1,"message":"471","line":19,"column":2,"nodeType":"367","messageId":"368","endLine":19,"endColumn":13},{"ruleId":"365","severity":1,"message":"380","line":20,"column":2,"nodeType":"367","messageId":"368","endLine":20,"endColumn":8},{"ruleId":"365","severity":1,"message":"425","line":30,"column":17,"nodeType":"367","messageId":"368","endLine":30,"endColumn":22},{"ruleId":"365","severity":1,"message":"472","line":33,"column":7,"nodeType":"367","messageId":"368","endLine":33,"endColumn":19},{"ruleId":"365","severity":1,"message":"473","line":36,"column":23,"nodeType":"367","messageId":"368","endLine":36,"endColumn":37},{"ruleId":"365","severity":1,"message":"474","line":48,"column":9,"nodeType":"367","messageId":"368","endLine":48,"endColumn":16},{"ruleId":"392","severity":1,"message":"475","line":122,"column":59,"nodeType":"394","endLine":122,"endColumn":91,"suggestions":"476"},{"ruleId":"365","severity":1,"message":"407","line":8,"column":27,"nodeType":"367","messageId":"368","endLine":8,"endColumn":33},{"ruleId":"365","severity":1,"message":"477","line":8,"column":55,"nodeType":"367","messageId":"368","endLine":8,"endColumn":64},{"ruleId":"365","severity":1,"message":"420","line":11,"column":10,"nodeType":"367","messageId":"368","endLine":11,"endColumn":19},{"ruleId":"365","severity":1,"message":"421","line":11,"column":21,"nodeType":"367","messageId":"368","endLine":11,"endColumn":30},{"ruleId":"365","severity":1,"message":"422","line":11,"column":32,"nodeType":"367","messageId":"368","endLine":11,"endColumn":42},{"ruleId":"365","severity":1,"message":"423","line":11,"column":44,"nodeType":"367","messageId":"368","endLine":11,"endColumn":52},{"ruleId":"365","severity":1,"message":"424","line":11,"column":54,"nodeType":"367","messageId":"368","endLine":11,"endColumn":60},{"ruleId":"365","severity":1,"message":"379","line":13,"column":10,"nodeType":"367","messageId":"368","endLine":13,"endColumn":25},{"ruleId":"365","severity":1,"message":"381","line":13,"column":49,"nodeType":"367","messageId":"368","endLine":13,"endColumn":53},{"ruleId":"365","severity":1,"message":"382","line":13,"column":55,"nodeType":"367","messageId":"368","endLine":13,"endColumn":62},{"ruleId":"365","severity":1,"message":"383","line":13,"column":64,"nodeType":"367","messageId":"368","endLine":13,"endColumn":72},{"ruleId":"365","severity":1,"message":"426","line":18,"column":10,"nodeType":"367","messageId":"368","endLine":18,"endColumn":15},{"ruleId":"365","severity":1,"message":"478","line":23,"column":10,"nodeType":"367","messageId":"368","endLine":23,"endColumn":22},{"ruleId":"365","severity":1,"message":"390","line":23,"column":35,"nodeType":"367","messageId":"368","endLine":23,"endColumn":48},{"ruleId":"365","severity":1,"message":"479","line":29,"column":9,"nodeType":"367","messageId":"368","endLine":29,"endColumn":17},{"ruleId":"365","severity":1,"message":"480","line":29,"column":19,"nodeType":"367","messageId":"368","endLine":29,"endColumn":30},{"ruleId":"365","severity":1,"message":"474","line":30,"column":9,"nodeType":"367","messageId":"368","endLine":30,"endColumn":16},{"ruleId":"392","severity":1,"message":"481","line":59,"column":6,"nodeType":"394","endLine":59,"endColumn":8,"suggestions":"482"},{"ruleId":"392","severity":1,"message":"475","line":66,"column":49,"nodeType":"394","endLine":66,"endColumn":68,"suggestions":"483"},{"ruleId":"361","replacedBy":"484"},{"ruleId":"363","replacedBy":"485"},{"ruleId":"365","severity":1,"message":"407","line":8,"column":27,"nodeType":"367","messageId":"368","endLine":8,"endColumn":33},{"ruleId":"365","severity":1,"message":"366","line":8,"column":35,"nodeType":"367","messageId":"368","endLine":8,"endColumn":42},{"ruleId":"365","severity":1,"message":"369","line":8,"column":44,"nodeType":"367","messageId":"368","endLine":8,"endColumn":53},{"ruleId":"365","severity":1,"message":"477","line":8,"column":55,"nodeType":"367","messageId":"368","endLine":8,"endColumn":64},{"ruleId":"365","severity":1,"message":"420","line":11,"column":10,"nodeType":"367","messageId":"368","endLine":11,"endColumn":19},{"ruleId":"365","severity":1,"message":"421","line":11,"column":21,"nodeType":"367","messageId":"368","endLine":11,"endColumn":30},{"ruleId":"365","severity":1,"message":"422","line":11,"column":32,"nodeType":"367","messageId":"368","endLine":11,"endColumn":42},{"ruleId":"365","severity":1,"message":"423","line":11,"column":44,"nodeType":"367","messageId":"368","endLine":11,"endColumn":52},{"ruleId":"365","severity":1,"message":"424","line":11,"column":54,"nodeType":"367","messageId":"368","endLine":11,"endColumn":60},{"ruleId":"365","severity":1,"message":"379","line":14,"column":2,"nodeType":"367","messageId":"368","endLine":14,"endColumn":17},{"ruleId":"365","severity":1,"message":"486","line":18,"column":2,"nodeType":"367","messageId":"368","endLine":18,"endColumn":8},{"ruleId":"365","severity":1,"message":"381","line":21,"column":2,"nodeType":"367","messageId":"368","endLine":21,"endColumn":6},{"ruleId":"365","severity":1,"message":"383","line":29,"column":2,"nodeType":"367","messageId":"368","endLine":29,"endColumn":10},{"ruleId":"365","severity":1,"message":"487","line":30,"column":2,"nodeType":"367","messageId":"368","endLine":30,"endColumn":6},{"ruleId":"365","severity":1,"message":"488","line":50,"column":35,"nodeType":"367","messageId":"368","endLine":50,"endColumn":46},{"ruleId":"365","severity":1,"message":"489","line":52,"column":46,"nodeType":"367","messageId":"368","endLine":52,"endColumn":52},{"ruleId":"365","severity":1,"message":"477","line":8,"column":55,"nodeType":"367","messageId":"368","endLine":8,"endColumn":64},{"ruleId":"365","severity":1,"message":"420","line":11,"column":10,"nodeType":"367","messageId":"368","endLine":11,"endColumn":19},{"ruleId":"365","severity":1,"message":"421","line":11,"column":21,"nodeType":"367","messageId":"368","endLine":11,"endColumn":30},{"ruleId":"365","severity":1,"message":"422","line":11,"column":32,"nodeType":"367","messageId":"368","endLine":11,"endColumn":42},{"ruleId":"365","severity":1,"message":"423","line":11,"column":44,"nodeType":"367","messageId":"368","endLine":11,"endColumn":52},{"ruleId":"365","severity":1,"message":"424","line":11,"column":54,"nodeType":"367","messageId":"368","endLine":11,"endColumn":60},{"ruleId":"365","severity":1,"message":"381","line":25,"column":2,"nodeType":"367","messageId":"368","endLine":25,"endColumn":6},{"ruleId":"365","severity":1,"message":"383","line":27,"column":2,"nodeType":"367","messageId":"368","endLine":27,"endColumn":10},{"ruleId":"365","severity":1,"message":"490","line":30,"column":8,"nodeType":"367","messageId":"368","endLine":30,"endColumn":20},{"ruleId":"365","severity":1,"message":"491","line":31,"column":8,"nodeType":"367","messageId":"368","endLine":31,"endColumn":16},{"ruleId":"365","severity":1,"message":"426","line":37,"column":10,"nodeType":"367","messageId":"368","endLine":37,"endColumn":15},{"ruleId":"365","severity":1,"message":"440","line":45,"column":3,"nodeType":"367","messageId":"368","endLine":45,"endColumn":18},{"ruleId":"365","severity":1,"message":"478","line":46,"column":3,"nodeType":"367","messageId":"368","endLine":46,"endColumn":15},{"ruleId":"365","severity":1,"message":"390","line":49,"column":3,"nodeType":"367","messageId":"368","endLine":49,"endColumn":16},{"ruleId":"365","severity":1,"message":"465","line":50,"column":3,"nodeType":"367","messageId":"368","endLine":50,"endColumn":15},{"ruleId":"365","severity":1,"message":"391","line":52,"column":3,"nodeType":"367","messageId":"368","endLine":52,"endColumn":18},{"ruleId":"365","severity":1,"message":"474","line":60,"column":9,"nodeType":"367","messageId":"368","endLine":60,"endColumn":16},{"ruleId":"365","severity":1,"message":"492","line":60,"column":18,"nodeType":"367","messageId":"368","endLine":60,"endColumn":25},{"ruleId":"365","severity":1,"message":"493","line":144,"column":8,"nodeType":"367","messageId":"368","endLine":144,"endColumn":21},{"ruleId":"392","severity":1,"message":"481","line":149,"column":3,"nodeType":"394","endLine":149,"endColumn":5,"suggestions":"494"},{"ruleId":"365","severity":1,"message":"495","line":154,"column":8,"nodeType":"367","messageId":"368","endLine":154,"endColumn":16},{"ruleId":"392","severity":1,"message":"475","line":154,"column":49,"nodeType":"394","endLine":154,"endColumn":68,"suggestions":"496"},{"ruleId":"497","severity":1,"message":"498","line":57,"column":2,"nodeType":"499","messageId":"500","endLine":57,"endColumn":14},{"ruleId":"501","severity":1,"message":"502","line":97,"column":15,"nodeType":"503","messageId":"411","endLine":97,"endColumn":17},{"ruleId":"365","severity":1,"message":"477","line":8,"column":55,"nodeType":"367","messageId":"368","endLine":8,"endColumn":64},{"ruleId":"365","severity":1,"message":"420","line":11,"column":10,"nodeType":"367","messageId":"368","endLine":11,"endColumn":19},{"ruleId":"365","severity":1,"message":"421","line":11,"column":21,"nodeType":"367","messageId":"368","endLine":11,"endColumn":30},{"ruleId":"365","severity":1,"message":"422","line":11,"column":32,"nodeType":"367","messageId":"368","endLine":11,"endColumn":42},{"ruleId":"365","severity":1,"message":"423","line":11,"column":44,"nodeType":"367","messageId":"368","endLine":11,"endColumn":52},{"ruleId":"365","severity":1,"message":"424","line":11,"column":54,"nodeType":"367","messageId":"368","endLine":11,"endColumn":60},{"ruleId":"365","severity":1,"message":"379","line":13,"column":10,"nodeType":"367","messageId":"368","endLine":13,"endColumn":25},{"ruleId":"365","severity":1,"message":"504","line":13,"column":53,"nodeType":"367","messageId":"368","endLine":13,"endColumn":64},{"ruleId":"365","severity":1,"message":"381","line":13,"column":66,"nodeType":"367","messageId":"368","endLine":13,"endColumn":70},{"ruleId":"365","severity":1,"message":"382","line":13,"column":72,"nodeType":"367","messageId":"368","endLine":13,"endColumn":79},{"ruleId":"365","severity":1,"message":"383","line":13,"column":81,"nodeType":"367","messageId":"368","endLine":13,"endColumn":89},{"ruleId":"365","severity":1,"message":"505","line":16,"column":8,"nodeType":"367","messageId":"368","endLine":16,"endColumn":18},{"ruleId":"365","severity":1,"message":"506","line":17,"column":8,"nodeType":"367","messageId":"368","endLine":17,"endColumn":18},{"ruleId":"365","severity":1,"message":"426","line":20,"column":10,"nodeType":"367","messageId":"368","endLine":20,"endColumn":15},{"ruleId":"365","severity":1,"message":"507","line":23,"column":46,"nodeType":"367","messageId":"368","endLine":23,"endColumn":55},{"ruleId":"365","severity":1,"message":"478","line":29,"column":3,"nodeType":"367","messageId":"368","endLine":29,"endColumn":15},{"ruleId":"365","severity":1,"message":"390","line":33,"column":3,"nodeType":"367","messageId":"368","endLine":33,"endColumn":16},{"ruleId":"365","severity":1,"message":"389","line":36,"column":3,"nodeType":"367","messageId":"368","endLine":36,"endColumn":18},{"ruleId":"365","severity":1,"message":"508","line":39,"column":3,"nodeType":"367","messageId":"368","endLine":39,"endColumn":15},{"ruleId":"365","severity":1,"message":"474","line":50,"column":9,"nodeType":"367","messageId":"368","endLine":50,"endColumn":16},{"ruleId":"392","severity":1,"message":"509","line":55,"column":82,"nodeType":"394","endLine":55,"endColumn":99,"suggestions":"510"},{"ruleId":"365","severity":1,"message":"511","line":57,"column":8,"nodeType":"367","messageId":"368","endLine":57,"endColumn":16},{"ruleId":"444","severity":1,"message":"445","line":86,"column":28,"nodeType":"446","messageId":"447","endLine":86,"endColumn":30},{"ruleId":"365","severity":1,"message":"512","line":128,"column":8,"nodeType":"367","messageId":"368","endLine":128,"endColumn":25},{"ruleId":"513","severity":1,"message":"514","line":220,"column":15,"nodeType":"367","messageId":"515","endLine":220,"endColumn":22},{"ruleId":"365","severity":1,"message":"516","line":247,"column":13,"nodeType":"367","messageId":"368","endLine":247,"endColumn":21},{"ruleId":"365","severity":1,"message":"517","line":319,"column":8,"nodeType":"367","messageId":"368","endLine":319,"endColumn":17},{"ruleId":"392","severity":1,"message":"481","line":387,"column":3,"nodeType":"394","endLine":387,"endColumn":5,"suggestions":"518"},{"ruleId":"392","severity":1,"message":"519","line":390,"column":44,"nodeType":"394","endLine":393,"endColumn":3,"suggestions":"520"},{"ruleId":"392","severity":1,"message":"454","line":391,"column":3,"nodeType":"455","endLine":391,"endColumn":38},{"ruleId":"392","severity":1,"message":"454","line":392,"column":3,"nodeType":"455","endLine":392,"endColumn":35},{"ruleId":"392","severity":1,"message":"521","line":409,"column":5,"nodeType":"394","endLine":409,"endColumn":7,"suggestions":"522"},{"ruleId":"392","severity":1,"message":"523","line":411,"column":47,"nodeType":"394","endLine":411,"endColumn":83,"suggestions":"524"},{"ruleId":"392","severity":1,"message":"525","line":413,"column":26,"nodeType":"394","endLine":413,"endColumn":38,"suggestions":"526"},{"ruleId":"365","severity":1,"message":"527","line":417,"column":8,"nodeType":"367","messageId":"368","endLine":417,"endColumn":22},{"ruleId":"365","severity":1,"message":"477","line":8,"column":55,"nodeType":"367","messageId":"368","endLine":8,"endColumn":64},{"ruleId":"365","severity":1,"message":"420","line":11,"column":10,"nodeType":"367","messageId":"368","endLine":11,"endColumn":19},{"ruleId":"365","severity":1,"message":"421","line":11,"column":21,"nodeType":"367","messageId":"368","endLine":11,"endColumn":30},{"ruleId":"365","severity":1,"message":"422","line":11,"column":32,"nodeType":"367","messageId":"368","endLine":11,"endColumn":42},{"ruleId":"365","severity":1,"message":"424","line":11,"column":54,"nodeType":"367","messageId":"368","endLine":11,"endColumn":60},{"ruleId":"365","severity":1,"message":"528","line":21,"column":2,"nodeType":"367","messageId":"368","endLine":21,"endColumn":6},{"ruleId":"365","severity":1,"message":"529","line":22,"column":2,"nodeType":"367","messageId":"368","endLine":22,"endColumn":5},{"ruleId":"365","severity":1,"message":"530","line":26,"column":8,"nodeType":"367","messageId":"368","endLine":26,"endColumn":18},{"ruleId":"365","severity":1,"message":"531","line":27,"column":8,"nodeType":"367","messageId":"368","endLine":27,"endColumn":13},{"ruleId":"365","severity":1,"message":"426","line":30,"column":10,"nodeType":"367","messageId":"368","endLine":30,"endColumn":15},{"ruleId":"365","severity":1,"message":"532","line":30,"column":30,"nodeType":"367","messageId":"368","endLine":30,"endColumn":43},{"ruleId":"365","severity":1,"message":"472","line":32,"column":7,"nodeType":"367","messageId":"368","endLine":32,"endColumn":19},{"ruleId":"365","severity":1,"message":"533","line":51,"column":9,"nodeType":"367","messageId":"368","endLine":51,"endColumn":16},{"ruleId":"392","severity":1,"message":"534","line":55,"column":55,"nodeType":"394","endLine":55,"endColumn":57,"suggestions":"535"},{"ruleId":"365","severity":1,"message":"536","line":108,"column":8,"nodeType":"367","messageId":"368","endLine":108,"endColumn":17},{"ruleId":"365","severity":1,"message":"366","line":8,"column":35,"nodeType":"367","messageId":"368","endLine":8,"endColumn":42},{"ruleId":"365","severity":1,"message":"477","line":8,"column":55,"nodeType":"367","messageId":"368","endLine":8,"endColumn":64},{"ruleId":"365","severity":1,"message":"420","line":11,"column":10,"nodeType":"367","messageId":"368","endLine":11,"endColumn":19},{"ruleId":"365","severity":1,"message":"421","line":11,"column":21,"nodeType":"367","messageId":"368","endLine":11,"endColumn":30},{"ruleId":"365","severity":1,"message":"422","line":11,"column":32,"nodeType":"367","messageId":"368","endLine":11,"endColumn":42},{"ruleId":"365","severity":1,"message":"423","line":11,"column":44,"nodeType":"367","messageId":"368","endLine":11,"endColumn":52},{"ruleId":"365","severity":1,"message":"424","line":11,"column":54,"nodeType":"367","messageId":"368","endLine":11,"endColumn":60},{"ruleId":"365","severity":1,"message":"382","line":15,"column":2,"nodeType":"367","messageId":"368","endLine":15,"endColumn":9},{"ruleId":"365","severity":1,"message":"468","line":17,"column":2,"nodeType":"367","messageId":"368","endLine":17,"endColumn":11},{"ruleId":"365","severity":1,"message":"469","line":18,"column":2,"nodeType":"367","messageId":"368","endLine":18,"endColumn":16},{"ruleId":"365","severity":1,"message":"470","line":19,"column":2,"nodeType":"367","messageId":"368","endLine":19,"endColumn":13},{"ruleId":"365","severity":1,"message":"471","line":20,"column":2,"nodeType":"367","messageId":"368","endLine":20,"endColumn":13},{"ruleId":"365","severity":1,"message":"529","line":23,"column":2,"nodeType":"367","messageId":"368","endLine":23,"endColumn":5},{"ruleId":"365","severity":1,"message":"487","line":24,"column":2,"nodeType":"367","messageId":"368","endLine":24,"endColumn":6},{"ruleId":"365","severity":1,"message":"537","line":25,"column":2,"nodeType":"367","messageId":"368","endLine":25,"endColumn":6},{"ruleId":"365","severity":1,"message":"538","line":30,"column":8,"nodeType":"367","messageId":"368","endLine":30,"endColumn":16},{"ruleId":"365","severity":1,"message":"530","line":31,"column":8,"nodeType":"367","messageId":"368","endLine":31,"endColumn":18},{"ruleId":"365","severity":1,"message":"539","line":34,"column":8,"nodeType":"367","messageId":"368","endLine":34,"endColumn":13},{"ruleId":"365","severity":1,"message":"426","line":40,"column":10,"nodeType":"367","messageId":"368","endLine":40,"endColumn":15},{"ruleId":"365","severity":1,"message":"540","line":40,"column":24,"nodeType":"367","messageId":"368","endLine":40,"endColumn":28},{"ruleId":"365","severity":1,"message":"532","line":40,"column":30,"nodeType":"367","messageId":"368","endLine":40,"endColumn":43},{"ruleId":"365","severity":1,"message":"541","line":49,"column":3,"nodeType":"367","messageId":"368","endLine":49,"endColumn":12},{"ruleId":"365","severity":1,"message":"542","line":50,"column":3,"nodeType":"367","messageId":"368","endLine":50,"endColumn":7},{"ruleId":"365","severity":1,"message":"543","line":53,"column":3,"nodeType":"367","messageId":"368","endLine":53,"endColumn":8},{"ruleId":"365","severity":1,"message":"544","line":56,"column":3,"nodeType":"367","messageId":"368","endLine":56,"endColumn":18},{"ruleId":"365","severity":1,"message":"474","line":64,"column":9,"nodeType":"367","messageId":"368","endLine":64,"endColumn":16},{"ruleId":"365","severity":1,"message":"545","line":68,"column":9,"nodeType":"367","messageId":"368","endLine":68,"endColumn":23},{"ruleId":"392","severity":1,"message":"534","line":76,"column":51,"nodeType":"394","endLine":76,"endColumn":53,"suggestions":"546"},{"ruleId":"365","severity":1,"message":"547","line":81,"column":8,"nodeType":"367","messageId":"368","endLine":81,"endColumn":23},{"ruleId":"392","severity":1,"message":"460","line":242,"column":27,"nodeType":"394","endLine":242,"endColumn":48,"suggestions":"548"},{"ruleId":"392","severity":1,"message":"549","line":264,"column":5,"nodeType":"394","endLine":264,"endColumn":24,"suggestions":"550"},"no-native-reassign",["551"],"no-negated-in-lhs",["552"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'ClickAwayListener' is defined but never used.","'Typography' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'showMenu' is assigned a value but never used.","'setShowMenu' is assigned a value but never used.","'fold' is assigned a value but never used.","'handleClickAway' is assigned a value but never used.","'handleClickLogo' is assigned a value but never used.","'SwipeableDrawer' is defined but never used.","'Button' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'ArrowRightIcon' is defined but never used.","'ArrowDropDownIcon' is defined but never used.","'initNavTree' is defined but never used.","'layoutStateHash' is assigned a value but never used.","'foldStateHash' is assigned a value but never used.","'editorStateHash' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchStateFromCookies' and 'saveStateToCookies'. Either include them or remove the dependency array.","ArrayExpression",["553"],"React Hook useEffect has a missing dependency: 'saveStateToCookies'. Either include it or remove the dependency array.",["554"],"React Hook useEffect has missing dependencies: 'layoutState' and 'setFoldState'. Either include them or remove the dependency array.",["555"],"React Hook useMemo has an unnecessary dependency: 'curHash'. Either exclude it or remove the dependency array.",["556"],"React Hook useMemo has a missing dependency: 'windowHeight'. Either include it or remove the dependency array.",["557"],"React Hook useMemo has missing dependencies: 'foldOverrideCallback', 'layoutState.curFold', and 'userState.showEditor'. Either include them or remove the dependency array.",["558"],"'useState' is defined but never used.","'useRef' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["551"],["552"],"'SchoolIcon' is defined but never used.","'ClassIcon' is defined but never used.","'DashboardIcon' is defined but never used.","'GroupAddIcon' is defined but never used.","'FrogBase' is defined but never used.","'useLoader' is defined but never used.","'useUpdate' is defined but never used.","'useSpring' is defined but never used.","'useSprings' is defined but never used.","'animated' is defined but never used.","'config' is defined but never used.","'Pages' is defined but never used.","'Folds' is defined but never used.","'paperSize' is assigned a value but never used.","'newOverlayPos' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-dupe-keys","Duplicate key 'width'.","ObjectExpression","'Canvas' is defined but never used.","'extend' is defined but never used.","'position' is assigned a value but never used.","'scale' is assigned a value but never used.","'foldLastUpdated' is assigned a value but never used.","'instructions' is assigned a value but never used.","'setInstructions' is assigned a value but never used.","'rotation' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'isSameLine' is assigned a value but never used.","'normLine' is assigned a value but never used.","'printVect' is assigned a value but never used.","'updateScreenPosition' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'foldState.usingDefaults'. Either include it or remove the dependency array.",["559"],"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","React Hook useEffect has missing dependencies: 'foldState.active', 'foldState.maxSteps', 'performCommands', 'performReverseCommands', 'prevStep', and 'stepArray'. Either include them or remove the dependency array.",["560"],"React Hook useEffect has missing dependencies: 'initFold' and 'setFoldObj'. Either include them or remove the dependency array.",["561"],"React Hook useEffect has a missing dependency: 'setFoldState'. Either include it or remove the dependency array.",["562"],"React Hook useEffect has missing dependencies: 'camera', 'classes.vertLabel', 'ctrlOverlay', and 'getXYForPos'. Either include them or remove the dependency array.",["563"],"'page' is assigned a value but never used.","'setFoldState' is assigned a value but never used.","'userState' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'CardMedia' is defined but never used.","'CardActionArea' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'AnimatedCard' is assigned a value but never used.","'setLayoutState' is assigned a value but never used.","'curHash' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'window.innerWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.innerWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["564"],"'createRef' is defined but never used.","'windowHeight' is assigned a value but never used.","'cardRefs' is assigned a value but never used.","'setCardRefs' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'classes.fold_controls_button' and 'classes.fold_controls_button_label'. Either include them or remove the dependency array.",["565"],["566"],["551"],["552"],"'Select' is defined but never used.","'Card' is defined but never used.","'layoutState' is assigned a value but never used.","'logout' is assigned a value but never used.","'SkipPrevious' is defined but never used.","'SkipNext' is defined but never used.","'setHash' is assigned a value but never used.","'buttonClasses' is assigned a value but never used.",["567"],"'ctrlLeft' is assigned a value but never used.",["568"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'ButtonGroup' is defined but never used.","'ExpandMore' is defined but never used.","'ExpandLess' is defined but never used.","'printPath' is defined but never used.","'setUserState' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'initFold'. Either include it or remove the dependency array.",["569"],"'trackTop' is assigned a value but never used.","'handleExpandClick' is assigned a value but never used.","no-use-before-define","'stepIdx' was used before it was defined.","usedBeforeDefined","'children' is assigned a value but never used.","'jumpToEnd' is assigned a value but never used.",["570"],"React Hook useMemo has missing dependencies: 'foldState.usingDefaults' and 'initFold'. Either include them or remove the dependency array.",["571"],"React Hook useEffect has a missing dependency: 'looperWorkerId'. Either include it or remove the dependency array.",["572"],"React Hook useEffect has missing dependencies: 'maxLevel' and 'refreshRenderRows'. Either include them or remove the dependency array.",["573"],"React Hook useEffect has missing dependencies: 'changeStep', 'foldState.repeatRange', 'foldState.repeatRoot', 'foldState.stepIdx', and 'looperDirection'. Either include them or remove the dependency array.",["574"],"'ctrlCardLeftPx' is assigned a value but never used.","'Grid' is defined but never used.","'Fab' is defined but never used.","'FilterList' is defined but never used.","'Clear' is defined but never used.","'TagCategories' is defined but never used.","'posHash' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'cardKey'. Either include it or remove the dependency array.",["575"],"'imagePath' is assigned a value but never used.","'Chip' is defined but never used.","'MuiAlert' is defined but never used.","'Pause' is defined but never used.","'Tags' is defined but never used.","'foldEntry' is assigned a value but never used.","'name' is assigned a value but never used.","'index' is assigned a value but never used.","'handleCardClick' is assigned a value but never used.","'hasInitialized' is assigned a value but never used.",["576"],"'handleFoldClick' is assigned a value but never used.",["577"],"React Hook useEffect has missing dependencies: 'closeSnackbar', 'foldState.maxSteps', 'isPlaying', and 'toggleTimer'. Either include them or remove the dependency array.",["578"],"no-global-assign","no-unsafe-negation",{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"603","fix":"604"},{"desc":"585","fix":"605"},{"desc":"603","fix":"606"},{"desc":"585","fix":"607"},{"desc":"608","fix":"609"},{"desc":"603","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"desc":"619","fix":"620"},{"desc":"619","fix":"621"},{"desc":"622","fix":"623"},{"desc":"624","fix":"625"},"Update the dependencies array to be: [fetchStateFromCookies, saveStateToCookies]",{"range":"626","text":"627"},"Update the dependencies array to be: [layoutState.hash, foldState.hash, editorState.hash, saveStateToCookies]",{"range":"628","text":"629"},"Update the dependencies array to be: [layoutState, layoutState.curFold, setFoldState]",{"range":"630","text":"631"},"Update the dependencies array to be: []",{"range":"632","text":"633"},"Update the dependencies array to be: [layoutState.page, windowHeight]",{"range":"634","text":"635"},"Update the dependencies array to be: [foldOverrideCallback, layoutState.curFold, layoutState.page, userState.showEditor, windowHeight]",{"range":"636","text":"637"},"Update the dependencies array to be: [foldState.usingDefaults]",{"range":"638","text":"639"},"Update the dependencies array to be: [foldState.active, foldState.maxSteps, foldState.stepIdx, performCommands, performReverseCommands, prevStep, stepArray]",{"range":"640","text":"641"},"Update the dependencies array to be: [foldKey, initFold, setFoldObj]",{"range":"642","text":"643"},"Update the dependencies array to be: [foldKey, setFoldState, stepArray.length]",{"range":"644","text":"645"},"Update the dependencies array to be: [camera, classes.vertLabel, ctrlOverlay, editorState.showLabels, getXYForPos]",{"range":"646","text":"647"},"Update the dependencies array to be: [activeIndex]",{"range":"648","text":"649"},"Update the dependencies array to be: [classes.fold_controls_button, classes.fold_controls_button_label]",{"range":"650","text":"651"},{"range":"652","text":"633"},{"range":"653","text":"651"},{"range":"654","text":"633"},"Update the dependencies array to be: [initFold]",{"range":"655","text":"656"},{"range":"657","text":"651"},"Update the dependencies array to be: [foldState.usingDefaults, initFold]",{"range":"658","text":"659"},"Update the dependencies array to be: [looperWorkerId]",{"range":"660","text":"661"},"Update the dependencies array to be: [foldLastUpdated, foldState.stepIdx, maxLevel, refreshRenderRows]",{"range":"662","text":"663"},"Update the dependencies array to be: [changeStep, foldState.repeatRange, foldState.repeatRoot, foldState.stepIdx, looperDirection, looperHash]",{"range":"664","text":"665"},"Update the dependencies array to be: [cardKey]",{"range":"666","text":"667"},{"range":"668","text":"667"},"Update the dependencies array to be: [layoutState.curFold, setFoldState]",{"range":"669","text":"670"},"Update the dependencies array to be: [closeSnackbar, foldState.maxSteps, foldState.stepIdx, isPlaying, toggleTimer]",{"range":"671","text":"672"},[4456,4458],"[fetchStateFromCookies, saveStateToCookies]",[4509,4561],"[layoutState.hash, foldState.hash, editorState.hash, saveStateToCookies]",[4647,4668],"[layoutState, layoutState.curFold, setFoldState]",[4870,4879],"[]",[4917,4935],"[layoutState.page, windowHeight]",[4982,5014],"[foldOverrideCallback, layoutState.curFold, layoutState.page, userState.showEditor, windowHeight]",[30212,30306],"[foldState.usingDefaults]",[30342,30361],"[foldState.active, foldState.maxSteps, foldState.stepIdx, performCommands, performReverseCommands, prevStep, stepArray]",[30390,30399],"[foldKey, initFold, setFoldObj]",[30440,30467],"[foldKey, setFoldState, stepArray.length]",[30495,30519],"[camera, classes.vertLabel, ctrlOverlay, editorState.showLabels, getXYForPos]",[3291,3323],"[activeIndex]",[1652,1654],"[classes.fold_controls_button, classes.fold_controls_button_label]",[1828,1847],[3717,3719],[3814,3833],[1800,1817],"[initFold]",[11662,11664],[11713,11791],"[foldState.usingDefaults, initFold]",[12143,12145],"[looperWorkerId]",[12195,12231],"[foldLastUpdated, foldState.stepIdx, maxLevel, refreshRenderRows]",[12260,12272],"[changeStep, foldState.repeatRange, foldState.repeatRoot, foldState.stepIdx, looperDirection, looperHash]",[1662,1664],"[cardKey]",[2144,2146],[5934,5955],"[layoutState.curFold, setFoldState]",[6585,6604],"[closeSnackbar, foldState.maxSteps, foldState.stepIdx, isPlaying, toggleTimer]"]
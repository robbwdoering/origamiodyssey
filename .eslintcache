[{"/home/bbor/dev/origamiodyssey/src/index.js":"1","/home/bbor/dev/origamiodyssey/src/layout/Header.js":"2","/home/bbor/dev/origamiodyssey/src/layout/Body.js":"3","/home/bbor/dev/origamiodyssey/src/layout/Footer.js":"4","/home/bbor/dev/origamiodyssey/src/layout/pages/Splash.js":"5","/home/bbor/dev/origamiodyssey/src/layout/pages/Lesson.js":"6","/home/bbor/dev/origamiodyssey/src/infra/constants.js":"7","/home/bbor/dev/origamiodyssey/src/anim/Scene.js":"8","/home/bbor/dev/origamiodyssey/src/infra/appReducer.js":"9","/home/bbor/dev/origamiodyssey/src/style/theme.js":"10","/home/bbor/dev/origamiodyssey/src/anim/Paper.js":"11","/home/bbor/dev/origamiodyssey/src/infra/actions.js":"12","/home/bbor/dev/origamiodyssey/src/layout/NavDrawer.js":"13","/home/bbor/dev/origamiodyssey/src/layout/pages/ModelSelect.js":"14","/home/bbor/dev/origamiodyssey/src/layout/pages/FoldControls.js":"15","/home/bbor/dev/origamiodyssey/src/layout/pages/User.js":"16","/home/bbor/dev/origamiodyssey/src/static/lettering.js":"17","/home/bbor/dev/origamiodyssey/src/layout/pages/FoldEditorCards.js":"18","/home/bbor/dev/origamiodyssey/src/infra/utils.js":"19","/home/bbor/dev/origamiodyssey/src/layout/pages/InstructionalHierarchy.js":"20"},{"size":2295,"mtime":1619380718747,"results":"21","hashOfConfig":"22"},{"size":2551,"mtime":1619341407087,"results":"23","hashOfConfig":"22"},{"size":6014,"mtime":1619392609919,"results":"24","hashOfConfig":"22"},{"size":442,"mtime":1616978827522,"results":"25","hashOfConfig":"22"},{"size":0,"mtime":1616978827522,"results":"26","hashOfConfig":"22"},{"size":131,"mtime":1613020940457,"results":"27","hashOfConfig":"22"},{"size":7166,"mtime":1619389205369,"results":"28","hashOfConfig":"22"},{"size":3770,"mtime":1619342856485,"results":"29","hashOfConfig":"22"},{"size":1449,"mtime":1619378467145,"results":"30","hashOfConfig":"22"},{"size":6411,"mtime":1619394936568,"results":"31","hashOfConfig":"22"},{"size":31664,"mtime":1619368953680,"results":"32","hashOfConfig":"22"},{"size":648,"mtime":1619378421326,"results":"33","hashOfConfig":"22"},{"size":5667,"mtime":1619381326537,"results":"34","hashOfConfig":"22"},{"size":11285,"mtime":1619362193210,"results":"35","hashOfConfig":"22"},{"size":2814,"mtime":1616978827522,"results":"36","hashOfConfig":"22"},{"size":9139,"mtime":1619392552291,"results":"37","hashOfConfig":"22"},{"size":14422,"mtime":1616978827526,"results":"38","hashOfConfig":"22"},{"size":9512,"mtime":1619363000023,"results":"39","hashOfConfig":"22"},{"size":5367,"mtime":1619367866472,"results":"40","hashOfConfig":"22"},{"size":9666,"mtime":1619395560052,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"eii7vj",{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/bbor/dev/origamiodyssey/src/index.js",[],"/home/bbor/dev/origamiodyssey/src/layout/Header.js",["94","95","96","97","98","99","100","101"],"/**\n * FILENAME: Header.js\n *\n * DESCRIPTION: Renders the basic of the animation.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n\tAppBar,\n\tClickAwayListener,\n\tToolbar,\n\tIconButton,\n\tTypography,\n\tMenu,\n\tMenuItem,\n\tInputBase\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\n\n// import OriDomi from \"oridomi\";\nimport { setShowNavDrawer, setFoldState, setLayoutState } from './../infra/actions';\nimport useStyles from './../style/theme.js';\nimport Lettering from './../static/lettering.js';\n\nexport const Header = props => {\n\tconst { setShowNavDrawer, setFoldState, setLayoutState } = props;\n\n\tconst [showMenu, setShowMenu] = useState(false);\n\n\tconst styles = useStyles();\n\tconst fold = useRef(null);\n\n\tconst toggleMenu = e => {\n\t\tsetShowNavDrawer();\n\t};\n\n\tconst handleClickAway = e => {\n\t\tsetShowNavDrawer(false);\n\t};\n\n\tconst handleClickLogo = e => {\n\t\tsetFoldState(null);\n\t\tsetLayoutState(null);\n\t};\n\n\tconst handleSearchChange = event => {\n\t\tsetLayoutState({\n\t\t\tsearchStr: event.target.value || ''\n\t\t});\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<AppBar className={styles.appBarContainer}>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\tclassName=\"menu-button\"\n\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\taria-label=\"open drawer\"\n\t\t\t\t\t\tonClick={toggleMenu}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<div className={styles.appLettering} onClick={toggleMenu}>\n\t\t\t\t\t\t<Lettering />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={styles.searchContainer}>\n\t\t\t\t\t\t<div className={styles.searchIcon}>\n\t\t\t\t\t\t\t<SearchIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<InputBase\n\t\t\t\t\t\t\tplaceholder=\"Search Modelsâ€¦\"\n\t\t\t\t\t\t\tclasses={{ root: styles.inputRoot, input: styles.inputInput }}\n\t\t\t\t\t\t\tinputProps={{ 'aria-label': 'search' }}\n\t\t\t\t\t\t\tonChange={handleSearchChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t<Menu\n\t\t\t\televation={0}\n\t\t\t\tgetContentAnchorEl={null}\n\t\t\t\tanchorOrigin={{\n\t\t\t\t\tvertical: 'bottom',\n\t\t\t\t\thorizontal: 'center'\n\t\t\t\t}}\n\t\t\t\ttransformOrigin={{\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'center'\n\t\t\t\t}}\n\t\t\t\tanchorEl={showMenu}\n\t\t\t\topen={Boolean(showMenu)}\n\t\t\t\tkeepMounted\n\t\t\t\tonClose={toggleMenu}\n\t\t\t>\n\t\t\t\t<MenuItem> A Menu without options </MenuItem>\n\t\t\t\t<MenuItem> is no menu at all </MenuItem>\n\t\t\t</Menu>\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {};\n};\n\nexport default connect(mapStateToProps, { setShowNavDrawer, setFoldState, setLayoutState })(Header);\n",["102","103"],"/home/bbor/dev/origamiodyssey/src/layout/Body.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"/home/bbor/dev/origamiodyssey/src/layout/Footer.js",["122","123","124","125","126"],"/**\n * FILENAME: Scene.js \n *\n * DESCRIPTION: Renders the basic of the animation. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nexport const Footer = props => {\n\tconst { } = props;\n\n\treturn (\n\t\t<div className=\"footer\">\n\t\t</div>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {};\n};\n\nexport default connect(mapStateToProps, {})(Footer);\n","/home/bbor/dev/origamiodyssey/src/layout/pages/Splash.js",[],"/home/bbor/dev/origamiodyssey/src/layout/pages/Lesson.js",[],["127","128"],"/home/bbor/dev/origamiodyssey/src/infra/constants.js",["129","130","131","132","133"],"/home/bbor/dev/origamiodyssey/src/anim/Scene.js",["134","135","136","137","138","139","140","141","142","143","144","145"],"/**\n * FILENAME: Scene.js \n *\n * DESCRIPTION: Renders the basic of the animation. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\n// Threejs - 3D Animation\nimport { Canvas, useFrame, useThree, useLoader, extend } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n// React Spring - animation\nimport { useUpdate, useSpring, useSprings, animated, config }  from 'react-spring';\n// import { a, useTransition, Transition } from '@react-spring/three';\n\nimport { Paper } from \"./Paper\";\nimport { Pages, Folds } from \"./../infra/constants\";\nimport { setLayoutState, setFoldState } from \"./../infra/actions\";\n\n// Extend will make OrbitControls available as a JSX element called orbitControls for us to use.\nextend({ OrbitControls });\n\nconst CameraControls = () => {\n\t// Get a reference to the Three.js Camera, and the canvas html element.\n\t// We need these to setup the OrbitControls class.\n\t// https://threejs.org/docs/#examples/en/controls/OrbitControls\n\tconst {\n\t\tcamera,\n\t\tgl: { domElement }\n\t} = useThree();\n\n\tconst controls = useRef();\n\n\tuseFrame(({ gl }) => {\n\t\tgl.setClearColor(0xf1f4f4, 1);\n\t\treturn controls.current.update();\n\t});\n\n\treturn (\n\t\t<orbitControls\n\t\t\tref={controls}\n\t\t\targs={[camera, domElement]}\n\t\t\tenableZoom={true}\n\t\t\tenableRotate={true}\n\t\t\tenableDolly={false}\n\t\t\tmouseButtons={{\n\t\t\t\tRIGHT: THREE.MOUSE.ROTATE,\n\t\t\t\tLEFT: THREE.MOUSE.ROTATE,\n\t\t\t\tMIDDLE: THREE.MOUSE.PAN,\n\t\t\t}}\n\t\t\t// maxAzimuthAngle={Math.PI / 4}\n\t\t\t// maxPolarAngle={Math.PI * 3 / 4}\n\t\t\t// minAzimuthAngle={-Math.PI / 4}\n\t\t\t// minPolarAngle={-Math.PI * 3 / 4}\n\t\t/>\n\t);\n};\n\n/**\n * Main component.\n */\nexport const Scene = props => {\n\tconst { initFold, foldLastUpdated, paperSize, layoutState, layoutStateHash, foldState, foldStateHash, setFoldState, editorState, editorStateHash } = props;\n\tconst [overlays, setOverlays] = useState({});\n\tconst [overlayPos, setOverlayPos] = useState({});\n\n\tconst ctrlOverlay = inArr => {\n\t\tconst newOverlays = Object.assign({}, overlays);\n\t\tconst newOverlayPos = Object.assign({}, overlayPos);\n\n\t\tinArr.forEach(({ show, name, component, pos }) => {\n\t\t\tif (show) {\n\t\t\t\tnewOverlays[name] = component;\n\n\t\t\t\tif (pos) {\n\t\t\t\t\toverlayPos[name] = pos;\n\t\t\t\t}\n\t\t\t} else if (!show && newOverlays[name]) {\n\t\t\t\tdelete newOverlays[name];\n\t\t\t\tdelete overlayPos[name];\n\t\t\t}\n\t\t})\n\n\t\tsetOverlays(newOverlays);\n\t\tsetOverlayPos(overlayPos)\n\t}\n\n\tconst style = layoutState.page === Pages.Fold ? undefined : { display: \"none\"};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Canvas camera={{fov: 100, position: [0, 1.8, 0]}} onCreated={state => state.gl.setClearColor(\"red\")} style={style}>\n\t\t\t\t<spotLight position={[5, 10, 0]} color='#f1f1ff' distance={100} penumbra={0.75} decay={2} />\n\t\t\t\t<CameraControls />\n\n\t\t\t\t<Paper\n\t\t\t\t\tposition={[0, 0, 0]}\n\t\t\t\t\tscale={10}\n\t\t\t\t\tinitFold={initFold}\n\t\t\t\t\tfoldLastUpdated={foldLastUpdated}\n\t\t\t\t\tfoldKey={layoutState.curFold}\n\t\t\t\t\tfoldState={foldState}\n\t\t\t\t\tfoldStateHash={foldStateHash}\n\t\t\t\t\teditorState={editorState}\n\t\t\t\t\teditorStateHash={editorStateHash}\n\t\t\t\t\tsetFoldState={setFoldState}\n\t\t\t\t\tinitStep={-1}\n\t\t\t\t\tctrlOverlay={ctrlOverlay}\n\t\t\t\t\toverlayPos={overlayPos}\n\t\t\t\t/>\n\t\t\t</Canvas>\n\t\t\t{Object.values(overlays)}\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState,\n\t\tlayoutStateHash: state.appReducer.layoutState.hash,\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash,\n\t\teditorState: state.appReducer.editorState,\n\t\teditorStateHash: state.appReducer.editorState.hash,\n\t};\n};\n\nexport default connect(mapStateToProps, { setLayoutState, setFoldState })(Scene);\n","/home/bbor/dev/origamiodyssey/src/infra/appReducer.js",["146"],"/**\n * FILENAME: appReducer.js\n *\n * DESCRIPTION: Handles state update for all layout actions.\n */\n\nimport { initAppReducerState, Actions } from './constants';\n\nconst finalInitState = JSON.parse(JSON.stringify(initAppReducerState));\n\nexport const appReducer = (state = finalInitState, action) => {\n\tlet newState = Object.assign({}, state);\n\n\tswitch (action.type) {\n\t\tcase Actions.SET_SHOW_NAV_DRAWER:\n\t\t\t// If passed a val set to that, otherwise toggle\n\t\t\tnewState.showNavDrawer = action.payload !== undefined ? action.payload : !newState.showNavDrawer;\n\t\t\tbreak;\n\t\tcase Actions.SET_LAYOUT_STATE:\n\t\t\tconsole.log('[SET_LAYOUT_STATE]', action.payload);\n\t\t\tObject.assign(newState.layoutState, action.payload || initAppReducerState.layoutState);\n\t\t\tnewState.layoutState.hash++;\n\t\t\tbreak;\n\t\tcase Actions.SET_FOLD_STATE:\n\t\t\tconsole.log('[SET_FOLD_STATE]', action.payload);\n\t\t\tObject.assign(newState.foldState, action.payload || initAppReducerState.foldState);\n\t\t\tnewState.foldState.hash++;\n\t\t\tbreak;\n\t\tcase Actions.SET_EDITOR_STATE:\n\t\t\tconsole.log('[SET_EDITOR_STATE]', action.payload);\n\t\t\tObject.assign(newState.editorState, action.payload || initAppReducerState.editorState);\n\t\t\tnewState.editorState.hash++;\n\t\t\tbreak;\n\t\tcase Actions.SET_USER_STATE:\n\t\t\tconsole.log('[SET_USER_STATE]', action.payload);\n\t\t\tObject.assign(newState.userState, action.payload || initAppReducerState.userState);\n\t\t\tnewState.userState.hash++;\n\t\t\tbreak;\n\t}\n\n\treturn newState;\n};\n","/home/bbor/dev/origamiodyssey/src/style/theme.js",["147"],"/home/bbor/dev/origamiodyssey/src/anim/Paper.js",["148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171"],"/**\n * FILENAME: Paper.js\n *\n * DESCRIPTION: Simulates a piece of paper.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\n\n// Threejs - 3D Animation\nimport { Canvas, useFrame, useThree, useLoader, extend } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { Line } from '@react-three/drei';\n\n// React Spring - animation\nimport { a, useSpring } from '@react-spring/three';\n// import { a, useTransition, Transition } from '@react-spring/three';\nimport { Chip } from '@material-ui/core';\n\nimport useStyles from './../style/theme';\nimport {\n\tcollectStepsForLevel,\n\tcalcMaxLevel,\n\tstepIs2D,\n\tstepIs3D,\n\tstepHasArgs,\n\tcmdOrderingComparator,\n\tcmdsInvolveEdge,\n\tcmdsInvolveVert\n} from './../infra/utils';\n\nconst edgeMat = new THREE.MeshBasicMaterial({ attach: 'material' });\n\nexport const Paper = props => {\n\tconst {\n\t\tposition,\n\t\tscale,\n\t\tctrlOverlay,\n\t\toverlayItems,\n\t\tinitStep,\n\t\tinitFold,\n\t\tfoldLastUpdated,\n\t\tfoldKey,\n\t\tfoldState,\n\t\tfoldStateHash,\n\t\tsetFoldState,\n\t\teditorState,\n\t\teditorStateHash\n\t} = props;\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\tconst [instructions, setInstructions] = useState(null);\n\tconst [prevStep, setPrevStep] = useState(initStep);\n\n\tconst rotation = useRef([0, 0, 0]);\n\tconst faceGeometry = useRef(null);\n\tconst creasedEdges = useRef(new Set());\n\tconst fold = useRef(null);\n\tconst classes = useStyles();\n\n\tconst {\n\t\tcamera,\n\t\tgl: { domElement }\n\t} = useThree();\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\n\tconst recursiveTriangulation = (curFace, foldObj) => {\n\t\tif (curFace.length <= 3) {\n\t\t\t// If this is a triangle (or invalid...), just push it as is\n\t\t\tfoldObj.faces_vertices.push(curFace);\n\t\t} else {\n\t\t\t// Else push a new triangle, and call this function again on the new shape\n\t\t\tconst [cutIdx] = curFace.splice(1, 1);\n\t\t\tfoldObj.faces_vertices.push([curFace[0], cutIdx, curFace[1]]);\n\t\t\tfoldObj.edges_vertices.push([curFace[0], curFace[1]]);\n\t\t\trecursiveTriangulation(curFace, foldObj);\n\t\t}\n\t};\n\n\tconst hasDuplicate = (item, idx, array, ordered) => {\n\t\treturn (\n\t\t\t!array ||\n\t\t\tarray.find(\n\t\t\t\t(cmpItem, cmpIdx) =>\n\t\t\t\t\tcmpIdx !== idx &&\n\t\t\t\t\t(!ordered || cmpItem.length === item.length) &&\n\t\t\t\t\tcmpItem.every((cmpSub, cmpSubIdx) => (ordered ? item[cmpSubIdx] : item.includes(cmpSub)))\n\t\t\t)\n\t\t);\n\t};\n\n\t/**\n\t * Returns true if there's a problem. Recursively walks the tree.\n\t */\n\tconst checkInstruction = (inst, foldObj) => {\n\t\tlet ret;\n\t\tif (Array.isArray(inst)) {\n\t\t\t// Is this edge part of the edges array?\n\t\t\tret = !hasDuplicate(inst.slice(0, 2), -1, foldObj.edges_vertices) ? inst : false;\n\t\t} else {\n\t\t\tinst.children.some(child => {\n\t\t\t\tret = checkInstruction(child, foldObj)\n\t\t\t\treturn ret;\n\t\t\t});\n\t\t}\n\t\t// console.log(Array.isArray(inst) ? \"leaf\": \"root\", ret);\n\t\treturn ret;\n\t}\n\n\tconst validateFoldObj = foldObj => {\n\t\tlet ret;\n\n\t\t// No duplicate vertices, edges, or faces\n\t\tret = foldObj.vertices_coords.find((item, idx) => hasDuplicate(item, idx, foldObj.vertices_coords, true));\n\t\tif (ret) {\n\t\t\tconsole.error('Found duplicate vertex:', ret);\n\t\t}\n\n\t\tret = foldObj.edges_vertices.find((item, idx) => hasDuplicate(item, idx, foldObj.edges_vertices));\n\t\tif (ret) {\n\t\t\tconsole.error('Found duplicate edge:', ret);\n\t\t}\n\n\t\tret = foldObj.faces_vertices.find((item, idx) => hasDuplicate(item, idx, foldObj.faces_vertices));\n\t\tif (ret) {\n\t\t\tconsole.error('Found duplicate face:', ret);\n\t\t}\n\n\t\t// All initial vertices are in a flat sheet (y==0)\n\t\tret = foldObj.vertices_coords.findIndex((item, idx) => item[1] !== 0);\n\t\tif (ret !== -1) {\n\t\t\tconsole.error(\"Found non-flat initial vertex:\", ret);\n\t\t}\n\n\t\t// Every face edge is an edge\n\t\tret = foldObj.faces_vertices.find((face, faceIdx) => (\n\t\t\tface.some((vert, faceVertIdx) => {\n\t\t\t\tconst otherFaceVertIdx = faceVertIdx ? faceVertIdx - 1 : face.length - 1;\n\t\t\t\treturn !hasDuplicate([vert, face[otherFaceVertIdx]], -1, foldObj.edges_vertices);\n\t\t\t})\n\t\t));\n\t\tif (ret) {\n\t\t\tconsole.error(\"Found an invalid face:\", ret);\n\t\t}\n\t\t// Every edge is in a face\n\t\tret = foldObj.edges_vertices.find((edge, edgeIdx) => (\n\t\t\t!foldObj.faces_vertices.find((face, faceIdx) => {\n\t\t\t\tconst firstIdx = face.indexOf(edge[0]);\n\t\t\t\tconst secIdx = face.indexOf(edge[1]);\n\t\t\t\tif (firstIdx !== -1 && secIdx !== -1) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t(firstIdx === 0 && secIdx === face.length - 1) ||\n\t\t\t\t\t\t(secIdx === 0 && firstIdx === face.length - 1) ||\n\t\t\t\t\t\tMath.abs(firstIdx - secIdx) === 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})\t\n\t\t));\n\t\tif (ret) {\n\t\t\tconsole.error(\"Found an edge that's not reflected in any face: \", ret);\n\t\t}\n\n\t\t// Every instruction refers to existing edges\n\t\tret = checkInstruction(foldObj.instructions, foldObj)\n\t\tif (ret) {\n\t\t\tconsole.error(\"Found an invalid instruction: \", ret)\n\t\t}\n\t};\n\n\tconst setFoldObj = newFold => {\n\t\tlet foldObj = JSON.parse(JSON.stringify(newFold));\n\n\t\tvalidateFoldObj(foldObj);\n\n\t\t// Calculate the boundaries of the 2D shape\n\t\t// const maxes = [0, 2].map(i =>\n\t\t// \tfoldObj.vertices_coords.reduce((max, coords) => (Math.abs(coords[i]) > max ? Math.abs(coords[i]) : max), 0)\n\t\t// );\n\n\t\t// // Re-scale the model to a unit square (1 unit x 1 unit)\n\t\tfoldObj.vertices_coords = foldObj.vertices_coords.map(\n\t\t\tcoords => new THREE.Vector3(coords[0], 0, coords[2])\n\t\t);\n\n\t\tfoldObj.edges_foldAngle = foldObj.edges_vertices.map(() => 180);\n\n\t\t// Triangulate all faces\n\t\tfoldObj.faces_vertices = [];\n\t\tnewFold.faces_vertices.forEach((face, faceIdx) => {\n\t\t\tlet curFace = [...face];\n\t\t\trecursiveTriangulation(curFace, foldObj);\n\t\t});\n\n\t\tfoldObj.faces_normals = foldObj.faces_vertices.map(face => new THREE.Vector3(0, 1, 0));\n\n\t\tconsole.log('[setFoldObj]', foldObj);\n\t\tfold.current = foldObj;\n\t};\n\n\tconst edgeIsTriangulation = (edgeIdx, fold) =>\n\t\t!fold.edges_foldAngle || edgeIdx >= fold.edges_foldAngle.length || edgeIdx < 0;\n\n\t/*\n\t * Reads the hierarchical instructions, collecting some descriptive values and initializing state.\n\t */\n\tconst readInstructionsIntoState = () => {\n\t\tconsole.log(\"[readInstructionsIntoState]\")\n\t\tif (fold.current && fold.current.instructions && stepArray.length) {\n\t\t\tconst maxLevel = calcMaxLevel(fold.current.instructions);\n\t\t\tsetFoldState({\n\t\t\t\tmaxLevel: maxLevel,\n\t\t\t\tmaxSteps: stepArray.length,\n\t\t\t\tactive: true \n\t\t\t});\n\t\t}\n\t};\n\n\tconst refreshFaceVertices = () => {\n\t\tif (!fold.current) {\n\t\t\treturn;\n\t\t}\n\n\t\t// NOTE: 9 = 3 coords per vert * 3 vals per coord (such as x,y,z or r,g,b)\n\t\tlet vertices = new Float32Array(9 * fold.current.faces_vertices.length);\n\n\t\tfold.current.faces_vertices.forEach((face, faceIdx) => {\n\t\t\tface.forEach((vertIdx, faceVertIdx) => {\n\t\t\t\tconst coords = fold.current.vertices_coords[vertIdx];\n\t\t\t\tconst startIdx = faceIdx * 9 + faceVertIdx * 3;\n\n\t\t\t\t// Copy over one vertex\n\t\t\t\tvertices[startIdx] = coords.x;\n\t\t\t\tvertices[startIdx + 1] = coords.y;\n\t\t\t\tvertices[startIdx + 2] = coords.z;\n\t\t\t});\n\t\t});\n\n\t\tfaceGeometry.current.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\t};\n\n\t/*\n\t * Initializes the fold state if possible, which involves reading the instructional hierarchy shape.\n\t */\n\tconst initFoldState = () => {\n\t\tconsole.log('[initFoldState]', initFold);\n\t\tif (!initFold) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetFoldObj(initFold);\n\n\t\tcreasedEdges.current.clear();\n\n\t\t// NOTE: 9 = 3 coords per vert * 3 vals per coord (such as x,y,z or r,g,b)\n\t\tfaceGeometry.current = new THREE.BufferGeometry();\n\t\tlet vertices = new Float32Array(9 * fold.current.faces_vertices.length);\n\t\tlet normals = new Float32Array(9 * fold.current.faces_vertices.length);\n\t\tlet colors = new Float32Array(9 * fold.current.faces_vertices.length);\n\n\t\tfold.current.faces_vertices.forEach((face, faceIdx) => {\n\t\t\tface.forEach((vertIdx, faceVertIdx) => {\n\t\t\t\tconst coords = fold.current.vertices_coords[vertIdx];\n\t\t\t\tconst startIdx = faceIdx * 9 + faceVertIdx * 3;\n\n\t\t\t\t// Copy over one vertex\n\t\t\t\tvertices[startIdx] = coords.x;\n\t\t\t\tvertices[startIdx + 1] = coords.y;\n\t\t\t\tvertices[startIdx + 2] = coords.z;\n\n\t\t\t\tnormals[startIdx] = 0;\n\t\t\t\tnormals[startIdx + 1] = -1;\n\t\t\t\tnormals[startIdx + 2] = 0;\n\n\t\t\t\tcolors[startIdx] = 200;\n\t\t\t\tcolors[startIdx + 1] = 100;\n\t\t\t\tcolors[startIdx + 2] = 100;\n\t\t\t});\n\t\t});\n\n\t\t// OPTIONALL DEBUGS\n\t\t// for (let i = 0; i < vertices.length; i += 9) {\n\t\t// \tconsole.log(\n\t\t// \t\t`TRI: [(${vertices[i]}, ${vertices[i] + 2}), (${vertices[i + 3]}, ${vertices[i] + 5}), (${\n\t\t// \t\t\tvertices[i] + 6\n\t\t// \t\t}, ${vertices[i] + 8})]`\n\t\t// \t);\n\t\t// }\n\n\t\tfaceGeometry.current.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\t\tfaceGeometry.current.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n\t\tfaceGeometry.current.setAttribute('color', new THREE.BufferAttribute(colors, 3, true));\n\t};\n\n\t/**\n\t * This is the materials used for the paper.\n\t */\n\tconst createMaterial = () => {\n\t\tlet ret = [\n\t\t\t// new THREE.MeshBasicMaterial({\n\t\t\t// \tflatShading: true,\n\t\t\t// \troughness: 1,\n\t\t\t// \tattach: 'material',\n\t\t\t// \tcolor: 0xcccccc\n\t\t\t// \t// side: THREE.DoubleSide\n\t\t\t// }),\n\t\t\tnew THREE.MeshNormalMaterial({\n\t\t\t\tflatShading: true,\n\t\t\t\troughness: 1,\n\t\t\t\tattach: 'material',\n\t\t\t\tcolor: '#0000ff',\n\t\t\t\t// color: new THREE.Color(0xff0000),\n\t\t\t}),\n\t\t\tnew THREE.MeshNormalMaterial({\n\t\t\t\tflatShading: true,\n\t\t\t\troughness: 1,\n\t\t\t\tattach: 'material',\n\t\t\t\tcolor: '#0000ff',\n\t\t\t\t// color: new THREE.Color(0xff0000),\n\t\t\t\tside: THREE.BackSide\n\t\t\t})\n\t\t];\n\n\t\t// ret[0].color.set(new THREE.Color('#0000ff'));\n\n\t\treturn ret;\n\t};\n\n\t/**\n\t * Inspects this vertex - if it's sufficiently close to any other vertex, snap it to that vertex\n\t */\n\tconst snapVertex = (vertIdx) => {\n\t\tconst vert = fold.current.vertices_coords[vertIdx];\n\t\tfold.current.vertices_coords.some((cmpVert, cmpVertIdx) => {\n\t\t\tif (vertIdx === cmpVertIdx) return false;\n\n\t\t\tconst distance = vert.distanceTo(cmpVert)\n\t\t\tif (distance < 0.005 && distance > 0.00001) {\n\t\t\t\t// console.log(`Snapping ${printVect(vert)} to ${printVect(cmpVert)}`);\n\t\t\t\tvert.copy(cmpVert);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The ultimate goal of this function is to update vertex positions.\n\t * IDEA: Handle one folding edge at a time, then propagate out following neighbors\n\t */\n\tconst performInstructions = () => {\n\n\t\tlet curStep = foldState.stepIdx;\n\t\tif (curStep < -1 || curStep >= foldState.maxSteps) {\n\t\t\tcurStep = -1;\n\t\t}\n\n\t\tconst diff = curStep - prevStep;\n\t\tconsole.log('[performInstructions] ', `${prevStep} + ${diff} = ${curStep}`, foldState.active);\n\n\t\t// If the fold is not shown and we're changing indices, then assume that\n\t\t// the change is merely a race condition consequence, and that change is coming\n\t\tif (!foldState.active) {\n\t\t\tsetPrevStep(curStep);\n\t\t\treturn;\n\t\t}\n\n\t\tif (diff > 0) {\n\t\t\tfor (let i = 1; i <= diff && stepArray[prevStep + i]; i++) {\n\t\t\t\t// The first item in the stepArray is the path, not a cmd\n\t\t\t\tperformCommands(fold.current, stepArray[prevStep + i].slice(1));\n\t\t\t}\n\t\t} else if (diff < 0) {\n\t\t\t// To do reverse steps, we're just performing fold commands with whatever the prev val was\n\t\t\tfor (let i = 0; i > diff && stepArray[prevStep + i]; i--) {\n\t\t\t\tperformReverseCommands(stepArray[prevStep + i].slice(1), prevStep + i);\n\t\t\t}\n\t\t}\n\n\t\trefreshFaceVertices();\n\n\t\tsetPrevStep(curStep);\n\t};\n\n\t/**\n\t * This is a wrapper for performCommands that instead of performing a command, figured out\n\t * what would need to be done to \"undo\" that command, then does that.\n\t * This is done dyanimcally - this is an obvious target for future performance improvements,\n\t * since this could be calculated on an going basis and stored. It helps that these arrs are short.\n\t * @param step the object for the step to reverse. 2D or 3D array.\n\t * @param idx the index of this step in the stepArray\n\t * @param inSubIdx the inner index for a substep, i.e. child of a 3D array - usually N/A\n\t */\n\tconst performReverseCommands = (step, idx, inSubIdx) => {\n\t\t// console.log('[performReverseCommands]', { step, idx, inSubIdx });\n\t\t// If this is a 3D object, just perform this on all subobjects & exit\n\t\tif (stepIs3D(step)) {\n\t\t\tstep.reverse().forEach((subCmd, revIdx) => performReverseCommands(subCmd, idx, step.length - (revIdx + 1)));\n\t\t\treturn;\n\t\t}\n\n\t\t// This tracks the edges that we still need to find an angle for\n\t\tconst vertsToDo = step.map(arr => [arr[0], arr[1]]);\n\t\tlet newCmds = vertsToDo.map(() => null);\n\n\t\t// Check all the previous substeps in this step for previous fold values\n\t\tif (inSubIdx !== undefined) {\n\t\t\tfor (let j = inSubIdx - 1; j >= 0 && vertsToDo.length; j--) {\n\t\t\t\t// We know these are 2D (could never have substeps)\n\t\t\t\tstepArray[idx][j + 1].forEach(cmd => findLastUsedAngles(cmd, vertsToDo, newCmds, step));\n\t\t\t}\n\t\t}\n\n\t\t// console.log(\"[performReverseCommands] Finished previous substeps.\");\n\n\t\t// Check every step before this one for previous fold values\n\t\tfor (let j = idx - 1; j >= 0 && vertsToDo.length; j--) {\n\t\t\tstepArray[j].slice(1).forEach(cmd => {\n\t\t\t\tif (stepIs2D(cmd)) {\n\t\t\t\t\tcmd.reverse().forEach(subCmd => findLastUsedAngles(subCmd, vertsToDo, newCmds, step));\n\t\t\t\t} else {\n\t\t\t\t\tfindLastUsedAngles(cmd, vertsToDo, newCmds, step);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Any remaining toDo folds should be flattened out\n\t\tif (vertsToDo.length) {\n\t\t\tconst dummyDefaults = vertsToDo.map(pair => [...pair, 180]);\n\t\t\t// console.log(\"dummyDefaults: \", dummyDefaults, step)\n\t\t\tdummyDefaults.forEach(cmd => findLastUsedAngles(cmd, vertsToDo, newCmds, step));\n\t\t}\n\n\t\t// Ensure that any \"flex\" commands are executed first\n\t\tnewCmds.sort(cmdOrderingComparator);\n\n\t\t// Perform the reversed instructions for this step\n\t\tperformCommands(fold.current, newCmds);\n\t};\n\n\tconst findLastUsedAngles = (cmd, vertsToDo, newCmds, origStep) => {\n\t\tconst foundIdx = vertsToDo.findIndex(pair => pair.includes(cmd[0]) && pair.includes(cmd[1]));\n\t\tif (foundIdx !== -1) {\n\t\t\t// Figure out the index of this edge in the original step\n\t\t\tconst origIndex = origStep\n\t\t\t\t.map(cmpCmd => cmpCmd.slice(0, 2))\n\t\t\t\t.findIndex(cmpCmd => cmpCmd.includes(cmd[0]) && cmpCmd.includes(cmd[1]));\n\n\t\t\t// Mark this angle for use\n\t\t\tnewCmds[origIndex] = [...vertsToDo[foundIdx], cmd[2]];\n\n\t\t\t// If the original command had arguments, carry those over\n\t\t\tif (stepHasArgs(origStep[origIndex])) {\n\t\t\t\tnewCmds[origIndex].push(Object.assign({}, origStep[origIndex][3]));\n\t\t\t}\n\n\t\t\t// Don't keep checking for this fold\n\t\t\tvertsToDo.splice(foundIdx, 1);\n\t\t\t// console.log(\"[findLastUsedAngles] \", foundIdx, origIndex, newCmds[origIndex])\n\t\t}\n\t};\n\n\tconst degToRad = degree => {\n\t\treturn (degree * Math.PI) / 180;\n\t};\n\t/**\n\t * Find the faces that include the given edge.\n\t * Note that this was built specifically for purposes of rotation (i.e. folding),\n\t * so it will use the isLhs parameter to decide which side of the edge to rotate\n\t */\n\tconst faceToFoldForEdge = (faces, edge, isLhs) => {\n\t\treturn faces.findIndex((face, faceIdx) => {\n\t\t\t// If this face doesn't include the edge, ignore it\n\t\t\tif (!face.includes(edge[0]) || !face.includes(edge[1])) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Else check if this face is on the right side\n\t\t\t// NOTE: this is using the initFold object, so it's looking at a flat version\n\t\t\tconst start = initFold.vertices_coords[edge[0]];\n\t\t\tconst end = initFold.vertices_coords[edge[1]];\n\t\t\tconst third = initFold.vertices_coords[face.find(vertIdx => !edge.includes(vertIdx))];\n\n\t\t\tconst d = (third[0] - start[0]) * (end[2] - start[2]) - (third[2] - start[2]) * (end[0] - start[0]);\n\t\t\treturn isLhs ? d > 0 : d < 0;\n\t\t});\n\t};\n\n\t/**\n\t * Helper function to check if the two vectors are within the same line.\n\t */\n\tconst isSameLine = (lhs, rhs) => {\n\t\tconst crossLen = new THREE.Vector3().crossVectors(lhs, rhs);\n\t\treturn crossLen.length() < 0.0001; // Account for floating point errors\n\t};\n\n\t/**\n\t * This is a very complex step, and best understood by just reading the comments and section titles.\n\t * his is taking in an existing triangle (positioned as it actually is in the model\n\t * at the moment), the vertex of some triangle that's adjacent to it, and finally an angle in degrees. With this,\n\t * this function will figure out where the point would be if you folded this edge completly flat, then rotating the\n\t * new triangle by the amount given.\n\t *\n\t * To make a long story short, this is placing a vertex based on existing ones that we know are in the right place already.\n\t *\n\t * @props fold - the fold object, which will be mutated by this method\n\t * @props vertIdx - the index of the vertex that's being placed\n\t * @props edge - array of the two vertIdxs that make up the edge b/w the two faces\n\t * @props angle - the angle to rotate the second face around the edge by.\n\t */\n\tconst rotateVertAroundEdge = (fold, vertIdx, edge, angle) => {\n\t\tconst actualXAxis = new THREE.Vector3(1, 0, 0);\n\n\t\t// Read in the positions of the vertices of the edge that we're rotating around\n\t\tconst start = fold.vertices_coords[edge[0]];\n\t\tconst end = fold.vertices_coords[edge[1]];\n\n\t\t// ------------------------------------------------------------------------------------------\n\t\t// SECTION 1: Figure out where this point would be if the angle were 0 (like in initial fold)\n\t\t// ------------------------------------------------------------------------------------------\n\t\t// Find the plane formed by the other side of this edge\n\t\tconst otherFace = fold.faces_vertices.find(\n\t\t\tface => face.includes(edge[0]) && face.includes(edge[1]) && !face.includes(vertIdx)\n\t\t);\n\t\tconst otherVert = otherFace.find(otherVertIdx => !edge.includes(otherVertIdx));\n\t\tif (otherFace === null || otherVert === null) {\n\t\t\t// console.log(\"[rotateVertAroundEdge] ERR: Couldn't find other plane to base rotation in.\");\n\t\t\treturn;\n\t\t}\n\t\tconst plane = new THREE.Plane().setFromCoplanarPoints(start, end, fold.vertices_coords[otherVert]);\n\n\t\t// const planeOrigin = new THREE.Vector3().copy(plane.normal).multiplyScalar(Math.abs(plane.constant));\n\t\tconst norm = new THREE.Vector3().copy(plane.normal);\n\t\tconst normLine = new THREE.Line3(norm.clone().multiplyScalar(-1), norm);\n\n\t\t// Get the translation vector from the original plane (i.e. norm=<0,1,0>)\n\t\tconst initStart = new THREE.Vector3(...initFold.vertices_coords[edge[0]]);\n\t\tconst initEnd = new THREE.Vector3(...initFold.vertices_coords[edge[1]]);\n\t\tconst initThird = new THREE.Vector3(...initFold.vertices_coords[vertIdx]);\n\n\t\t// If we're starting at the origin, just use the end\n\t\tconst diffInPlane = new THREE.Vector3().subVectors(initThird, initStart);\n\t\tconst edgeInPlane = new THREE.Vector3().subVectors(initEnd, initStart);\n\n\t\t// Angle between the X axis ([1, 0, 0]) and the vector\n\t\tlet axisRotation = edgeInPlane.angleTo(actualXAxis);\n\t\t// If it's in the back quadrants, `angleTo` gets lazy and measures the wrong direction (to the line, not the vector)\n\t\tif (edgeInPlane.z < 0) {\n\t\t\taxisRotation = 2 * Math.PI - axisRotation;\n\t\t}\n\n\t\t// X axis starts as the real edge vector\n\t\tconst xAxis = new THREE.Vector3().subVectors(end, start).normalize();\n\n\t\t// Use this fake x Axis to get a Z axis that's orthag to it and the normal\n\t\tconst zAxis = new THREE.Vector3().crossVectors(xAxis, plane.normal).normalize();\n\n\t\t// Rotate both the X and Z axiis around the Y (the normal) to get \"correct\" vals\n\t\txAxis.applyAxisAngle(plane.normal, axisRotation);\n\t\tzAxis.applyAxisAngle(plane.normal, axisRotation);\n\n\t\t// We don't care about the y axis, since the paper is flat during this step\n\n\t\t// Create the translation matrix b/w the plane's coords and real coords\n\t\tconst newCoords = new THREE.Matrix3().set(\n\t\t\txAxis.x,\n\t\t\tplane.normal.x,\n\t\t\tzAxis.x,\n\t\t\txAxis.y,\n\t\t\tplane.normal.y,\n\t\t\tzAxis.y,\n\t\t\txAxis.z,\n\t\t\tplane.normal.z,\n\t\t\tzAxis.z\n\t\t);\n\n\t\t// Transform the diff vector to real coords\n\t\tconst actualDiff = new THREE.Vector3().copy(diffInPlane).applyMatrix3(newCoords);\n\n\t\t// The third point starts off assuming no rotation\n\t\tconst third = new THREE.Vector3().addVectors(start, actualDiff);\n\n\t\t// ----------------------------------------------------\n\t\t// SECTION 2: Rotate an existing point around this edge\n\t\t// ----------------------------------------------------\n\t\tlet targetVec;\n\n\t\t// If the paper is flat, we can skip this step\n\t\tif (Math.abs(angle) === 180) {\n\t\t\ttargetVec = third;\n\t\t} else {\n\t\t\t// Setup vectors for edge (start --> end), and the target (start --> third)\n\t\t\tconst edgeDirection = new THREE.Vector3().subVectors(end, start);\n\t\t\tedgeDirection.normalize();\n\t\t\ttargetVec = new THREE.Vector3().subVectors(third, start);\n\n\t\t\t// console.log('Applying angle to edge', edgeDirection);\n\n\t\t\t// Rotate the target vector around the edge\n\t\t\ttargetVec.applyAxisAngle(edgeDirection, degToRad(180 - angle));\n\n\t\t\t// Add the start back to the target, giving us the actual final location\n\t\t\ttargetVec.add(start);\n\t\t}\n\n\t\t// Store the vertex coords for edges + vertices\n\t\tfold.vertices_coords[vertIdx] = targetVec;\n\t\t// console.log(`Rotating ${vertIdx} around (${edge[0]}, ${edge[1]}) by ${angle} to ${printVect(targetVec)}`);\n\t\t// console.log('[rotateVertAroundEdge]', {\n\t\t// diffInPlane,\n\t\t// actualDiff,\n\t\t// \taxisRotation,\n\t\t// \txAxis,\n\t\t// \tzAxis,\n\t\t// \t// newCoords,\n\t\t// norm,\n\t\t// third,\n\t\t// start,\n\t\t// end,\n\t\t// initStart,\n\t\t// initEnd,\n\t\t// initThird,\n\t\t// vertIdx,\n\t\t// initFold\n\t\t// });\n\t};\n\n\t/*\n\t * Applies steps to fold the paper iteratively. The crux of this component - see Paper Engine design document.\n\t * @param fold - the object to be modified\n\t * @param steps - array of instructions\n\t */\n\tconst performCommands = (fold, cmds, origCmds, vertsMoved = new Set(), edgesMoved = new Set(), level = 0) => {\n\t\t// console.log('[performCommands] RUN: ', fold && fold.vertices_coords, cmds, level);\n\t\tif (!fold || cmds === undefined || level > 15) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!origCmds && level === 0) {\n\t\t\torigCmds = [...cmds];\n\t\t}\n\n\t\tlet todoCmds = [];\n\t\t// If this is an object, treat it as one cmd\n\t\tif (!Array.isArray(cmds)) {\n\t\t\tcmds = [cmds];\n\t\t}\n\n\t\t// If this is a 3D array, perform substeps in sequence\n\t\tif (cmds.length && cmds[0].length && Array.isArray(cmds[0][0])) {\n\t\t\tcmds.forEach(cmdArr => performCommands(fold, cmdArr));\n\t\t\treturn;\n\t\t}\n\n\t\tcmds.forEach((cmd, cmdIdx) => {\n\t\t\t// console.log(\"[cmd]\", cmd);\n\t\t\t// Parse the command - 0 & 1 are verts, 2 is foldAngle, and 3 is optional args\n\t\t\tconst args = cmd.length === 4 ? cmd[3] : {};\n\t\t\tconst edgeVerts = [cmd[0], cmd[1]];\n\t\t\tconst edgeIdx = fold.edges_vertices.findIndex(edge => edge.includes(cmd[0]) && edge.includes(cmd[1]));\n\n\t\t\t// If this is the orig command (i.e. haven't recursed yet)\n\t\t\tif (level === 0) {\n\t\t\t\t// Remember that we folded this edge, to simulate paper creases\n\t\t\t\tif (cmd[2] !== 180) {\n\t\t\t\t\tcreasedEdges.current.add(edgeIdx);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Store the fold angle\n\t\t\tif (!edgeIsTriangulation(edgeIdx, fold)) {\n\t\t\t\t// console.log('storing angle', cmd[2], 'for edge', edgeIdx);\n\t\t\t\tfold.edges_foldAngle[edgeIdx] = cmd[2];\n\t\t\t}\n\n\t\t\t// If this is a \"flex\" cmd, stop here\n\t\t\tif (level === 0 && args.flex) {\n\t\t\t\t// console.log(\"exit: Skipping flex fold\", cmd);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the face that includes this edge on the right or left hand side, depending on the cmd args\n\t\t\tconst faceIdx = faceToFoldForEdge(fold.faces_vertices, edgeVerts, args.lhs);\n\n\t\t\t// Find the index of the the third point in this triangle\n\t\t\tconst thirdIdx = fold.faces_vertices[faceIdx].find(vertIdx => !edgeVerts.includes(vertIdx));\n\n\t\t\t// Store the two other edges of the triangle\n\t\t\tconst edgeIndices = fold.edges_vertices.reduce(\n\t\t\t\t(acc, edge, idx) => {\n\t\t\t\t\tif (edge.includes(edgeVerts[0]) && edge.includes(thirdIdx)) {\n\t\t\t\t\t\tacc[0] = idx;\n\t\t\t\t\t} else if (edge.includes(edgeVerts[1]) && edge.includes(thirdIdx)) {\n\t\t\t\t\t\tacc[1] = idx;\n\t\t\t\t\t}\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t[-1, -1]\n\t\t\t);\n\n\t\t\t// Get the angle to rotate these edges (last used, or default to 180)\n\t\t\tconst foldAngleOne = edgeIsTriangulation(edgeIndices[0], fold) ? 180 : fold.edges_foldAngle[edgeIndices[0]];\n\t\t\tconst foldAngleTwo = edgeIsTriangulation(edgeIndices[1], fold) ? 180 : fold.edges_foldAngle[edgeIndices[1]];\n\n\t\t\tconst newCmds = [\n\t\t\t\t[edgeVerts[0], thirdIdx, foldAngleOne],\n\t\t\t\t[thirdIdx, edgeVerts[1], foldAngleTwo]\n\t\t\t];\n\n\t\t\t// Inspect both of the other newCmds - if they're novel, fold them as well\n\t\t\t// NOTE: the edge pointed to by the associated edgeIdx might be reversed\n\t\t\t// from what we're looking at; this is okay, since we're just using the indices\n\t\t\t// to ensure uniqueness here\n\t\t\tedgeIndices.forEach((edgeIdx, triIdx) => {\n\t\t\t\tif (\n\t\t\t\t\t!edgesMoved.has(edgeIdx) &&\n\t\t\t\t\t!isEdgeOfPaper(edgeIdx) &&\n\t\t\t\t\t!hasCmds(todoCmds, newCmds[triIdx]) &&\n\t\t\t\t\tnewCmds[triIdx][2] !== undefined\n\t\t\t\t) {\n\t\t\t\t\t// Mark this edge to be moved next\n\t\t\t\t\ttodoCmds.push(newCmds[triIdx]);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// console.log('[performCommands]', { cmd, newCmds, edgeIndices, isTri: [edgeIsTriangulation(edgeIndices[0], fold), edgeIsTriangulation(edgeIndices[1], fold)] });\n\n\t\t\t// CAUTION - everything below this line is only executed for folds that will have a direct effect\n\n\t\t\t// Check if we've already processed this edge or vertex\n\t\t\tif (faceIdx === -1 || edgesMoved.has(edgeIdx)) {\n\t\t\t\t// console.log(\"exit: edge already moved\", thirdIdx, cmd, edgesMoved);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tedgesMoved.add(edgeIdx);\n\t\t\tif (vertsMoved.has(thirdIdx) || (level !== 0 && cmdsInvolveVert(origCmds, thirdIdx))) {\n\t\t\t\t// console.log(\"exit: vert already moved\", thirdIdx, cmd, vertsMoved);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvertsMoved.add(thirdIdx);\n\n\t\t\t// Rotate the third vertex around this edge\n\t\t\trotateVertAroundEdge(fold, thirdIdx, edgeVerts, -cmd[2]);\n\n\t\t\t// Snap this vertex to any nearby vertices that have already been placed\n\t\t\tsnapVertex(thirdIdx, vertsMoved, origCmds);\n\t\t});\n\n\t\t// Do recursive call for every edge in the todo list\n\t\tif (todoCmds.length) {\n\t\t\tperformCommands(fold, todoCmds, origCmds, vertsMoved, edgesMoved, level + 1);\n\t\t}\n\t};\n\n\tconst cmdsShareEdge = (lhs, rhs) => {\n\t\tconst lhsSlice = lhs.slice(0, 2);\n\t\treturn lhsSlice.includes(rhs[0]) && lhsSlice.includes(rhs[1]);\n\t};\n\n\tconst hasCmds = (edgesList, edge) => {\n\t\treturn edgesList.some(otherEdge => cmdsShareEdge(edge, otherEdge));\n\t};\n\n\t/**\n\t * Returns true if this vertex is on the very edge of the paper, false otherwise.\n\t */\n\tconst vertIsOnEdge = vertCoords => Math.abs(vertCoords[0]) === 1 || Math.abs(vertCoords[2]) === 1;\n\n\t/**\n\t * Returns true if this edge is on the very edge of the paper, false otherwise.\n\t */\n\tconst isEdgeOfPaper = edgeIdx => {\n\t\t// If this edge was created during triangulization, it can't be an edge\n\t\tif (!initFold || edgeIdx < 0 || edgeIdx >= initFold.edges_vertices.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Find the coordinates of the vertices for this edge\n\t\tconst edge = initFold.edges_vertices[edgeIdx];\n\t\tconst coordsArr = edge.map(vertIdx => initFold.vertices_coords[vertIdx]);\n\n\t\t// If both vertices are on the edge, this edge is on the edge\n\t\treturn vertIsOnEdge(coordsArr[0]) && vertIsOnEdge(coordsArr[1]);\n\t};\n\n\t/**\n\t * Prints a THREE.Vector3 object.\n\t */\n\tconst printVect = vect => `${vect.x.toFixed(3)}, ${vect.y.toFixed(3)}, ${vect.z.toFixed(3)}`;\n\n\tconst hoverVert = (idx, event, show) => {\n\t\tctrlOverlay([\n\t\t\t{\n\t\t\t\tshow,\n\t\t\t\tname: 'vert_' + idx,\n\t\t\t\tpos: fold.current.vertices_coords[idx],\n\t\t\t\tcomponent: show && (\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tclassName={classes.vertLabel}\n\t\t\t\t\t\tstyle={{ left: event.pageX + 10, top: event.pageY + 10 + 64 }}\n\t\t\t\t\t\t// label={fold.current && `${idx}: ${printVect(fold.current.vertices_coords[idx])}`}\n\t\t\t\t\t\tlabel={idx}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t}\n\t\t]);\n\t};\n\n\tconst buildStepArray = () => {\n\t\tconsole.log(\"[Paper buildStepArray]\", fold.current && fold.current.frame_title);\n\t\treturn collectStepsForLevel(fold.current, 0, foldState.usingDefaults)\n\t};\n\n\tconst getXYForPos = pos => {\n\t\tlet pixelVec = new THREE.Vector3().copy(pos);\n\t\tpixelVec.project(camera);\n\n\t\treturn {\n\t\t\tx: Math.round((0.5 + pixelVec.x / 2) * domElement.width),\n\t\t\ty: Math.round((0.5 - pixelVec.y / 2) * domElement.height)\n\t\t};\n\t};\n\n\tconst updateScreenPosition = () => {\n\t\tif (!fold.current || !overlayItems.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet retArr = [];\n\n\t\tfold.current.vertices_coords.forEach((vert, idx) => {\n\t\t\tconst { x, y } = getXYForPos(vert);\n\t\t\tretArr.push({\n\t\t\t\tname: 'vert_' + idx,\n\t\t\t\tshow: true,\n\t\t\t\tcomponent: (\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tclassName={classes.vertLabel}\n\t\t\t\t\t\tstyle={{ left: `${x}px`, top: `${y}px` }}\n\t\t\t\t\t\t// label={fold.current && `${idx}: ${printVect(fold.current.vertices_coords[idx])}`}\n\t\t\t\t\t\tlabel={idx}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t});\n\t\t});\n\n\t\tif (retArr.length) {\n\t\t\tctrlOverlay(retArr);\n\t\t}\n\t};\n\n\tconst toggleLabels = () => {\n\t\tcamera.updateMatrixWorld();\n\n\t\tif (!fold.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tctrlOverlay(\n\t\t\tfold.current.vertices_coords.map((vert, idx) => {\n\t\t\t\tconst { x, y } = getXYForPos(vert);\n\n\t\t\t\treturn {\n\t\t\t\t\tname: 'vert_' + idx,\n\t\t\t\t\tshow: editorState.showLabels,\n\t\t\t\t\tcomponent: (\n\t\t\t\t\t\t<Chip className={classes.vertLabel} style={{ left: `${x}px`, top: `${y}px` }} label={idx} />\n\t\t\t\t\t)\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t};\n\n\tconst renderVert = (vert, idx) => (\n\t\t<a.mesh\n\t\t\tposition={vert}\n\t\t\tonPointerEnter={e => hoverVert(idx, e, true)}\n\t\t\tonPointerLeave={e => hoverVert(idx, e, false)}\n\t\t>\n\t\t\t<sphereBufferGeometry attach=\"geometry\" args={[0.02, 8, 8]} />\n\t\t\t<meshStandardMaterial\n\t\t\t\tattach=\"material\"\n\t\t\t\troughness={0.5}\n\t\t\t\tcolor={editorState.vertexHighlights.includes(idx) ? 'red' : 'black'}\n\t\t\t/>\n\t\t</a.mesh>\n\t);\n\n\tconst renderEdge = (edge, edgeIdx) => {\n\t\tif (edgeIdx >= initFold.edges_vertices.length && !editorState.showTriangulations) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet color = 'black';\n\t\tlet dashed = false;\n\t\tif (edgeIdx >= initFold.edges_vertices.length) {\n\t\t\tcolor = 'yellow';\n\t\t\tdashed = true;\n\t\t} else if (editorState.edgeHighlights.includes(edgeIdx)) {\n\t\t\tcolor = 'red';\n\t\t} else if (foldState.stepIdx < foldState.maxSteps - 1) {\n\t\t\tconst cmdInvolvingEdge = cmdsInvolveEdge(\n\t\t\t\tstepArray[foldState.stepIdx + 1],\n\t\t\t\tfold.current.edges_vertices[edgeIdx]\n\t\t\t);\n\t\t\tif (cmdInvolvingEdge) {\n\t\t\t\tcolor = 'red';\n\t\t\t\tdashed = cmdInvolvingEdge[2] < 180;\n\t\t\t}\n\t\t}\n\n\t\tif (creasedEdges.current.has(edgeIdx) && color !== 'red') {\n\t\t\tcolor = '#bbb';\n\t\t}\n\n\t\treturn (\n\t\t\t<Line\n\t\t\t\tpoints={edge.map(index => fold.current.vertices_coords[index])}\n\t\t\t\tcolor={color}\n\t\t\t\tlineWidth={1}\n\t\t\t\tdashed={dashed}\n\t\t\t\tmaterial={edgeMat}\n\t\t\t\tdashSize={0.1}\n\t\t\t\tgapSize={0.1}\n\t\t\t\tvisible={editorState.showEdges || color === 'red' || color === '#bbb'}\n\t\t\t\tkey={edgeIdx}\n\t\t\t/>\n\t\t);\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\tuseFrame(() => {});\n\n\tconst [frontMat, backMat] = useMemo(createMaterial, []);\n\tconst stepArray = useMemo(buildStepArray, [\n\t\t!fold.current || !fold.current.instructions,\n\t\tfold.current && fold.current.frame_title\n\t]);\n\n\tuseEffect(performInstructions, [foldState.stepIdx]);\n\tuseEffect(initFoldState, [foldKey]);\n\tuseEffect(readInstructionsIntoState, [foldKey, stepArray.length]);\n\tuseEffect(toggleLabels, [editorState.showLabels]);\n\n\t// console.log('[Paper]', { stepArray });\n\n\tif (!initFold) {\n\t\treturn null;\n\t}\n\n\t// console.log('[Paper]', fold.current && fold.current.edges_vertices);\n\n\treturn (\n\t\t<group>\n\t\t\t{fold.current && fold.current.edges_vertices.map(renderEdge)}\n\t\t\t{editorState.showVertices && fold.current && fold.current.vertices_coords.map(renderVert)}\n\t\t\t{editorState.showFaces && fold.current && faceGeometry.current && (\n\t\t\t\t<group>\n\t\t\t\t\t<a.mesh geometry={faceGeometry.current} material={backMat}></a.mesh>\n\t\t\t\t\t<a.mesh geometry={faceGeometry.current} material={frontMat}></a.mesh>\n\t\t\t\t</group>\n\t\t\t)}\n\t\t</group>\n\t);\n};\n\n/*\nFOLDING ENGINE\n1. Description\n\tThe function of this \"engine\", which basically means a stateful algo here, is to manipulate three.js objects.\n\tThus, the output of all of this are the props used in the return statement of the <Paper/> component.\n\tThe initial input is the initFold object, which is a FOLD json object with special step components.\n\tAn index into the step array is maintained, and any transitions result in \n2. Function Structure\n\t1.1. stepTo\n\n*/\n","/home/bbor/dev/origamiodyssey/src/infra/actions.js",[],"/home/bbor/dev/origamiodyssey/src/layout/NavDrawer.js",["172","173","174","175","176","177","178","179","180"],"/home/bbor/dev/origamiodyssey/src/layout/pages/ModelSelect.js",["181","182","183","184","185","186","187","188","189","190","191","192"],"/**\n * FILENAME: ModelSelect.js\n *\n * DESCRIPTION: This page allows the user to browse through cards, read details on models, and select one to fold.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config } from 'react-spring';\n\nimport {\n\tDivider,\n\tTypography,\n\tCardMedia,\n\tCardActionArea,\n\tCardActions,\n\tCardContent,\n\tButton,\n\tGrid,\n\tFab,\n\tCard,\n\tChip\n} from '@material-ui/core';\nimport FilterList from '@material-ui/icons/FilterList';\nimport Clear from '@material-ui/icons/Clear';\n\nimport useStyles from './../../style/theme';\nimport { Folds, Pages, Tags, TagCategories } from './../../infra/constants';\nimport { setLayoutState } from './../../infra/actions';\nconst AnimatedCard = animated(Card);\n\nexport const ModelSelect = props => {\n\tconst { layoutState, setLayoutState } = props;\n\tconst classes = useStyles();\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\t// Used to track each \"placeholder\" element\n\t// const [cardRefs, setCardRefs] = useState([]);\n\n\t// Used to track which card is currently open\n\tconst [activeIndex, setActiveIndex] = useState(-1);\n\n\t// Used to track which card is currently open\n\tconst [filterTags, setFilterTags] = useState(new Set());\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\n\t/**\n\t * Reads the list of all cards, and decides which to include.\n\t * Note that this is likely to grow suddenly and quickly in complexity as soon as we start\n\t * including folds from other sources, or, god forbid, external REST sources.\n\t * @return an array of Fold objects - see constants.js for format\n\t */\n\tconst filterCardList = () => {\n\t\treturn Object.keys(Folds).filter(() => true);\n\t};\n\n\t/**\n\t * Handles a click on one of the cards - just prompts update and relies on hooks to do actual work.\n\t */\n\tconst handleCardClick = (event, index) => {\n\t\tsetActiveIndex(activeIndex === index ? -1 : index);\n\t};\n\n\t/**\n\t * Open the fold page with the supplied model name, closing this page.\n\t */\n\tconst openFold = foldKey => {\n\t\tsetLayoutState({\n\t\t\tpage: Pages.Fold,\n\t\t\tcurFold: foldKey\n\t\t});\n\t};\n\n\t/**\n\t * Recreate the refs array, reusing elements. Note that this algo doesn't support reordering\n\t */\n\t// const updateCardRefs = () => {\n\t// \tsetCardRefs(elRefs =>\n\t// \t\tArray(cardList.length)\n\t// \t\t\t.fill()\n\t// \t\t\t.map((el, i) => cardRefs[i] || createRef())\n\t// \t);\n\t// };\n\n\t/**\n\t * A subcomponent that displays one card. This component needs to grow and shrink without affecting html\n\t * layout styling, so it relies on a placeholder div that only suggests a shape to the actual, absolute, Card.\n\t */\n\tconst ModelCard = props => {\n\t\tconst { foldEntry, name, cardKey, index, isActive, isHidden } = props;\n\t\tconst [posHash, setPosHash] = useState(0);\n\t\tconst ref = useRef();\n\n\t\t/**\n\t\t * Pass the click event on to the parent function to open a fold page.\n\t\t */\n\t\tconst handleFoldClick = e => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\n\t\t\topenFold(cardKey);\n\t\t};\n\n\t\t/**\n\t\t * Sub-subcomponent to show the label for a row on this card. This probably could be abstracted out, but it\n\t\t * doesn't seem worth it.\n\t\t */\n\t\tconst CardLabel = ({ text }) => (\n\t\t\t<React.Fragment>\n\t\t\t\t<Typography className={classes.modelCard_label} variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\t{text}\n\t\t\t\t</Typography>\n\t\t\t\t<Divider />\n\t\t\t</React.Fragment>\n\t\t);\n\n\t\t// INNER LIFECYCLE\n\n\t\t// Dynamically calculate the target size of the card\n\t\tconst style = useMemo(\n\t\t\t() => ({\n\t\t\t\theight: isActive ? '400px' : '180px',\n\t\t\t\twidth: isActive ? '400px' : '200px',\n\t\t\t\ttop: ref.current ? ref.current.offsetTop : 0,\n\t\t\t\tleft: ref.current ? ref.current.offsetLeft : 0,\n\t\t\t\tdisplay: isHidden ? 'none' : undefined\n\t\t\t}),\n\t\t\t[isActive, isHidden, ref.current && ref.current.offsetTop, ref.current && ref.current.offsetLeft]\n\t\t);\n\n\t\t// Update hash when style changes so we can inform children\n\t\tuseEffect(() => setPosHash(cur => cur + 1), [style]);\n\n\t\t// Get the location of the current image using webpack  - probably only done once per card\n\t\tconst imagePath = useMemo(\n\t\t\t() => (layoutState.useImages ? require(`./../../static/${foldEntry.img}_thumbnail.png`) : undefined),\n\t\t\t[foldEntry.img, layoutState.useImages]\n\t\t);\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{/* This is the \"anchor\" that positions the card, takes advantage of CSS */}\n\t\t\t\t<div\n\t\t\t\t\tref={ref}\n\t\t\t\t\tclassName={classes.modelCard_placeholder}\n\t\t\t\t\tstyle={{ display: isHidden ? 'none' : undefined }}\n\t\t\t\t/>\n\n\t\t\t\t{/* This is the actual card: an `absolute` element so it can grow or shrink in place without affecting others' positioning */}\n\t\t\t\t<Card\n\t\t\t\t\tclassName={`${classes.modelCard} ${isActive ? classes.modelCard__active : ''}`}\n\t\t\t\t\tname={index}\n\t\t\t\t\tonClick={event => handleCardClick(event, index)}\n\t\t\t\t\tstyle={style}\n\t\t\t\t>\n\t\t\t\t\t<CardActionArea\n\t\t\t\t\t\tclassName={`${classes.modelCard_rail_container} ${\n\t\t\t\t\t\t\tisActive ? classes.modelCard_rail_container__active : ''\n\t\t\t\t\t\t}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className={classes.modelCard_rail}>\n\t\t\t\t\t\t\t{/* Picture / Preview Model */}\n\t\t\t\t\t\t\t<CardMedia\n\t\t\t\t\t\t\t\tclassName={classes.modelCard_img}\n\t\t\t\t\t\t\t\tcomponent=\"img\"\n\t\t\t\t\t\t\t\talt={'Folded Model Picture'}\n\t\t\t\t\t\t\t\ttitle=\"Folded Model Picture\"\n\t\t\t\t\t\t\t\theight=\"120\"\n\t\t\t\t\t\t\t\t// image={imagePath}\n\t\t\t\t\t\t\t\timage={foldEntry.staticImg}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t{/* Title */}\n\t\t\t\t\t\t\t\t<Typography className={classes.modelCard_title} variant=\"h5\" component=\"h2\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t{/* Tags */}\n\t\t\t\t\t\t\t\t{props.isActive && (\n\t\t\t\t\t\t\t\t\t<div className={classes.tags} variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t\t\t\t\t\t{foldEntry.tags && foldEntry.tags.length\n\t\t\t\t\t\t\t\t\t\t\t? foldEntry.tags.map((tagKey, i) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={cardKey + '_' + tagKey}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclickable\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={Tags[tagKey].text}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTags[tagKey].category\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? classes[`tags__${Tags[tagKey].category}`]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t  ))\n\t\t\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Details rail */}\n\t\t\t\t\t\t{isActive && (\n\t\t\t\t\t\t\t<div className={classes.modelCard_rail}>\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t{props.isActive && (\n\t\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t{/* Attribution */}\n\t\t\t\t\t\t\t\t\t\t\t<CardLabel text=\"Creator\" />\n\t\t\t\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.modelCard_bodyText}\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"body2\"\n\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"textSecondary\"\n\t\t\t\t\t\t\t\t\t\t\t\tcomponent=\"p\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{foldEntry.author}\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t\t\t\t<br />\n\n\t\t\t\t\t\t\t\t\t\t\t<CardLabel text=\"Description\" />\n\t\t\t\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.modelCard_bodyText}\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"body2\"\n\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"textSecondary\"\n\t\t\t\t\t\t\t\t\t\t\t\tcomponent=\"p\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{foldEntry.description}\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</CardActionArea>\n\n\t\t\t\t\t{/* Actions */}\n\t\t\t\t\t{isActive && (\n\t\t\t\t\t\t<CardActions classes={classes.modelCard_footer}>\n\t\t\t\t\t\t\t<Button size=\"small\" color=\"primary\">\n\t\t\t\t\t\t\t\tShare\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button size=\"small\" color=\"primary\">\n\t\t\t\t\t\t\t\tLearn More\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<div className={classes.modelCard_foldButton}>\n\t\t\t\t\t\t\t\t<Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={handleFoldClick}>\n\t\t\t\t\t\t\t\t\tFold\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t)}\n\t\t\t\t</Card>\n\t\t\t</React.Fragment>\n\t\t);\n\t};\n\n\tconst generateFilterCardStyle = () => {\n\t\tconst isActive = activeIndex === -2;\n\t\treturn {\n\t\t\theight: isActive ? 'min-content' : '64px'\n\t\t};\n\t};\n\n\tconst handleFilterTagClick = tagKey => {\n\t\tlet newFilterTags = new Set(filterTags);\n\n\t\tif (newFilterTags.has(tagKey)) {\n\t\t\tnewFilterTags.delete(tagKey);\n\t\t} else {\n\t\t\tnewFilterTags.add(tagKey);\n\t\t}\n\n\t\tsetFilterTags(newFilterTags);\n\t};\n\n\tconst tagsAreHidden = (obj, searchStr) => {\n\t\tlet ret = false;\n\t\tif (filterTags.size) {\n\t\t\t// If there's filters and this doesn't match, hide it\n\t\t\tret = ret || !obj.tags.some(tagKey => filterTags.has(tagKey));\n\t\t}\n\t\tif (searchStr.length) {\n\t\t\t// If there's a search str and this doesn't match, hide it\n\t\t\tret =\n\t\t\t\tret ||\n\t\t\t\t!(obj.name.toLowerCase().includes(searchStr) || obj.description.toLowerCase().includes(searchStr));\n\t\t}\n\t\t// console.log('tagsAreHidden', ret, searchStr, obj);\n\n\t\treturn ret;\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\n\t// Get the list of all cards to display\n\tconst cardList = useMemo(filterCardList, []);\n\n\tconst filterCardStyle = useMemo(generateFilterCardStyle, [window.innerWidth, activeIndex]);\n\tconst searchStr = useMemo(() => layoutState.searchStr.toLowerCase(), [layoutState.searchStr]);\n\n\t// Update our list of refs for each card\n\t// useEffect(updateCardRefs, [cardList.length]);\n\n\tconst filterIsActive = activeIndex === -2;\n\tconst filterChoicesStyle = {\n\t\tdisplay: filterIsActive ? undefined : 'none'\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div\n\t\t\t\tclassName={`${classes.filter_card} ${activeIndex === -2 ? classes.filter_card__active : ''}`}\n\t\t\t\tstyle={filterCardStyle}\n\t\t\t>\n\t\t\t\t<div className={classes.filter_toggle_container}>\n\t\t\t\t\t{filterTags.size > 0 && (\n\t\t\t\t\t\t<Fab\n\t\t\t\t\t\t\tclassName={classes.filter_clear}\n\t\t\t\t\t\t\tonClick={() => setFilterTags(new Set())}\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Clear />\n\t\t\t\t\t\t</Fab>\n\t\t\t\t\t)}\n\t\t\t\t\t<Fab\n\t\t\t\t\t\tclassName={classes.filter_toggle}\n\t\t\t\t\t\tonClick={e => handleCardClick(e, -2)}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\tvariant=\"extended\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<FilterList />\n\t\t\t\t\t\tFilter\n\t\t\t\t\t</Fab>\n\t\t\t\t</div>\n\t\t\t\t<Grid container className={classes.filter_choices} style={filterChoicesStyle}>\n\t\t\t\t\t{Object.keys(TagCategories).map(categoryKey => (\n\t\t\t\t\t\t<Grid item className={classes.editor_row} {...TagCategories[categoryKey]}>\n\t\t\t\t\t\t\t{/* Title */}\n\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\tclassName={classes.modelCard_label}\n\t\t\t\t\t\t\t\tvariant=\"body2\"\n\t\t\t\t\t\t\t\tcolor=\"textSecondary\"\n\t\t\t\t\t\t\t\tcomponent=\"h4\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{TagCategories[categoryKey].text}\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<Divider />\n\n\t\t\t\t\t\t\t{Object.keys(Tags)\n\t\t\t\t\t\t\t\t.filter(tagKey => Tags[tagKey].category === categoryKey)\n\t\t\t\t\t\t\t\t.map(tagKey => (\n\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\tkey={tagKey}\n\t\t\t\t\t\t\t\t\t\tclickable\n\t\t\t\t\t\t\t\t\t\tlabel={Tags[tagKey].text}\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleFilterTagClick(tagKey)}\n\t\t\t\t\t\t\t\t\t\tcolor={filterTags.has(tagKey) ? 'primary' : undefined}\n\t\t\t\t\t\t\t\t\t\tclasses={{\n\t\t\t\t\t\t\t\t\t\t\troot: `${classes.tagchip}`\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t))}\n\t\t\t\t</Grid>\n\t\t\t</div>\n\n\t\t\t<div className={classes.page_ModelSelect_container}>\n\t\t\t\t{cardList.map((cardKey, i) => (\n\t\t\t\t\t<ModelCard\n\t\t\t\t\t\tname={Folds[cardKey].name}\n\t\t\t\t\t\tkey={cardKey}\n\t\t\t\t\t\tcardKey={cardKey}\n\t\t\t\t\t\tfoldEntry={Folds[cardKey]}\n\t\t\t\t\t\tindex={i}\n\t\t\t\t\t\tisActive={activeIndex === i}\n\t\t\t\t\t\tshouldOpenFlipped={false}\n\t\t\t\t\t\tisHidden={tagsAreHidden(Folds[cardKey], searchStr)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span> mainChild! </span>\n\t\t\t\t\t</ModelCard>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tlayoutState: state.appReducer.layoutState,\n\t\tlayoutStateHash: state.appReducer.layoutState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setLayoutState })(ModelSelect);\n","/home/bbor/dev/origamiodyssey/src/layout/pages/FoldControls.js",["193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],"/**\n * FILENAME: FoldControls.js \n *\n * DESCRIPTION: These are piecemeal controls for the fold state. \n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config }  from 'react-spring';\n\nimport { SwipeableDrawer, Button,  ButtonGroup, List, Divider, ListItem, Card } from '@material-ui/core';\nimport SkipPrevious from \"@material-ui/icons/SkipPrevious\";\nimport SkipNext from \"@material-ui/icons/SkipNext\";\n\nimport useStyles from \"./../../style/theme\";\nimport { Folds } from \"./../../infra/constants\";\nimport { setFoldState } from \"./../../infra/actions\";\n// const AnimatedCard = animated(Card);\n\nexport const FoldControls = props => {\n\tconst { windowHeight, foldState, foldStateHash, setFoldState } = props;\n\n\t// ----------\n\t// STATE INIT \n\t// ----------\n\tconst classes = useStyles();\n\tconst [cardRefs, setCardRefs] = useState([]);\n\tconst [curHash, setHash] = useState(0);\n\n\t// ----------------\n\t// MEMBER FUNCTIONS \n\t// ----------------\n\n\t// Changes the current instructional sequential step, prompting animation.\n\tconst changeStep = (delta) => {\n\t\tlet newStepIndex = Math.min(Math.max(foldState.stepIdx + delta, -1), foldState.maxSteps);\n\t\tsetFoldState({\n\t\t\tstepIdx: newStepIndex\n\t\t});\n\t};\n\n\tconst calcControlsPosition = () => {\n\t\treturn (window.innerWidth - 128) / 2;\n\t}\n\n\tconst triggerRerender = () => {\n\t\tsetHash(cur => cur + 1);\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\n\tconst buttonClasses = useMemo(() => ({\n\t\troot: classes.fold_controls_button,\n\t\tlabel: classes.fold_controls_button_label\n\t}), []);\n\n\t// Rerender whenever the page resizes\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", triggerRerender);\n\t}, []);\n\n\tconst ctrlLeft = useMemo(calcControlsPosition, [window.innerWidth]);\n\n    return (\n    \t<React.Fragment>\n\t\t\t<Card className={classes.fold_controls} style={{left: ctrlLeft}} >\n\t\t\t\t<ButtonGroup className={classes.fold_controls_button_container} color=\"primary\" variant=\"text\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses={buttonClasses}\n\t\t\t\t\t\tonClick={() => changeStep(-1)}\n\t\t\t\t\t\tdisabled={foldState.stepIdx < 0}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SkipPrevious className={classes.fold_controls_button_icon} />\n\t\t\t\t\t\tPrev\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses={buttonClasses}\n\t\t\t\t\t\tonClick={() => changeStep(1)}\n\t\t\t\t\t\tdisabled={foldState.stepIdx >= foldState.maxSteps - 1}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SkipNext className={classes.fold_controls_button_icon} />\n\t\t\t\t\t\tNext\n\t\t\t\t\t</Button>\n\t\t\t\t</ButtonGroup>\n    \t\t</Card>\n    \t</React.Fragment>\n    );\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setFoldState })(FoldControls);\n",["212","213"],"/home/bbor/dev/origamiodyssey/src/layout/pages/User.js",["214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229"],"/home/bbor/dev/origamiodyssey/src/static/lettering.js",[],"/home/bbor/dev/origamiodyssey/src/layout/pages/FoldEditorCards.js",["230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251"],"/**\n * FILENAME: FoldEditorCards.js\n *\n * DESCRIPTION: These cards are shown on either side of the model, and allow realtime editing of .fold files.\n */\n\n// React + Redux\nimport React, { useState, useRef, useMemo, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { useUpdate, useSpring, useSprings, animated, config } from 'react-spring';\nimport { JsonEditor } from 'jsoneditor-react';\nimport 'jsoneditor-react/es/editor.min.css';\nimport Downloader from 'js-file-downloader';\n\nimport {\n\tButton,\n\tTypography,\n\tButtonGroup,\n\tChip,\n\tInput,\n\tSelect,\n\tMenuItem,\n\tGrid,\n\tList,\n\tDivider,\n\tListItem,\n\tCard\n} from '@material-ui/core';\nimport SkipPrevious from '@material-ui/icons/SkipPrevious';\nimport SkipNext from '@material-ui/icons/SkipNext';\nimport { ToggleButton } from '@material-ui/lab';\n\nimport useStyles from './../../style/theme';\nimport { Folds } from './../../infra/constants';\nimport { setFoldState, setEditorState } from './../../infra/actions';\n// const AnimatedCard = animated(Card);\n\nexport const FoldEditorCards = props => {\n\tconst {\n\t\tcurFold,\n\t\tinitFold,\n\t\tfoldLastUpdated,\n\t\twindowHeight,\n\t\tfoldOverrideCallback,\n\t\tfoldState,\n\t\tfoldStateHash,\n\t\tsetFoldState,\n\t\teditorState,\n\t\teditorStateHash,\n\t\tsetEditorState\n\t} = props;\n\n\t// ----------\n\t// STATE INIT\n\t// ----------\n\tconst classes = useStyles();\n\tconst [curHash, setHash] = useState(0);\n\tconst localFold = useRef();\n\n\t// ----------------\n\t// MEMBER FUNCTIONS\n\t// ----------------\n\tconst calcControlsPosition = () => {\n\t\treturn (window.innerWidth - 128) / 2;\n\t};\n\n\tconst CardLabel = ({ text }) => (\n\t\t<React.Fragment>\n\t\t\t<Typography className={classes.modelCard_label} variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t{text}\n\t\t\t</Typography>\n\t\t\t<Divider />\n\t\t</React.Fragment>\n\t);\n\n\tconst ControlRow = ({ name, text, width, children }) => (\n\t\t<Grid item xs={width || 12} className={classes.editor_row}>\n\t\t\t{/* Title */}\n\t\t\t<CardLabel text={name} />\n\t\t\t{text !== undefined && (\n\t\t\t\t<Typography className={classes.editor_bodyText} variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t<strong>{text}</strong>\n\t\t\t\t</Typography>\n\t\t\t)}\n\n\t\t\t{children}\n\t\t</Grid>\n\t);\n\n\tconst resetLocalFold = () => {\n\t\t// console.log('[resetLocalFold]', initFold);\n\t\tlocalFold.current = JSON.parse(JSON.stringify(initFold));\n\t};\n\n\tconst handleFoldChange = e => {\n\t\tObject.assign(localFold.current, e);\n\t};\n\n\tconst handleSaveClick = () => {\n\t\tif (!localFold.current || !curFold) {\n\t\t\tconsole.error(\"Couldn't save file; no current value.\");\n\t\t\treturn;\n\t\t}\n\n\t\tfoldOverrideCallback(localFold.current);\n\t};\n\n\tconst handleExportClick = async () => {\n\t\tif (!localFold.current || !curFold) {\n\t\t\tconsole.error(\"Couldn't export file; no current value.\");\n\t\t\treturn;\n\t\t}\n\n\t\tlet fileDownloadUrl = `data:application/json,${encodeURIComponent(JSON.stringify(localFold.current, null, 2))}`;\n\t\t// fileDownloadUrl = URL.createObjectURL(fileDownloadUrl)\n\n\t\tnew Downloader({\n\t\t\turl: fileDownloadUrl,\n\t\t\tfilename: `${curFold}.json`\n\t\t}).then(() => {\n\t\t\tconsole.log('finished download.');\n\t\t});\n\t};\n\n\tconst handleEditorFormChange = (field, value) => {\n\t\tsetEditorState({ [field]: value });\n\t};\n\n\tconst handleSelectionChange = event => {\n\t\t// console.log('GOT EVENT! ', event.target);\n\t\tconst field = event.target.name;\n\t\tconst value = event.target.value;\n\n\t\tsetEditorState({ [field]: value });\n\t};\n\n\t// ---------\n\t// LIFECYCLE\n\t// ---------\n\tconst buttonClasses = useMemo(\n\t\t() => ({\n\t\t\troot: classes.fold_controls_button,\n\t\t\tlabel: classes.fold_controls_button_label\n\t\t}),\n\t\t[]\n\t);\n\n\tuseEffect(resetLocalFold, [initFold]);\n\n\tconst ctrlLeft = useMemo(calcControlsPosition, [window.innerWidth]);\n\n\t// If we don't have any fold file loaded yet, don't show these\n\tif (!initFold) {\n\t\treturn <div />;\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{/* Details on the fold state */}\n\t\t\t<Card className={classes.editorState}>\n\t\t\t\t<Typography className={classes.editor_cardTitle} variant=\"h4\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\tFold State\n\t\t\t\t</Typography>\n\t\t\t\t<Grid container>\n\t\t\t\t\t<ControlRow name=\"Step Index\" text={`${foldState.stepIdx + 2}/${foldState.maxSteps + 1}`} width={6} />\n\t\t\t\t</Grid>\n\t\t\t</Card>\n\n\t\t\t{/* Details on the current instruction */}\n\t\t\t<Card className={classes.editorDetails}>\n\t\t\t\t<Typography className={classes.editor_cardTitle} variant=\"h4\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\tEditor Controls\n\t\t\t\t</Typography>\n\t\t\t\t<Grid container>\n\t\t\t\t\t<ControlRow name=\"Highlighted Edges\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tname=\"edgeHighlights\"\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\tvalue={editorState.edgeHighlights}\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\n\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\t\trenderValue={selected => (\n\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t{selected.map(idx => (\n\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\t\tlabel={initFold.edges_vertices[idx].toString()}\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tclassName={classes.editor_select}\n\t\t\t\t\t\t\t// MenuProps={MenuProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{initFold.edges_vertices.map((edge, index) => {\n\t\t\t\t\t\t\t\tconst name = edge.toString();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={index}>\n\t\t\t\t\t\t\t\t\t\t{index}: {name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"vertexHighlights\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tname=\"vertexHighlights\"\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\tvalue={editorState.vertexHighlights}\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\n\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\t\trenderValue={selected => (\n\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t{selected.map(idx => (\n\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\t\tlabel={`${idx}: ${initFold.vertices_coords[idx].toString()}`}\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tclassName={classes.editor_select}\n\t\t\t\t\t\t\t// MenuProps={MenuProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{initFold.vertices_coords.map((coords, index) => {\n\t\t\t\t\t\t\t\tconst name = coords.toString();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={index}>\n\t\t\t\t\t\t\t\t\t\t{index}: {name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"faceHighlights\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tname=\"faceHighlights\"\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\tvalue={editorState.faceHighlights}\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\n\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\t\trenderValue={selected => (\n\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t{selected.map(idx => (\n\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\t\tlabel={`${idx}: ${initFold.faces_vertices[idx].toString()}`}\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tclassName={classes.editor_select}\n\t\t\t\t\t\t\t// MenuProps={MenuProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{initFold.faces_vertices.map((face, index) => {\n\t\t\t\t\t\t\t\tconst name = face.toString();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={index}>\n\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Edges\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showEdges}\n\t\t\t\t\t\t\tonChange={() => handleEditorFormChange('showEdges', !editorState.showEdges)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Vertices\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showVertices}\n\t\t\t\t\t\t\tonChange={() => handleEditorFormChange('showVertices', !editorState.showVertices)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Faces\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showFaces}\n\t\t\t\t\t\t\tonChange={() => handleEditorFormChange('showFaces', !editorState.showFaces)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Tri\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showTriangulations}\n\t\t\t\t\t\t\tonChange={() =>\n\t\t\t\t\t\t\t\thandleEditorFormChange('showTriangulations', !editorState.showTriangulations)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t\t<ControlRow name=\"Show Labels\" width={4}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tselected={editorState.showLabels}\n\t\t\t\t\t\t\tonChange={() =>\n\t\t\t\t\t\t\t\thandleEditorFormChange('showLabels', !editorState.showLabels)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ControlRow>\n\t\t\t\t</Grid>\n\t\t\t</Card>\n\n\t\t\t{/* Entry box for direct JSON manipulation */}\n\t\t\t<Card className={classes.editorEntry}>\n\t\t\t\t<Typography className={classes.editor_cardTitle} variant=\"h4\" color=\"textSecondary\" component=\"h4\">\n\t\t\t\t\t<code>.fold</code> file\n\t\t\t\t</Typography>\n\t\t\t\t<ButtonGroup className={classes.editor_floatAction} color=\"primary\" variant=\"text\" size=\"large\">\n\t\t\t\t\t<Button onClick={handleSaveClick}> Local Save </Button>\n\t\t\t\t\t<Button onClick={handleExportClick}> Export To Disk </Button>\n\t\t\t\t</ButtonGroup>\n\t\t\t\t<JsonEditor\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\tfaces_vertices: initFold.faces_vertices,\n\t\t\t\t\t\tvertices_coords: initFold.vertices_coords,\n\t\t\t\t\t\tedges_vertices: initFold.edges_vertices,\n\t\t\t\t\t\tinstructions: initFold.instructions\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleFoldChange}\n\t\t\t\t\thtmlElementProps={{ class: classes.editor_jsonTextArea }}\n\t\t\t\t\tallowedModes={['tree', 'form']}\n\t\t\t\t\tnavigationBar={false}\n\t\t\t\t\thistory={true}\n\t\t\t\t/>\n\t\t\t</Card>\n\t\t</React.Fragment>\n\t);\n};\n\nexport const mapStateToProps = (state, props) => {\n\treturn {\n\t\tfoldState: state.appReducer.foldState,\n\t\tfoldStateHash: state.appReducer.foldState.hash,\n\t\teditorState: state.appReducer.editorState,\n\t\teditorStateHash: state.appReducer.editorState.hash\n\t};\n};\n\nexport default connect(mapStateToProps, { setFoldState, setEditorState })(FoldEditorCards);\n","/home/bbor/dev/origamiodyssey/src/infra/utils.js",["252"],"/**\n * FILENAME: Constants.js\n *\n * DESCRIPTION: Contains constants for use accross the app.\n */\n\n/*\n * This walks the tree recursively, collecting an array of steps at this \"level\".\n */\nexport const collectStepsForLevel = (fold, level, isDefault) => {\n\tconsole.log(\"[collectStepsForLevel]\", fold, level, isDefault);\n\tif (!fold || !fold.instructions) {\n\t\treturn [];\n\t}\n\n\treturn calcStepsForLevel(fold.instructions, level, isDefault);\n};\n\n/**\n * Recursive function to build the \"step array\" for a tree.\n * The basic concept here is that the user will choose a depth, then this will build an array\n * of sequential steps \"at\" that depth.\n * @returns: a 2D array of step objects\n */\nexport const calcStepsForLevel = (inst, curLevel, isDefault, path = '0') => {\n\tif (!inst.children && !inst.length) {\n\t\t// Error case\n\t\treturn null;\n\t}\n\n\tconst isDefaultNode = isDefault && inst.default;\n\n\t// Leaf node / base case - return this as one step\n\tif (Array.isArray(inst.children[0])) {\n\t\treturn [[path, ...inst.children]];\n\n\t\t// Ancestor nodes - return a list of steps\n\t} else {\n\t\tif (isDefaultNode) {\n\t\t\t// Recursive case: This is target, so return all leaves below this as one step\n\t\t\tlet allLeafDescendants = concatDescendants(inst, curLevel);\n\t\t\t// If we just found one leaf node, treat this as a normal step w/ a 2D arr\n\t\t\tif (allLeafDescendants.length === 1) {\n\t\t\t\tallLeafDescendants = allLeafDescendants[0];\n\t\t\t}\n\t\t\treturn [[path, ...allLeafDescendants]];\n\t\t} else {\n\t\t\t// Recursive case: still above target level, so keep drilling down\n\t\t\t// COLLECT steps returned from children into one array of steps\n\t\t\treturn inst.children.reduce((acc, childInst, childIdx) => {\n\t\t\t\tlet ret = calcStepsForLevel(childInst, curLevel + 1, isDefault, path + ',' + childIdx);\n\t\t\t\treturn ret ? acc.concat(ret) : acc;\n\t\t\t}, []);\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * @returns: a 2D array of every leaf node found below this node\n */\nexport const concatDescendants = (inst, curLevel) => {\n\tif (Array.isArray(inst.children[0])) {\n\t\treturn [[...inst.children]];\n\t} else {\n\t\t// turn many 1d arrs into one - concat\n\t\treturn inst.children.reduce((acc, childInst) => {\n\t\t\tlet ret = concatDescendants(childInst, curLevel + 1);\n\t\t\treturn ret ? acc.concat(ret) : acc;\n\t\t}, []);\n\t}\n};\n\n/**\n * Recursive function to calculate the depth of the instruction tree\n */\nexport const calcMaxLevel = inst => {\n\tif (!inst) {\n\t\treturn 0;\n\t} else if (inst.children && Array.isArray(inst.children[0])) {\n\t\t// Base case: leaf node\n\t\treturn 1;\n\t} else if (inst.children) {\n\t\t// Recursive case: Return 1 plus the height of the tallest subtree\n\t\treturn 1 + Math.max(...inst.children.map(childInst => calcMaxLevel(childInst)));\n\t} else {\n\t\treturn 0;\n\t}\n};\n\nexport const findInUseFamilyNode = (stepArr, path) => {\n\treturn stepArr.findIndex(step => {\n\t\t// True if inUse step is an ancestor or descendant of this step\n\t\treturn path.startsWith(step[0]) || step[0].startsWith(path);\n\t});\n};\n\nexport const getHierNode = (instructions, path) => {\n\tif ((!path || !path.length) && instructions && instructions.desc) {\n\t\t// Base case: If we were passed an empty path, then this is the target node\n\t\treturn instructions;\n\t} else if (path && path.length && instructions.children) {\n\t\t// Recurse Case: Else keep drilling down\n\t\treturn getHierNode(instructions.children[parseInt(path[0])], path.slice(1));\n\t} else {\n\t\t// Error case: Return an error\n\t\treturn {};\n\t}\n};\n\n/**\n * Returns true if the origCmds array includes a non-flex command on an edge including this vert.\n * @param origCmds the array of the original commands to check against (i.e. the commands in the actual json file)\n * @param vertIdx the index of the vertex in question\n */\nexport const cmdsInvolveVert = (origCmds, vertIdx) => {\n\t// console.log(\"[cmdsInvolveVert]\", origCmds)\n\treturn (\n\t\torigCmds &&\n\t\torigCmds.find(cmd => (cmd.length !== 4 || !cmd[3].flex) && (cmd[0] === vertIdx || cmd[1] === vertIdx))\n\t);\n};\n\n/**\n * Returns true if the origCmds array includes a non-flex command on an edge including this vert.\n * @param origCmds the array of the original commands to check against (i.e. the commands in the actual json file)\n * @param vertIdx the index of the vertex in question\n */\nexport const cmdsInvolveEdge = (origCmds, edge) => {\n\t// console.log(\"[cmdsInvolveEdge]\", origCmds)\n\tif (stepIs3D(origCmds)) {\n\t\treturn origCmds.find(subCmds => cmdsInvolveEdge(subCmds, edge));\n\t}\n\n\treturn (\n\t\torigCmds &&\n\t\torigCmds.find(cmd => (cmd.length !== 4 || !cmd[3].flex) && (edge.includes(cmd[0]) && edge.includes(cmd[1])))\n\t);\n};\n\nexport const printPath = path => path.reduce((acc, idx, i) => (i ? ',' : '') + idx, '');\n\nexport const stepIs3D = step => step.length && step[0].length && Array.isArray(step[0][0]);\n\nexport const stepIs2D = step => step.length && Array.isArray(step[0]);\n\nexport const stepIs1D = step => step.length && !Array.isArray(step[0]);\n\nexport const stepHasArgs = step => step.length > 3 && step[3];\n\n/**\n * A comparison function for use in sorting lists of cmds (i.e. a step). \n * Right now just puts flex items first - this is because they don't initiate movement,\n * but need to be processed in full before any movement begins.\n */\nexport const cmdOrderingComparator = (lhs, rhs) => {\n\tconst lhsFlex = stepHasArgs(lhs) && lhs[3].flex;\n\tconst rhsFlex = stepHasArgs(lhs) && lhs[3].flex;\n\treturn (lhsFlex && !rhsFlex) ? 1 : (rhsFlex ? -1 : 0);\n};\n","/home/bbor/dev/origamiodyssey/src/layout/pages/InstructionalHierarchy.js",["253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280"],{"ruleId":"281","severity":1,"message":"282","line":8,"column":35,"nodeType":"283","messageId":"284","endLine":8,"endColumn":42},{"ruleId":"281","severity":1,"message":"285","line":8,"column":44,"nodeType":"283","messageId":"284","endLine":8,"endColumn":53},{"ruleId":"281","severity":1,"message":"286","line":13,"column":2,"nodeType":"283","messageId":"284","endLine":13,"endColumn":19},{"ruleId":"281","severity":1,"message":"287","line":16,"column":2,"nodeType":"283","messageId":"284","endLine":16,"endColumn":12},{"ruleId":"281","severity":1,"message":"288","line":32,"column":19,"nodeType":"283","messageId":"284","endLine":32,"endColumn":30},{"ruleId":"281","severity":1,"message":"289","line":35,"column":8,"nodeType":"283","messageId":"284","endLine":35,"endColumn":12},{"ruleId":"281","severity":1,"message":"290","line":41,"column":8,"nodeType":"283","messageId":"284","endLine":41,"endColumn":23},{"ruleId":"281","severity":1,"message":"291","line":45,"column":8,"nodeType":"283","messageId":"284","endLine":45,"endColumn":23},{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","replacedBy":"295"},{"ruleId":"281","severity":1,"message":"296","line":11,"column":10,"nodeType":"283","messageId":"284","endLine":11,"endColumn":25},{"ruleId":"281","severity":1,"message":"297","line":11,"column":27,"nodeType":"283","messageId":"284","endLine":11,"endColumn":33},{"ruleId":"281","severity":1,"message":"298","line":11,"column":35,"nodeType":"283","messageId":"284","endLine":11,"endColumn":39},{"ruleId":"281","severity":1,"message":"299","line":11,"column":41,"nodeType":"283","messageId":"284","endLine":11,"endColumn":48},{"ruleId":"281","severity":1,"message":"300","line":11,"column":50,"nodeType":"283","messageId":"284","endLine":11,"endColumn":58},{"ruleId":"281","severity":1,"message":"301","line":12,"column":8,"nodeType":"283","messageId":"284","endLine":12,"endColumn":20},{"ruleId":"281","severity":1,"message":"302","line":13,"column":8,"nodeType":"283","messageId":"284","endLine":13,"endColumn":20},{"ruleId":"281","severity":1,"message":"303","line":14,"column":8,"nodeType":"283","messageId":"284","endLine":14,"endColumn":22},{"ruleId":"281","severity":1,"message":"304","line":15,"column":8,"nodeType":"283","messageId":"284","endLine":15,"endColumn":25},{"ruleId":"281","severity":1,"message":"305","line":18,"column":24,"nodeType":"283","messageId":"284","endLine":18,"endColumn":35},{"ruleId":"281","severity":1,"message":"306","line":31,"column":3,"nodeType":"283","messageId":"284","endLine":31,"endColumn":18},{"ruleId":"281","severity":1,"message":"307","line":34,"column":3,"nodeType":"283","messageId":"284","endLine":34,"endColumn":16},{"ruleId":"281","severity":1,"message":"308","line":37,"column":3,"nodeType":"283","messageId":"284","endLine":37,"endColumn":18},{"ruleId":"309","severity":1,"message":"310","line":161,"column":5,"nodeType":"311","endLine":161,"endColumn":7,"suggestions":"312"},{"ruleId":"309","severity":1,"message":"313","line":165,"column":5,"nodeType":"311","endLine":165,"endColumn":57,"suggestions":"314"},{"ruleId":"309","severity":1,"message":"315","line":168,"column":24,"nodeType":"311","endLine":168,"endColumn":45,"suggestions":"316"},{"ruleId":"309","severity":1,"message":"317","line":174,"column":5,"nodeType":"311","endLine":174,"endColumn":14,"suggestions":"318"},{"ruleId":"309","severity":1,"message":"319","line":177,"column":45,"nodeType":"311","endLine":177,"endColumn":77,"suggestions":"320"},{"ruleId":"281","severity":1,"message":"321","line":8,"column":17,"nodeType":"283","messageId":"284","endLine":8,"endColumn":25},{"ruleId":"281","severity":1,"message":"322","line":8,"column":27,"nodeType":"283","messageId":"284","endLine":8,"endColumn":33},{"ruleId":"281","severity":1,"message":"282","line":8,"column":35,"nodeType":"283","messageId":"284","endLine":8,"endColumn":42},{"ruleId":"281","severity":1,"message":"285","line":8,"column":44,"nodeType":"283","messageId":"284","endLine":8,"endColumn":53},{"ruleId":"323","severity":1,"message":"324","line":12,"column":8,"nodeType":"325","messageId":"326","endLine":12,"endColumn":11},{"ruleId":"292","replacedBy":"327"},{"ruleId":"294","replacedBy":"328"},{"ruleId":"281","severity":1,"message":"321","line":7,"column":17,"nodeType":"283","messageId":"284","endLine":7,"endColumn":25},{"ruleId":"281","severity":1,"message":"322","line":7,"column":27,"nodeType":"283","messageId":"284","endLine":7,"endColumn":33},{"ruleId":"281","severity":1,"message":"282","line":7,"column":35,"nodeType":"283","messageId":"284","endLine":7,"endColumn":42},{"ruleId":"281","severity":1,"message":"285","line":7,"column":44,"nodeType":"283","messageId":"284","endLine":7,"endColumn":53},{"ruleId":"281","severity":1,"message":"329","line":17,"column":8,"nodeType":"283","messageId":"284","endLine":17,"endColumn":16},{"ruleId":"281","severity":1,"message":"282","line":8,"column":35,"nodeType":"283","messageId":"284","endLine":8,"endColumn":42},{"ruleId":"281","severity":1,"message":"285","line":8,"column":44,"nodeType":"283","messageId":"284","endLine":8,"endColumn":53},{"ruleId":"281","severity":1,"message":"330","line":12,"column":38,"nodeType":"283","messageId":"284","endLine":12,"endColumn":47},{"ruleId":"281","severity":1,"message":"331","line":17,"column":10,"nodeType":"283","messageId":"284","endLine":17,"endColumn":19},{"ruleId":"281","severity":1,"message":"332","line":17,"column":21,"nodeType":"283","messageId":"284","endLine":17,"endColumn":30},{"ruleId":"281","severity":1,"message":"333","line":17,"column":32,"nodeType":"283","messageId":"284","endLine":17,"endColumn":42},{"ruleId":"281","severity":1,"message":"334","line":17,"column":44,"nodeType":"283","messageId":"284","endLine":17,"endColumn":52},{"ruleId":"281","severity":1,"message":"335","line":17,"column":54,"nodeType":"283","messageId":"284","endLine":17,"endColumn":60},{"ruleId":"281","severity":1,"message":"336","line":21,"column":17,"nodeType":"283","messageId":"284","endLine":21,"endColumn":22},{"ruleId":"281","severity":1,"message":"337","line":67,"column":37,"nodeType":"283","messageId":"284","endLine":67,"endColumn":46},{"ruleId":"281","severity":1,"message":"306","line":67,"column":61,"nodeType":"283","messageId":"284","endLine":67,"endColumn":76},{"ruleId":"281","severity":1,"message":"338","line":73,"column":9,"nodeType":"283","messageId":"284","endLine":73,"endColumn":22},{"ruleId":"339","severity":1,"message":"340","line":14,"column":2,"nodeType":"341","messageId":"342","endLine":39,"endColumn":3},{"ruleId":"343","severity":1,"message":"344","line":85,"column":3,"nodeType":"345","messageId":"326","endLine":85,"endColumn":8},{"ruleId":"281","severity":1,"message":"346","line":11,"column":10,"nodeType":"283","messageId":"284","endLine":11,"endColumn":16},{"ruleId":"281","severity":1,"message":"330","line":11,"column":38,"nodeType":"283","messageId":"284","endLine":11,"endColumn":47},{"ruleId":"281","severity":1,"message":"347","line":11,"column":49,"nodeType":"283","messageId":"284","endLine":11,"endColumn":55},{"ruleId":"281","severity":1,"message":"332","line":16,"column":13,"nodeType":"283","messageId":"284","endLine":16,"endColumn":22},{"ruleId":"281","severity":1,"message":"348","line":36,"column":3,"nodeType":"283","messageId":"284","endLine":36,"endColumn":11},{"ruleId":"281","severity":1,"message":"349","line":37,"column":3,"nodeType":"283","messageId":"284","endLine":37,"endColumn":8},{"ruleId":"281","severity":1,"message":"350","line":42,"column":3,"nodeType":"283","messageId":"284","endLine":42,"endColumn":18},{"ruleId":"281","severity":1,"message":"307","line":45,"column":3,"nodeType":"283","messageId":"284","endLine":45,"endColumn":16},{"ruleId":"281","severity":1,"message":"308","line":48,"column":3,"nodeType":"283","messageId":"284","endLine":48,"endColumn":18},{"ruleId":"281","severity":1,"message":"351","line":54,"column":9,"nodeType":"283","messageId":"284","endLine":54,"endColumn":21},{"ruleId":"281","severity":1,"message":"352","line":54,"column":23,"nodeType":"283","messageId":"284","endLine":54,"endColumn":38},{"ruleId":"281","severity":1,"message":"353","line":57,"column":8,"nodeType":"283","messageId":"284","endLine":57,"endColumn":16},{"ruleId":"354","severity":1,"message":"355","line":339,"column":59,"nodeType":"356","messageId":"357","endLine":339,"endColumn":61},{"ruleId":"281","severity":1,"message":"358","line":496,"column":8,"nodeType":"283","messageId":"284","endLine":496,"endColumn":18},{"ruleId":"281","severity":1,"message":"359","line":538,"column":9,"nodeType":"283","messageId":"284","endLine":538,"endColumn":17},{"ruleId":"281","severity":1,"message":"360","line":792,"column":8,"nodeType":"283","messageId":"284","endLine":792,"endColumn":17},{"ruleId":"281","severity":1,"message":"361","line":827,"column":8,"nodeType":"283","messageId":"284","endLine":827,"endColumn":28},{"ruleId":"309","severity":1,"message":"362","line":940,"column":44,"nodeType":"311","endLine":943,"endColumn":3,"suggestions":"363"},{"ruleId":"309","severity":1,"message":"364","line":941,"column":3,"nodeType":"365","endLine":941,"endColumn":46},{"ruleId":"309","severity":1,"message":"364","line":942,"column":3,"nodeType":"365","endLine":942,"endColumn":43},{"ruleId":"309","severity":1,"message":"366","line":945,"column":33,"nodeType":"311","endLine":945,"endColumn":52,"suggestions":"367"},{"ruleId":"309","severity":1,"message":"368","line":946,"column":27,"nodeType":"311","endLine":946,"endColumn":36,"suggestions":"369"},{"ruleId":"309","severity":1,"message":"370","line":947,"column":39,"nodeType":"311","endLine":947,"endColumn":66,"suggestions":"371"},{"ruleId":"309","severity":1,"message":"372","line":948,"column":26,"nodeType":"311","endLine":948,"endColumn":50,"suggestions":"373"},{"ruleId":"281","severity":1,"message":"322","line":8,"column":27,"nodeType":"283","messageId":"284","endLine":8,"endColumn":33},{"ruleId":"281","severity":1,"message":"282","line":8,"column":35,"nodeType":"283","messageId":"284","endLine":8,"endColumn":42},{"ruleId":"281","severity":1,"message":"285","line":8,"column":44,"nodeType":"283","messageId":"284","endLine":8,"endColumn":53},{"ruleId":"281","severity":1,"message":"297","line":11,"column":27,"nodeType":"283","messageId":"284","endLine":11,"endColumn":33},{"ruleId":"281","severity":1,"message":"299","line":11,"column":41,"nodeType":"283","messageId":"284","endLine":11,"endColumn":48},{"ruleId":"281","severity":1,"message":"374","line":23,"column":10,"nodeType":"283","messageId":"284","endLine":23,"endColumn":14},{"ruleId":"281","severity":1,"message":"375","line":23,"column":89,"nodeType":"283","messageId":"284","endLine":23,"endColumn":101},{"ruleId":"281","severity":1,"message":"376","line":23,"column":103,"nodeType":"283","messageId":"284","endLine":23,"endColumn":112},{"ruleId":"281","severity":1,"message":"377","line":28,"column":46,"nodeType":"283","messageId":"284","endLine":28,"endColumn":55},{"ruleId":"281","severity":1,"message":"378","line":8,"column":55,"nodeType":"283","messageId":"284","endLine":8,"endColumn":64},{"ruleId":"281","severity":1,"message":"331","line":11,"column":10,"nodeType":"283","messageId":"284","endLine":11,"endColumn":19},{"ruleId":"281","severity":1,"message":"332","line":11,"column":21,"nodeType":"283","messageId":"284","endLine":11,"endColumn":30},{"ruleId":"281","severity":1,"message":"333","line":11,"column":32,"nodeType":"283","messageId":"284","endLine":11,"endColumn":42},{"ruleId":"281","severity":1,"message":"335","line":11,"column":54,"nodeType":"283","messageId":"284","endLine":11,"endColumn":60},{"ruleId":"281","severity":1,"message":"379","line":32,"column":7,"nodeType":"283","messageId":"284","endLine":32,"endColumn":19},{"ruleId":"281","severity":1,"message":"380","line":98,"column":10,"nodeType":"283","messageId":"284","endLine":98,"endColumn":17},{"ruleId":"309","severity":1,"message":"364","line":135,"column":25,"nodeType":"365","endLine":135,"endColumn":61},{"ruleId":"309","severity":1,"message":"364","line":135,"column":63,"nodeType":"365","endLine":135,"endColumn":100},{"ruleId":"281","severity":1,"message":"381","line":142,"column":9,"nodeType":"283","messageId":"284","endLine":142,"endColumn":18},{"ruleId":"309","severity":1,"message":"382","line":144,"column":4,"nodeType":"311","endLine":144,"endColumn":42,"suggestions":"383"},{"ruleId":"309","severity":1,"message":"384","line":306,"column":59,"nodeType":"311","endLine":306,"endColumn":91,"suggestions":"385"},{"ruleId":"281","severity":1,"message":"322","line":8,"column":27,"nodeType":"283","messageId":"284","endLine":8,"endColumn":33},{"ruleId":"281","severity":1,"message":"378","line":8,"column":55,"nodeType":"283","messageId":"284","endLine":8,"endColumn":64},{"ruleId":"281","severity":1,"message":"331","line":11,"column":10,"nodeType":"283","messageId":"284","endLine":11,"endColumn":19},{"ruleId":"281","severity":1,"message":"332","line":11,"column":21,"nodeType":"283","messageId":"284","endLine":11,"endColumn":30},{"ruleId":"281","severity":1,"message":"333","line":11,"column":32,"nodeType":"283","messageId":"284","endLine":11,"endColumn":42},{"ruleId":"281","severity":1,"message":"334","line":11,"column":44,"nodeType":"283","messageId":"284","endLine":11,"endColumn":52},{"ruleId":"281","severity":1,"message":"335","line":11,"column":54,"nodeType":"283","messageId":"284","endLine":11,"endColumn":60},{"ruleId":"281","severity":1,"message":"296","line":13,"column":10,"nodeType":"283","messageId":"284","endLine":13,"endColumn":25},{"ruleId":"281","severity":1,"message":"298","line":13,"column":49,"nodeType":"283","messageId":"284","endLine":13,"endColumn":53},{"ruleId":"281","severity":1,"message":"299","line":13,"column":55,"nodeType":"283","messageId":"284","endLine":13,"endColumn":62},{"ruleId":"281","severity":1,"message":"300","line":13,"column":64,"nodeType":"283","messageId":"284","endLine":13,"endColumn":72},{"ruleId":"281","severity":1,"message":"336","line":18,"column":10,"nodeType":"283","messageId":"284","endLine":18,"endColumn":15},{"ruleId":"281","severity":1,"message":"386","line":23,"column":10,"nodeType":"283","messageId":"284","endLine":23,"endColumn":22},{"ruleId":"281","severity":1,"message":"307","line":23,"column":35,"nodeType":"283","messageId":"284","endLine":23,"endColumn":48},{"ruleId":"281","severity":1,"message":"387","line":29,"column":9,"nodeType":"283","messageId":"284","endLine":29,"endColumn":17},{"ruleId":"281","severity":1,"message":"388","line":29,"column":19,"nodeType":"283","messageId":"284","endLine":29,"endColumn":30},{"ruleId":"281","severity":1,"message":"389","line":30,"column":9,"nodeType":"283","messageId":"284","endLine":30,"endColumn":16},{"ruleId":"309","severity":1,"message":"390","line":59,"column":6,"nodeType":"311","endLine":59,"endColumn":8,"suggestions":"391"},{"ruleId":"309","severity":1,"message":"384","line":66,"column":49,"nodeType":"311","endLine":66,"endColumn":68,"suggestions":"392"},{"ruleId":"292","replacedBy":"393"},{"ruleId":"294","replacedBy":"394"},{"ruleId":"281","severity":1,"message":"322","line":8,"column":27,"nodeType":"283","messageId":"284","endLine":8,"endColumn":33},{"ruleId":"281","severity":1,"message":"282","line":8,"column":35,"nodeType":"283","messageId":"284","endLine":8,"endColumn":42},{"ruleId":"281","severity":1,"message":"285","line":8,"column":44,"nodeType":"283","messageId":"284","endLine":8,"endColumn":53},{"ruleId":"281","severity":1,"message":"378","line":8,"column":55,"nodeType":"283","messageId":"284","endLine":8,"endColumn":64},{"ruleId":"281","severity":1,"message":"331","line":11,"column":10,"nodeType":"283","messageId":"284","endLine":11,"endColumn":19},{"ruleId":"281","severity":1,"message":"332","line":11,"column":21,"nodeType":"283","messageId":"284","endLine":11,"endColumn":30},{"ruleId":"281","severity":1,"message":"333","line":11,"column":32,"nodeType":"283","messageId":"284","endLine":11,"endColumn":42},{"ruleId":"281","severity":1,"message":"334","line":11,"column":44,"nodeType":"283","messageId":"284","endLine":11,"endColumn":52},{"ruleId":"281","severity":1,"message":"335","line":11,"column":54,"nodeType":"283","messageId":"284","endLine":11,"endColumn":60},{"ruleId":"281","severity":1,"message":"296","line":14,"column":2,"nodeType":"283","messageId":"284","endLine":14,"endColumn":17},{"ruleId":"281","severity":1,"message":"395","line":18,"column":2,"nodeType":"283","messageId":"284","endLine":18,"endColumn":8},{"ruleId":"281","severity":1,"message":"298","line":21,"column":2,"nodeType":"283","messageId":"284","endLine":21,"endColumn":6},{"ruleId":"281","severity":1,"message":"300","line":29,"column":2,"nodeType":"283","messageId":"284","endLine":29,"endColumn":10},{"ruleId":"281","severity":1,"message":"396","line":30,"column":2,"nodeType":"283","messageId":"284","endLine":30,"endColumn":6},{"ruleId":"281","severity":1,"message":"397","line":47,"column":35,"nodeType":"283","messageId":"284","endLine":47,"endColumn":46},{"ruleId":"281","severity":1,"message":"398","line":49,"column":46,"nodeType":"283","messageId":"284","endLine":49,"endColumn":52},{"ruleId":"281","severity":1,"message":"378","line":8,"column":55,"nodeType":"283","messageId":"284","endLine":8,"endColumn":64},{"ruleId":"281","severity":1,"message":"331","line":11,"column":10,"nodeType":"283","messageId":"284","endLine":11,"endColumn":19},{"ruleId":"281","severity":1,"message":"332","line":11,"column":21,"nodeType":"283","messageId":"284","endLine":11,"endColumn":30},{"ruleId":"281","severity":1,"message":"333","line":11,"column":32,"nodeType":"283","messageId":"284","endLine":11,"endColumn":42},{"ruleId":"281","severity":1,"message":"334","line":11,"column":44,"nodeType":"283","messageId":"284","endLine":11,"endColumn":52},{"ruleId":"281","severity":1,"message":"335","line":11,"column":54,"nodeType":"283","messageId":"284","endLine":11,"endColumn":60},{"ruleId":"281","severity":1,"message":"298","line":25,"column":2,"nodeType":"283","messageId":"284","endLine":25,"endColumn":6},{"ruleId":"281","severity":1,"message":"300","line":27,"column":2,"nodeType":"283","messageId":"284","endLine":27,"endColumn":10},{"ruleId":"281","severity":1,"message":"399","line":30,"column":8,"nodeType":"283","messageId":"284","endLine":30,"endColumn":20},{"ruleId":"281","severity":1,"message":"400","line":31,"column":8,"nodeType":"283","messageId":"284","endLine":31,"endColumn":16},{"ruleId":"281","severity":1,"message":"336","line":35,"column":10,"nodeType":"283","messageId":"284","endLine":35,"endColumn":15},{"ruleId":"281","severity":1,"message":"350","line":43,"column":3,"nodeType":"283","messageId":"284","endLine":43,"endColumn":18},{"ruleId":"281","severity":1,"message":"386","line":44,"column":3,"nodeType":"283","messageId":"284","endLine":44,"endColumn":15},{"ruleId":"281","severity":1,"message":"307","line":47,"column":3,"nodeType":"283","messageId":"284","endLine":47,"endColumn":16},{"ruleId":"281","severity":1,"message":"375","line":48,"column":3,"nodeType":"283","messageId":"284","endLine":48,"endColumn":15},{"ruleId":"281","severity":1,"message":"308","line":50,"column":3,"nodeType":"283","messageId":"284","endLine":50,"endColumn":18},{"ruleId":"281","severity":1,"message":"389","line":58,"column":9,"nodeType":"283","messageId":"284","endLine":58,"endColumn":16},{"ruleId":"281","severity":1,"message":"401","line":58,"column":18,"nodeType":"283","messageId":"284","endLine":58,"endColumn":25},{"ruleId":"281","severity":1,"message":"402","line":141,"column":8,"nodeType":"283","messageId":"284","endLine":141,"endColumn":21},{"ruleId":"309","severity":1,"message":"390","line":146,"column":3,"nodeType":"311","endLine":146,"endColumn":5,"suggestions":"403"},{"ruleId":"281","severity":1,"message":"404","line":151,"column":8,"nodeType":"283","messageId":"284","endLine":151,"endColumn":16},{"ruleId":"309","severity":1,"message":"384","line":151,"column":49,"nodeType":"311","endLine":151,"endColumn":68,"suggestions":"405"},{"ruleId":"406","severity":1,"message":"407","line":57,"column":2,"nodeType":"408","messageId":"409","endLine":57,"endColumn":14},{"ruleId":"281","severity":1,"message":"378","line":8,"column":55,"nodeType":"283","messageId":"284","endLine":8,"endColumn":64},{"ruleId":"281","severity":1,"message":"331","line":11,"column":10,"nodeType":"283","messageId":"284","endLine":11,"endColumn":19},{"ruleId":"281","severity":1,"message":"332","line":11,"column":21,"nodeType":"283","messageId":"284","endLine":11,"endColumn":30},{"ruleId":"281","severity":1,"message":"333","line":11,"column":32,"nodeType":"283","messageId":"284","endLine":11,"endColumn":42},{"ruleId":"281","severity":1,"message":"334","line":11,"column":44,"nodeType":"283","messageId":"284","endLine":11,"endColumn":52},{"ruleId":"281","severity":1,"message":"335","line":11,"column":54,"nodeType":"283","messageId":"284","endLine":11,"endColumn":60},{"ruleId":"281","severity":1,"message":"296","line":13,"column":10,"nodeType":"283","messageId":"284","endLine":13,"endColumn":25},{"ruleId":"281","severity":1,"message":"410","line":13,"column":53,"nodeType":"283","messageId":"284","endLine":13,"endColumn":64},{"ruleId":"281","severity":1,"message":"298","line":13,"column":66,"nodeType":"283","messageId":"284","endLine":13,"endColumn":70},{"ruleId":"281","severity":1,"message":"299","line":13,"column":72,"nodeType":"283","messageId":"284","endLine":13,"endColumn":79},{"ruleId":"281","severity":1,"message":"300","line":13,"column":81,"nodeType":"283","messageId":"284","endLine":13,"endColumn":89},{"ruleId":"281","severity":1,"message":"411","line":16,"column":8,"nodeType":"283","messageId":"284","endLine":16,"endColumn":18},{"ruleId":"281","severity":1,"message":"412","line":17,"column":8,"nodeType":"283","messageId":"284","endLine":17,"endColumn":18},{"ruleId":"281","severity":1,"message":"336","line":20,"column":10,"nodeType":"283","messageId":"284","endLine":20,"endColumn":15},{"ruleId":"281","severity":1,"message":"413","line":22,"column":46,"nodeType":"283","messageId":"284","endLine":22,"endColumn":55},{"ruleId":"281","severity":1,"message":"386","line":28,"column":3,"nodeType":"283","messageId":"284","endLine":28,"endColumn":15},{"ruleId":"281","severity":1,"message":"307","line":32,"column":3,"nodeType":"283","messageId":"284","endLine":32,"endColumn":16},{"ruleId":"281","severity":1,"message":"306","line":35,"column":3,"nodeType":"283","messageId":"284","endLine":35,"endColumn":18},{"ruleId":"281","severity":1,"message":"389","line":47,"column":9,"nodeType":"283","messageId":"284","endLine":47,"endColumn":16},{"ruleId":"309","severity":1,"message":"414","line":49,"column":82,"nodeType":"311","endLine":49,"endColumn":99,"suggestions":"415"},{"ruleId":"281","severity":1,"message":"416","line":81,"column":8,"nodeType":"283","messageId":"284","endLine":81,"endColumn":25},{"ruleId":"417","severity":1,"message":"418","line":111,"column":15,"nodeType":"283","messageId":"419","endLine":111,"endColumn":22},{"ruleId":"281","severity":1,"message":"420","line":138,"column":13,"nodeType":"283","messageId":"284","endLine":138,"endColumn":21},{"ruleId":"309","severity":1,"message":"390","line":231,"column":3,"nodeType":"311","endLine":231,"endColumn":5,"suggestions":"421"},{"ruleId":"309","severity":1,"message":"422","line":234,"column":44,"nodeType":"311","endLine":237,"endColumn":3,"suggestions":"423"},{"ruleId":"309","severity":1,"message":"364","line":235,"column":3,"nodeType":"365","endLine":235,"endColumn":38},{"ruleId":"309","severity":1,"message":"364","line":236,"column":3,"nodeType":"365","endLine":236,"endColumn":35},{"ruleId":"309","severity":1,"message":"424","line":244,"column":47,"nodeType":"311","endLine":244,"endColumn":83,"suggestions":"425"},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'ClickAwayListener' is defined but never used.","'Typography' is defined but never used.","'setShowMenu' is assigned a value but never used.","'fold' is assigned a value but never used.","'handleClickAway' is assigned a value but never used.","'handleClickLogo' is assigned a value but never used.","no-native-reassign",["426"],"no-negated-in-lhs",["427"],"'SwipeableDrawer' is defined but never used.","'Button' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'ArrowRightIcon' is defined but never used.","'ArrowDropDownIcon' is defined but never used.","'initNavTree' is defined but never used.","'layoutStateHash' is assigned a value but never used.","'foldStateHash' is assigned a value but never used.","'editorStateHash' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchStateFromCookies' and 'saveStateToCookies'. Either include them or remove the dependency array.","ArrayExpression",["428"],"React Hook useEffect has a missing dependency: 'saveStateToCookies'. Either include it or remove the dependency array.",["429"],"React Hook useEffect has missing dependencies: 'layoutState' and 'setFoldState'. Either include them or remove the dependency array.",["430"],"React Hook useMemo has an unnecessary dependency: 'curHash'. Either exclude it or remove the dependency array.",["431"],"React Hook useMemo has missing dependencies: 'foldOverrideCallback', 'layoutState.curFold', and 'userState.showEditor'. Either include them or remove the dependency array.",["432"],"'useState' is defined but never used.","'useRef' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["426"],["427"],"'FrogBase' is defined but never used.","'useLoader' is defined but never used.","'useUpdate' is defined but never used.","'useSpring' is defined but never used.","'useSprings' is defined but never used.","'animated' is defined but never used.","'config' is defined but never used.","'Folds' is defined but never used.","'paperSize' is assigned a value but never used.","'newOverlayPos' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-dupe-keys","Duplicate key 'width'.","ObjectExpression","'Canvas' is defined but never used.","'extend' is defined but never used.","'position' is assigned a value but never used.","'scale' is assigned a value but never used.","'foldLastUpdated' is assigned a value but never used.","'instructions' is assigned a value but never used.","'setInstructions' is assigned a value but never used.","'rotation' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'isSameLine' is assigned a value but never used.","'normLine' is assigned a value but never used.","'printVect' is assigned a value but never used.","'updateScreenPosition' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'foldState.usingDefaults'. Either include it or remove the dependency array.",["433"],"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","React Hook useEffect has missing dependencies: 'foldState.active', 'foldState.maxSteps', 'performCommands', 'performReverseCommands', 'prevStep', and 'stepArray'. Either include them or remove the dependency array.",["434"],"React Hook useEffect has missing dependencies: 'initFold' and 'setFoldObj'. Either include them or remove the dependency array.",["435"],"React Hook useEffect has a missing dependency: 'setFoldState'. Either include it or remove the dependency array.",["436"],"React Hook useEffect has missing dependencies: 'camera', 'classes.vertLabel', 'ctrlOverlay', and 'getXYForPos'. Either include them or remove the dependency array.",["437"],"'page' is assigned a value but never used.","'setFoldState' is assigned a value but never used.","'userState' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'createRef' is defined but never used.","'AnimatedCard' is assigned a value but never used.","'posHash' is assigned a value but never used.","'imagePath' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'layoutState.useImages'. Either exclude it or remove the dependency array. Outer scope values like 'layoutState.useImages' aren't valid dependencies because mutating them doesn't re-render the component.",["438"],"React Hook useMemo has an unnecessary dependency: 'window.innerWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.innerWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["439"],"'windowHeight' is assigned a value but never used.","'cardRefs' is assigned a value but never used.","'setCardRefs' is assigned a value but never used.","'curHash' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'classes.fold_controls_button' and 'classes.fold_controls_button_label'. Either include them or remove the dependency array.",["440"],["441"],["426"],["427"],"'Select' is defined but never used.","'Card' is defined but never used.","'layoutState' is assigned a value but never used.","'logout' is assigned a value but never used.","'SkipPrevious' is defined but never used.","'SkipNext' is defined but never used.","'setHash' is assigned a value but never used.","'buttonClasses' is assigned a value but never used.",["442"],"'ctrlLeft' is assigned a value but never used.",["443"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'ButtonGroup' is defined but never used.","'ExpandMore' is defined but never used.","'ExpandLess' is defined but never used.","'printPath' is defined but never used.","React Hook useMemo has a missing dependency: 'initFold'. Either include it or remove the dependency array.",["444"],"'handleExpandClick' is assigned a value but never used.","no-use-before-define","'stepIdx' was used before it was defined.","usedBeforeDefined","'children' is assigned a value but never used.",["445"],"React Hook useMemo has missing dependencies: 'foldState.usingDefaults' and 'initFold'. Either include them or remove the dependency array.",["446"],"React Hook useEffect has missing dependencies: 'maxLevel' and 'refreshRenderRows'. Either include them or remove the dependency array.",["447"],"no-global-assign","no-unsafe-negation",{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"454","fix":"474"},{"desc":"472","fix":"475"},{"desc":"454","fix":"476"},{"desc":"477","fix":"478"},{"desc":"472","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},"Update the dependencies array to be: [fetchStateFromCookies, saveStateToCookies]",{"range":"484","text":"485"},"Update the dependencies array to be: [layoutState.hash, foldState.hash, editorState.hash, saveStateToCookies]",{"range":"486","text":"487"},"Update the dependencies array to be: [layoutState, layoutState.curFold, setFoldState]",{"range":"488","text":"489"},"Update the dependencies array to be: []",{"range":"490","text":"491"},"Update the dependencies array to be: [foldOverrideCallback, layoutState.curFold, layoutState.page, userState.showEditor, windowHeight]",{"range":"492","text":"493"},"Update the dependencies array to be: [foldState.usingDefaults]",{"range":"494","text":"495"},"Update the dependencies array to be: [foldState.active, foldState.maxSteps, foldState.stepIdx, performCommands, performReverseCommands, prevStep, stepArray]",{"range":"496","text":"497"},"Update the dependencies array to be: [foldKey, initFold, setFoldObj]",{"range":"498","text":"499"},"Update the dependencies array to be: [foldKey, setFoldState, stepArray.length]",{"range":"500","text":"501"},"Update the dependencies array to be: [camera, classes.vertLabel, ctrlOverlay, editorState.showLabels, getXYForPos]",{"range":"502","text":"503"},"Update the dependencies array to be: [foldEntry.img]",{"range":"504","text":"505"},"Update the dependencies array to be: [activeIndex]",{"range":"506","text":"507"},"Update the dependencies array to be: [classes.fold_controls_button, classes.fold_controls_button_label]",{"range":"508","text":"509"},{"range":"510","text":"491"},{"range":"511","text":"509"},{"range":"512","text":"491"},"Update the dependencies array to be: [initFold]",{"range":"513","text":"514"},{"range":"515","text":"509"},"Update the dependencies array to be: [foldState.usingDefaults, initFold]",{"range":"516","text":"517"},"Update the dependencies array to be: [foldLastUpdated, foldState.stepIdx, maxLevel, refreshRenderRows]",{"range":"518","text":"519"},[4319,4321],"[fetchStateFromCookies, saveStateToCookies]",[4372,4424],"[layoutState.hash, foldState.hash, editorState.hash, saveStateToCookies]",[4510,4531],"[layoutState, layoutState.curFold, setFoldState]",[4733,4742],"[]",[4845,4877],"[foldOverrideCallback, layoutState.curFold, layoutState.page, userState.showEditor, windowHeight]",[30286,30380],"[foldState.usingDefaults]",[30416,30435],"[foldState.active, foldState.maxSteps, foldState.stepIdx, performCommands, performReverseCommands, prevStep, stepArray]",[30464,30473],"[foldKey, initFold, setFoldObj]",[30514,30541],"[foldKey, setFoldState, stepArray.length]",[30569,30593],"[camera, classes.vertLabel, ctrlOverlay, editorState.showLabels, getXYForPos]",[4233,4271],"[foldEntry.img]",[8646,8678],"[activeIndex]",[1652,1654],"[classes.fold_controls_button, classes.fold_controls_button_label]",[1828,1847],[3543,3545],[3640,3659],[1549,1566],"[initFold]",[6654,6656],[6705,6783],"[foldState.usingDefaults, initFold]",[6955,6991],"[foldLastUpdated, foldState.stepIdx, maxLevel, refreshRenderRows]"]